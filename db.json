{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/about/img/touxiag.jpg","path":"about/img/touxiag.jpg","modified":1,"renderable":0},{"_id":"source/img/2017-8-14/2.JPG","path":"img/2017-8-14/2.JPG","modified":1,"renderable":0},{"_id":"source/img/2017-8-14/1.png","path":"img/2017-8-14/1.png","modified":1,"renderable":0},{"_id":"source/img/2017-8-14/3.JPG","path":"img/2017-8-14/3.JPG","modified":1,"renderable":0},{"_id":"source/img/2017-8-14/4.JPG","path":"img/2017-8-14/4.JPG","modified":1,"renderable":0},{"_id":"source/img/2017-8-14/5.JPG","path":"img/2017-8-14/5.JPG","modified":1,"renderable":0},{"_id":"source/img/2017-8-14/6.JPG","path":"img/2017-8-14/6.JPG","modified":1,"renderable":0},{"_id":"source/img/2017-8-14/7.JPG","path":"img/2017-8-14/7.JPG","modified":1,"renderable":0},{"_id":"source/img/2017-8-16/1.png","path":"img/2017-8-16/1.png","modified":1,"renderable":0},{"_id":"source/img/2017-8-16/2.JPG","path":"img/2017-8-16/2.JPG","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wlf.jpg","path":"images/wlf.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wlfsmile.jpg","path":"images/wlfsmile.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"b204de9a3a041814e6841f31ee93fb7c822dc406","modified":1502801509347},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1502701980865},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1502701980865},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1502701980865},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1502701980871},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1502701980873},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1502701980874},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1502701980875},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1502701980876},{"_id":"themes/next/.travis.yml","hash":"ee90f9452591ebba1b9cfba2543281109d3afdce","modified":1502701980876},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1502701980877},{"_id":"themes/next/README.en.md","hash":"fd7a00ae9026fb4f87dd7eed9ce049d0db447140","modified":1502701980878},{"_id":"themes/next/README.md","hash":"fa61cf773fff1ddaaf9bbcfa60d1e6074e6690ec","modified":1502701980878},{"_id":"themes/next/_config.yml","hash":"a8a91f7b7b6a6b7b20ffe6ce2f0289f520d22dbb","modified":1502890108411},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1502701980880},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1502701980880},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1502701980946},{"_id":"source/_posts/express-session介绍.md","hash":"af2f387f4c43ef2a1fad80ea10ff81d6a85aad55","modified":1502860380196},{"_id":"source/_posts/hello-world.md","hash":"94ff7ee22c947e5a886f087f67f77c6d0b32d353","modified":1502860013223},{"_id":"source/_posts/hexo博客分支教训.md","hash":"fc76b530f82a2e2ade696789c4863051fff7dfe3","modified":1502863068892},{"_id":"source/_posts/markdowm语法总结.md","hash":"15c8e0c7eff8730e4adcccf033e32c8b2dc8514e","modified":1502801509349},{"_id":"source/_posts/redux学习笔记——简易开发步骤.md","hash":"0b98fbc4b31798150e0598fe51f48c7adc7aa08c","modified":1502860753004},{"_id":"source/_posts/《你不知道的JavaScript》——作用域1-0.md","hash":"4bc4154610af7254e64d78c6bf95f45f0dce26f1","modified":1502801509350},{"_id":"source/_posts/使用Node.js-Express-简易来发服务端实例.md","hash":"e718bac831fee60b691ae02bc04134c8477617dd","modified":1502801509351},{"_id":"source/_posts/函数作用域和块作用域.md","hash":"e7bd126f05d1ca68117c5ce6ee74886d06908f1c","modified":1502801509352},{"_id":"source/_posts/极客官网项目制作总结.md","hash":"2ac67e5874bcf33c65f12ffbfe5ad2ab9cd56aed","modified":1502801509352},{"_id":"source/_posts/深入react技术栈-1.md","hash":"bf55fe91bcf9fb54b3b4644d6f446ad8f1338582","modified":1502801509353},{"_id":"source/_posts/深入react技术栈-2.md","hash":"6a58971e2c08e2406ab8f64d80391c5b9e00b1a0","modified":1502801509353},{"_id":"source/_posts/第一次讨论.md","hash":"0332de1e1387dc9cf668e9cbdb9368b07d1b54ff","modified":1502801509354},{"_id":"source/_posts/第二次讨论.md","hash":"e83dfce977d640ec841357d05e000d93e7bc40f2","modified":1502801509355},{"_id":"source/_posts/纪念一下做程序员这半年.md","hash":"e6fe7943d1656f0274fc178354d3806cf0ee12f8","modified":1502801509356},{"_id":"source/about/index.md","hash":"379415d764070f42d461da4fafcb7f65e508f6fd","modified":1502864019885},{"_id":"source/categories/index.md","hash":"2522d888dca560a2fec4291ecb76825dc88c8dee","modified":1502801509361},{"_id":"source/tags/index.md","hash":"7110cced5beb3beb288e3c69566a812b72725159","modified":1502801509381},{"_id":"themes/next/languages/de.yml","hash":"ee6262473faa1fa55e3dc7b0bb6542f4f6a275c8","modified":1502701980881},{"_id":"themes/next/languages/default.yml","hash":"2443657cf60284ecf01c60a5e20acd406f321d88","modified":1502701980882},{"_id":"themes/next/languages/en.yml","hash":"2443657cf60284ecf01c60a5e20acd406f321d88","modified":1502701980883},{"_id":"themes/next/languages/fr-FR.yml","hash":"c6f3a38a6c27d0815ef72d66020805408aa24019","modified":1502701980883},{"_id":"themes/next/languages/id.yml","hash":"58c9886ccd224cee3db6f9b9e1a86dcd4ff47995","modified":1502701980884},{"_id":"themes/next/languages/ko.yml","hash":"fbfad308103fb95c635609419bfa3420cb69d646","modified":1502701980885},{"_id":"themes/next/languages/ja.yml","hash":"6ba8858255b4cae5e00f5fabd1cfaea3c98a34c2","modified":1502701980884},{"_id":"themes/next/languages/pt-BR.yml","hash":"5e160fa8c8bd1f16b50db161d5bc8ae2ebd6a0c5","modified":1502701980886},{"_id":"themes/next/languages/pt.yml","hash":"1141a4896986de6e2383c5694c0359eaa22fb9b4","modified":1502701980887},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0b9ce7d62e7d55235a2770817a40e84577ce38c1","modified":1502701980888},{"_id":"themes/next/languages/ru.yml","hash":"43a8fb18dbfeaeed71268d75eb4c542061766419","modified":1502701980887},{"_id":"themes/next/languages/zh-hk.yml","hash":"13b2808d632c27748a38a752457d4538c37b8ebb","modified":1502701980889},{"_id":"themes/next/languages/zh-tw.yml","hash":"a91f6c8fa19044afac162a1c73e03836e9460bc5","modified":1502701980889},{"_id":"themes/next/layout/_layout.swig","hash":"05d488dda37a55aa3bef2ebca0f2b5f7be24d99d","modified":1502711879237},{"_id":"themes/next/layout/archive.swig","hash":"c2be7c95af6205c7501a261f2fc9702c57107f89","modified":1502701980942},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1502701980943},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1502701980943},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1502701980944},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1502701980944},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1502701980945},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1502701980945},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1502701980947},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1502701980948},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1502701981178},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1502701981179},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1502701981179},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502701981047},{"_id":"source/about/img/touxiag.jpg","hash":"9a2bc026130963527099150b2a92ec27e785a00c","modified":1502801509358},{"_id":"source/img/2017-8-14/2.JPG","hash":"41d0d53707255557dabb3bafd0694bd5afb10201","modified":1502801509364},{"_id":"source/img/2017-8-14/1.png","hash":"1becf522bf82f4762b3ff2fbc54e2c3016a63f1e","modified":1502801509363},{"_id":"source/img/2017-8-14/3.JPG","hash":"00a13dda2143c0f4253f63fc99decb55c9df104c","modified":1502801509367},{"_id":"source/img/2017-8-14/4.JPG","hash":"1866118f15b300ef366f99d22c9e53b9c9578d1f","modified":1502801509370},{"_id":"source/img/2017-8-14/5.JPG","hash":"e59398277bec71e01a6bd5d7129d49d49e066848","modified":1502801509372},{"_id":"source/img/2017-8-14/6.JPG","hash":"0dfac49803923fe7cbb7e45b7368ba3fd031f85b","modified":1502801509374},{"_id":"source/img/2017-8-14/7.JPG","hash":"49f24880d5d5b1508d2b218c037f14cd3a9b9a94","modified":1502801509377},{"_id":"source/img/2017-8-16/1.png","hash":"f4227d5040c36734b9fb0d5f57eb1f6669199b87","modified":1502861070958},{"_id":"source/img/2017-8-16/2.JPG","hash":"5396d509c50c0ef97bdd2543f4cebf163dbcd7a9","modified":1502862205018},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1502701980891},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1502701980891},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1502701980893},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1502701980893},{"_id":"themes/next/layout/_macro/post.swig","hash":"3997464ce12e457c90269515e28ae514b5d9ada1","modified":1502711943810},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5b1e91c2f6f88fbecd426cd0727e7b7854c6cc1d","modified":1502701980894},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f10ca698e8ea0c31ff72a6cffa832c3cd703a133","modified":1502701980895},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1502701980896},{"_id":"themes/next/layout/_partials/comments.swig","hash":"fc0ff72b3a8ab25029a070acee066d9eaa0b0493","modified":1502701980897},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1694faba317f4a67dfd8dc725223ac3da3ea46ef","modified":1502701980898},{"_id":"themes/next/layout/_partials/head.swig","hash":"476e6c2452732c2741f518004d336bc348e710d7","modified":1502701980898},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1502701980903},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1502701980904},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1502701980905},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1502701980906},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1502701980912},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1502701980912},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1502701980915},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1502701980929},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1502701980929},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1502701980930},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1502701980930},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1502701980931},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1502701980932},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1502701980949},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1502701980950},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1502701980951},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1502701980951},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1502701980952},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1502701980952},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1502701980953},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1502701980954},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1502701980954},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1502701981046},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1502701981048},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1502701981048},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1502701981049},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1502701981050},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1502701981050},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1502701981051},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1502701981052},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1502701981053},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1502701981053},{"_id":"themes/next/source/images/favicon.ico","hash":"2eb09333938690cec4d5831e5dab7cf3197f0456","modified":1417924756000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502701981054},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502701981054},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1502701981055},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1502701981055},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502701981056},{"_id":"themes/next/source/images/wlf.jpg","hash":"897198c002cc9d984fd05c0bf945b858d0aef16d","modified":1473142356483},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502701980914},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502701980914},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502701981020},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502701981021},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502701981022},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502701981043},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502701981045},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1502701980899},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1502701980901},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1502701980907},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1502701980907},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1502701980908},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1502701980909},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1502701980910},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1502701980910},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"8ed117eeeac17d562a54ec6be556988be0ec67ba","modified":1502701980911},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1502701980913},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1502701980914},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1502701980915},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1502701980924},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1502701980925},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1502701980925},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1502701980926},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"92ea45b877b1fec2010c7b409f121c986ee5075b","modified":1502701980926},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1502701980927},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"602104d7ac47f7888d97e810419e58593a79e8ba","modified":1502701980928},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1502701980928},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1502701980917},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1502701980917},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1502701980918},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1502701980919},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1502701980919},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1502701980920},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1502701980921},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1502701980921},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1502701980922},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1502701980922},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1502701980923},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1502701980923},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1502701980938},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1502701980939},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1502701980940},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1502701980941},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"fd3d152b61d7dfbaf0fd1aca342c3c5144c72933","modified":1502713955049},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1502701981020},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1502701981021},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1502701981022},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"2a4e844dec690365774c2f6e8984706fee39ea63","modified":1502701981042},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1502701981042},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1502701981044},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a627633d3bb70b8501572b18037def478beb7017","modified":1502701981045},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1502701981057},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"96c8b5fe1999de1b3a46730d9812787dfcd65884","modified":1502701981058},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1502701981057},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1502701981059},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1502701981059},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1502701981060},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1502701981061},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1502701981061},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1502701981063},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1502701981064},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1502701981067},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1502701981078},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1502701981085},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1502701981086},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1502701981087},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1502701981087},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1502701981103},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1502701981104},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1502701981104},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1502701981105},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1502701981108},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1502701981109},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1502701981109},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1502701981110},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1502701981110},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1502701981140},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1502701981142},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1502701981143},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1502701981143},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1502701981144},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1502701981145},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1502701981145},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1502701981146},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1502701981147},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1502701981147},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1502701981148},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1502701981149},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1502701981149},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1502701981150},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1502701981150},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1502701981151},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1502701981152},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1502701981153},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1502701981154},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1502701981155},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1502701981155},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1502701981157},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1502701981157},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1502701981158},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1502701981170},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1502701981171},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1502701981176},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1502701981177},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1502701981177},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1502701981141},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1502701980937},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1502701980936},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1502701980956},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1502701980957},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1502701980957},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1502701980958},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1502701980958},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1502701980973},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1502701980995},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"c9b6e70e67a0b2c41a03181302379afdc26da5b6","modified":1502701981014},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"be4e44ab7b407c379cdba56fd5595a273c578598","modified":1502701981015},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1502701981016},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1502701981017},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1502701981017},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1502701981018},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1502701981018},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1502701981023},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1502701981024},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1502701981025},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1502701981025},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1502701981026},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1502701981026},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1502701981028},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1502701981027},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1502701981034},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1502701981035},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1502701981036},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1502701981036},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1502701981037},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1502701981039},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"d4cf54b33e1bb8746a77ce2446d581d01be5329d","modified":1502701981039},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1502701981040},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1502701981040},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"36026bc6e8d3a631f109d766fdd21857697650a0","modified":1502701981041},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1502701981041},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1502701981062},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1502701981074},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1502701981076},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1502701981077},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502701981088},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502701981088},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502701981089},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502701981090},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502701981091},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502701981090},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1502701981099},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1502701981101},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1502701981102},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1502701981106},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502701981107},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1502701981112},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1502701981112},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1502701981113},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1502701981169},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1502701981170},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1502701981075},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502701981137},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502701981139},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1502701981174},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1502701980960},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1502701980961},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1502701980961},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1502701980962},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1502701980962},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1502701980963},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1502701980966},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1502701980965},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1502701980967},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1502701980968},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1502701980970},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1502701980971},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1502701980972},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1502701980972},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1502701980975},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1502701980974},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1502701980974},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1502701980975},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1502701980977},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1502701980976},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1502701980978},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1502701980978},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f363a544aa800a2a5ed97c40887fe9743f67b03b","modified":1502701980979},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1502701980979},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1502701980980},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1502701980980},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1502701980981},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1502701980982},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"23c7a129452f7708fe7e29ce7ef2df969de9951d","modified":1502701980983},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"5f3510419161ec22ca88cce6a181ddad61de9e86","modified":1502701980985},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"055d2d9516d63b8ebbe421b254cc078862264071","modified":1502717591473},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1502701980986},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1502701980986},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1502701980988},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1502701980990},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1502701980990},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1502701980991},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3e72f251740d4d1d73a0a8474408a8d6d1207305","modified":1502717416366},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1502701980995},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1502701980999},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1502701981003},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1502701981004},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1502701981005},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1502701981005},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1502701981006},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1502701981007},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1502701981008},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1502701981008},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1502701981010},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1502701981009},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1502701981010},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1502701981011},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1502701981011},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1502701981012},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1502701981013},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1502701981013},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1502701981029},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1502701981031},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1502701981038},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1502701981071},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1502701981070},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1502701981071},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1502701981072},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502701981092},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1502701981093},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1502701981093},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1502701981094},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1502701981095},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1502701981097},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502701981117},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502701981121},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502701981135},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1502701981084},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1502701981167},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1502701981131},{"_id":"themes/next/source/images/wlfsmile.jpg","hash":"cbc37d60cc773a84a49051c439e0a4972aaced22","modified":1501064237176},{"_id":"public/atom.xml","hash":"551d9fc972e87bff16bdaa23446c5b3e6f83ab2f","modified":1502891067041},{"_id":"public/categories/index.html","hash":"38c470a9e1906759a4d3d8b8a5428c80ac418d22","modified":1502891067132},{"_id":"public/tags/index.html","hash":"140e61f6a50abab39cb75cfc050cdc8e1eef2c52","modified":1502891067132},{"_id":"public/archives/page/2/index.html","hash":"92e62e9bbadd49eade3af44c7cf52e40fac26e68","modified":1502891067132},{"_id":"public/archives/2016/index.html","hash":"ebf801f8e10638f3da5cae745b20432f0b9447a7","modified":1502891067132},{"_id":"public/archives/2016/10/index.html","hash":"c044df0dcb1f0112328b358af83d878d6996a3d0","modified":1502891067133},{"_id":"public/archives/2017/page/2/index.html","hash":"e6589b2374d5531e4453295783803b468aa7b52e","modified":1502891067133},{"_id":"public/archives/2017/01/index.html","hash":"6b3719a64841fa4dfbae11a0a6bc3026b53eab1f","modified":1502891067133},{"_id":"public/archives/2017/02/index.html","hash":"31af27f9e26bdd717d6fadbec3c179b31aab9a3c","modified":1502891067133},{"_id":"public/archives/2017/04/index.html","hash":"bfe460410b8fad28593123f85f2f4e1cca6cfaa9","modified":1502891067133},{"_id":"public/archives/2017/07/index.html","hash":"be9a200f40e031ab7c85c3364ce30173beb2bce5","modified":1502891067133},{"_id":"public/archives/2017/08/index.html","hash":"6da6c48d6364e7a7217032dc6d5f67f870666a88","modified":1502891067133},{"_id":"public/categories/Node/index.html","hash":"d52d21cd2abea0896879b8d3e6b1363d123ce51b","modified":1502891067134},{"_id":"public/categories/hexo/index.html","hash":"d10498ccfc9139a5188d1159eb5255fac9820bff","modified":1502891067134},{"_id":"public/categories/react/index.html","hash":"a12ac0053ea54dec17f75247110aa0a0d0315691","modified":1502891067134},{"_id":"public/categories/日常/index.html","hash":"2e938564492154f16edd29d8fed8ff47757775bc","modified":1502891067134},{"_id":"public/tags/express/index.html","hash":"e82a15cf18e7c5ef9f1c4463bb973829fe2c6422","modified":1502891067134},{"_id":"public/tags/session/index.html","hash":"ae907078e883c7b7dfc74f3223eb0757545a0d33","modified":1502891067169},{"_id":"public/tags/hexo/index.html","hash":"76d7c6635d7c16501a27e0b87deb8366f9eb39af","modified":1502891067170},{"_id":"public/tags/markdown/index.html","hash":"f754c6291584d829c1314cecb1a0703c8bca0194","modified":1502891067170},{"_id":"public/tags/redux/index.html","hash":"07d00d049b57574e3d01113b8971c7f5c1f56317","modified":1502891067170},{"_id":"public/tags/node-js/index.html","hash":"ff37da00eba0617916728425ea2834b39509b252","modified":1502891067170},{"_id":"public/tags/JavaScript/index.html","hash":"b1e41f53f21a5b841cf75d3ea46f8292206e8f1f","modified":1502891067170},{"_id":"public/tags/技术总结/index.html","hash":"9cd331f86f4a595b7f638c4d1f120162a2372bb8","modified":1502891067170},{"_id":"public/tags/react/index.html","hash":"937e5b7f58578b20822a590c5066f677690c43ff","modified":1502891067170},{"_id":"public/tags/css/index.html","hash":"2b0eaef10d75b40d46f68b8ee6fecd0e78d7cda0","modified":1502891067171},{"_id":"public/tags/纪念/index.html","hash":"7f160f7a43a1be8db8057c26ee7d2ed477193ce2","modified":1502891067171},{"_id":"public/about/index.html","hash":"245c2543f0542bbe4e67a239eaa55006803c3032","modified":1502891067171},{"_id":"public/2017/08/16/hexo博客分支教训/index.html","hash":"3732983c1e6c67c3bd415c5742322dd10f04936c","modified":1502891067171},{"_id":"public/2017/08/15/express-session介绍/index.html","hash":"fadf889bcb2b0d979a95a5cf710b7c62d455290a","modified":1502891067171},{"_id":"public/2017/08/14/使用Node.js-Express-简易来发服务端实例/index.html","hash":"d1684fd01782b80cafc5293f5d5ceedca50eca0a","modified":1502891067171},{"_id":"public/2017/07/10/redux学习笔记——简易开发步骤/index.html","hash":"5b80e17290154035cf3bfd5a6aacc47b002b6cb2","modified":1502891067171},{"_id":"public/2017/04/27/函数作用域和块作用域/index.html","hash":"e6eb7708cce794df0124129140b04a814367ef2d","modified":1502891067171},{"_id":"public/2017/04/25/《你不知道的JavaScript》——作用域1-0/index.html","hash":"1d41137c1c1b6d1de791e4efd1cb024fbdc2efbb","modified":1502891067171},{"_id":"public/2017/04/10/深入react技术栈-2/index.html","hash":"bbb60ae0dc45b7d1f07bcf7c6b5926c87a504f8f","modified":1502891067171},{"_id":"public/2017/04/10/深入react技术栈-1/index.html","hash":"b353d6c0aae2b12599d5ffb19a1a9321ca555bec","modified":1502891067172},{"_id":"public/2017/02/27/极客官网项目制作总结/index.html","hash":"d8e927c40ef1c36666749ec2a9cec339950c1833","modified":1502891067172},{"_id":"public/2017/01/16/纪念一下做程序员这半年/index.html","hash":"cbdfa585e0fc5ea0442a56bf2fd40d7bf5ec0e7b","modified":1502891067172},{"_id":"public/2017/01/15/hello-world/index.html","hash":"b5204d3968afde6c6e7b06847feb6c0b3e460c8f","modified":1502891067172},{"_id":"public/2017/01/14/markdowm语法总结/index.html","hash":"754963e310aa159cf4a7388db98591981d48a4d4","modified":1502891067172},{"_id":"public/2016/10/27/第二次讨论/index.html","hash":"e170c48f6da6bdb42fa161be0a0261bf063167b1","modified":1502891067172},{"_id":"public/2016/10/15/第一次讨论/index.html","hash":"1062b222eca7ede1ea0385cb93e98c7adea41072","modified":1502891067172},{"_id":"public/archives/index.html","hash":"d9ae6a23309a95fb171da1278b9310cee006e94c","modified":1502891067173},{"_id":"public/archives/2017/index.html","hash":"5d84f3f6b75487c7e547316f6a870d0ea3bc95a7","modified":1502891067173},{"_id":"public/categories/前端/index.html","hash":"cd43075cd3a70331f980a492d0f917bfe4e9066c","modified":1502891067173},{"_id":"public/index.html","hash":"250766198c86a2e2a14d18cdf1443583f67e088d","modified":1502891067173},{"_id":"public/page/2/index.html","hash":"e31cea11a3a59283d831d1882797b24ea1a63aa9","modified":1502891067173},{"_id":"public/CNAME","hash":"b204de9a3a041814e6841f31ee93fb7c822dc406","modified":1502891067244},{"_id":"public/about/img/touxiag.jpg","hash":"9a2bc026130963527099150b2a92ec27e785a00c","modified":1502891067244},{"_id":"public/img/2017-8-14/2.JPG","hash":"41d0d53707255557dabb3bafd0694bd5afb10201","modified":1502891067244},{"_id":"public/img/2017-8-14/1.png","hash":"1becf522bf82f4762b3ff2fbc54e2c3016a63f1e","modified":1502891067244},{"_id":"public/img/2017-8-14/3.JPG","hash":"00a13dda2143c0f4253f63fc99decb55c9df104c","modified":1502891067245},{"_id":"public/img/2017-8-14/4.JPG","hash":"1866118f15b300ef366f99d22c9e53b9c9578d1f","modified":1502891067245},{"_id":"public/img/2017-8-14/5.JPG","hash":"e59398277bec71e01a6bd5d7129d49d49e066848","modified":1502891067245},{"_id":"public/img/2017-8-14/6.JPG","hash":"0dfac49803923fe7cbb7e45b7368ba3fd031f85b","modified":1502891067245},{"_id":"public/img/2017-8-14/7.JPG","hash":"49f24880d5d5b1508d2b218c037f14cd3a9b9a94","modified":1502891067245},{"_id":"public/img/2017-8-16/1.png","hash":"f4227d5040c36734b9fb0d5f57eb1f6669199b87","modified":1502891067245},{"_id":"public/img/2017-8-16/2.JPG","hash":"5396d509c50c0ef97bdd2543f4cebf163dbcd7a9","modified":1502891067245},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1502891067245},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1502891067246},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1502891067246},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1502891067246},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1502891067246},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1502891067246},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1502891067246},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1502891067246},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1502891067246},{"_id":"public/images/favicon.ico","hash":"2eb09333938690cec4d5831e5dab7cf3197f0456","modified":1502891067247},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502891067247},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502891067247},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1502891067247},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1502891067247},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502891067247},{"_id":"public/images/wlf.jpg","hash":"897198c002cc9d984fd05c0bf945b858d0aef16d","modified":1502891067247},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1502891067247},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1502891067247},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502891067247},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502891067247},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502891067247},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502891067247},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502891067248},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502891067248},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1502891067248},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1502891067248},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1502891067248},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1502891067248},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1502891067248},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502891067248},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502891068702},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502891068720},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1502891068745},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1502891068745},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1502891068745},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1502891068746},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1502891068746},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1502891068746},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1502891068746},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1502891068746},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1502891068746},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1502891068746},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1502891068746},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1502891068746},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1502891068747},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1502891068747},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1502891068747},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1502891068747},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1502891068747},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1502891068747},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1502891068748},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1502891068748},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1502891068748},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1502891068748},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1502891068748},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1502891068748},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1502891068748},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1502891068750},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1502891068750},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1502891068750},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1502891068750},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1502891068750},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1502891068751},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1502891068751},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1502891068751},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1502891068751},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1502891068751},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1502891068751},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1502891068751},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1502891068751},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1502891068751},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1502891068751},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502891068752},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1502891068752},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1502891068752},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1502891068754},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1502891068755},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1502891068755},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1502891068755},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1502891068756},{"_id":"public/css/main.css","hash":"d94145fc4ecbb6b7c7a5868a5fcbe31cbdab2648","modified":1502891068756},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1502891068756},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1502891068756},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1502891068756},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1502891068756},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1502891068756},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502891068756},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1502891068757},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1502891068757},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1502891068757},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1502891068757},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1502891068757},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1502891068757},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1502891068757},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1502891068758},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1502891068758},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1502891068758},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1502891068758},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1502891068758},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502891068758},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502891068759},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502891068759},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1502891068819},{"_id":"public/images/wlfsmile.jpg","hash":"cbc37d60cc773a84a49051c439e0a4972aaced22","modified":1502891068856}],"Category":[{"name":"Node","_id":"cj6f2j8ap0004lso00oznyst1"},{"name":"hexo","_id":"cj6f2j8bo000also0513r7eee"},{"name":"前端","_id":"cj6f2j8bz000flso05ownuuq0"},{"name":"react","_id":"cj6f2j8cg000mlso0t5yugo0q"},{"name":"日常","_id":"cj6f2j8dg0015lso05c67pkir"}],"Data":[],"Page":[{"title":"about","date":"2017-01-16T10:18:21.000Z","layout":"about","_content":"## 个人信息\n- 姓名：吴林霏\n- 邮箱：wlffsmile@gmail.com\n- Github：https://github.com/wlfsmile\n- BLog：http://wlfsmile.win\n- 学校/专业/毕业时间：重庆邮电大学/电子商务/2019年\n## 掌握技能\n- 熟悉HTML、CSS，能良好的遵从W3C标准来实现设计稿 \n- 熟悉JavaScript的基本语法，了解ES6的基本用法，能够熟练的使用jQuery \n- 能够使用Google、Sublime Text等工具进行前端开发\n- 能够熟练的使用github、coding进行协同开发\n- 能够使用AJAX等技术进行数据交互 \n- 了解React，对React技术栈有一定的学习\n## 项目介绍\n- 2017.02-2017.03  极客网工作室官网    前端开发\n    - 使用jQuery操作DOM，制作页面效果 页面部分使用到CSS3，为页面添加动画效果 \n    - 使用Ajax与后台进行交互，实现前端页面展示、后台管理界面的增、删、改、查 \n    - 实现了不需要再手动从数据库输入，直接操作后台管理界面进行管理后台数据 \n    - 使用github、coding等工具进行协同开发 \n    - 使用Tomcat服务器、MySQL进行辅助开发\n- 2016.11-2016.12  校园博览会           前端开发\n    - 使用jQuery操作DOM，为页面添加动画效果 \n    - 使用Ajax与后台进行交互，并将后台数据显示在前端页面  \n    - 使用Ajax交互，并实现前端页面向后台输送数据 \n    - 使用cookie将用户名、密码保存在客户端 \n    - 使用Tomcat服务器进行本地开发\n## 个人评价\n- 自学前端，有较好的自控能力，对待事情态度认真 \n- 对事情积极乐观，能够很快融入群体 \n- 责任心强，不喜欢轻言放弃","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-01-16 18:18:21\nlayout: about\n---\n## 个人信息\n- 姓名：吴林霏\n- 邮箱：wlffsmile@gmail.com\n- Github：https://github.com/wlfsmile\n- BLog：http://wlfsmile.win\n- 学校/专业/毕业时间：重庆邮电大学/电子商务/2019年\n## 掌握技能\n- 熟悉HTML、CSS，能良好的遵从W3C标准来实现设计稿 \n- 熟悉JavaScript的基本语法，了解ES6的基本用法，能够熟练的使用jQuery \n- 能够使用Google、Sublime Text等工具进行前端开发\n- 能够熟练的使用github、coding进行协同开发\n- 能够使用AJAX等技术进行数据交互 \n- 了解React，对React技术栈有一定的学习\n## 项目介绍\n- 2017.02-2017.03  极客网工作室官网    前端开发\n    - 使用jQuery操作DOM，制作页面效果 页面部分使用到CSS3，为页面添加动画效果 \n    - 使用Ajax与后台进行交互，实现前端页面展示、后台管理界面的增、删、改、查 \n    - 实现了不需要再手动从数据库输入，直接操作后台管理界面进行管理后台数据 \n    - 使用github、coding等工具进行协同开发 \n    - 使用Tomcat服务器、MySQL进行辅助开发\n- 2016.11-2016.12  校园博览会           前端开发\n    - 使用jQuery操作DOM，为页面添加动画效果 \n    - 使用Ajax与后台进行交互，并将后台数据显示在前端页面  \n    - 使用Ajax交互，并实现前端页面向后台输送数据 \n    - 使用cookie将用户名、密码保存在客户端 \n    - 使用Tomcat服务器进行本地开发\n## 个人评价\n- 自学前端，有较好的自控能力，对待事情态度认真 \n- 对事情积极乐观，能够很快融入群体 \n- 责任心强，不喜欢轻言放弃","updated":"2017-08-16T06:13:39.885Z","path":"about/index.html","comments":1,"_id":"cj6f2j8a40001lso03dkgx25f","content":"<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>姓名：吴林霏</li>\n<li>邮箱：wlffsmile@gmail.com</li>\n<li>Github：<a href=\"https://github.com/wlfsmile\" target=\"_blank\" rel=\"external\">https://github.com/wlfsmile</a></li>\n<li>BLog：<a href=\"http://wlfsmile.win\">http://wlfsmile.win</a></li>\n<li>学校/专业/毕业时间：重庆邮电大学/电子商务/2019年<h2 id=\"掌握技能\"><a href=\"#掌握技能\" class=\"headerlink\" title=\"掌握技能\"></a>掌握技能</h2></li>\n<li>熟悉HTML、CSS，能良好的遵从W3C标准来实现设计稿 </li>\n<li>熟悉JavaScript的基本语法，了解ES6的基本用法，能够熟练的使用jQuery </li>\n<li>能够使用Google、Sublime Text等工具进行前端开发</li>\n<li>能够熟练的使用github、coding进行协同开发</li>\n<li>能够使用AJAX等技术进行数据交互 </li>\n<li>了解React，对React技术栈有一定的学习<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2></li>\n<li>2017.02-2017.03  极客网工作室官网    前端开发<ul>\n<li>使用jQuery操作DOM，制作页面效果 页面部分使用到CSS3，为页面添加动画效果 </li>\n<li>使用Ajax与后台进行交互，实现前端页面展示、后台管理界面的增、删、改、查 </li>\n<li>实现了不需要再手动从数据库输入，直接操作后台管理界面进行管理后台数据 </li>\n<li>使用github、coding等工具进行协同开发 </li>\n<li>使用Tomcat服务器、MySQL进行辅助开发</li>\n</ul>\n</li>\n<li>2016.11-2016.12  校园博览会           前端开发<ul>\n<li>使用jQuery操作DOM，为页面添加动画效果 </li>\n<li>使用Ajax与后台进行交互，并将后台数据显示在前端页面  </li>\n<li>使用Ajax交互，并实现前端页面向后台输送数据 </li>\n<li>使用cookie将用户名、密码保存在客户端 </li>\n<li>使用Tomcat服务器进行本地开发<h2 id=\"个人评价\"><a href=\"#个人评价\" class=\"headerlink\" title=\"个人评价\"></a>个人评价</h2></li>\n</ul>\n</li>\n<li>自学前端，有较好的自控能力，对待事情态度认真 </li>\n<li>对事情积极乐观，能够很快融入群体 </li>\n<li>责任心强，不喜欢轻言放弃</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>姓名：吴林霏</li>\n<li>邮箱：wlffsmile@gmail.com</li>\n<li>Github：<a href=\"https://github.com/wlfsmile\" target=\"_blank\" rel=\"external\">https://github.com/wlfsmile</a></li>\n<li>BLog：<a href=\"http://wlfsmile.win\">http://wlfsmile.win</a></li>\n<li>学校/专业/毕业时间：重庆邮电大学/电子商务/2019年<h2 id=\"掌握技能\"><a href=\"#掌握技能\" class=\"headerlink\" title=\"掌握技能\"></a>掌握技能</h2></li>\n<li>熟悉HTML、CSS，能良好的遵从W3C标准来实现设计稿 </li>\n<li>熟悉JavaScript的基本语法，了解ES6的基本用法，能够熟练的使用jQuery </li>\n<li>能够使用Google、Sublime Text等工具进行前端开发</li>\n<li>能够熟练的使用github、coding进行协同开发</li>\n<li>能够使用AJAX等技术进行数据交互 </li>\n<li>了解React，对React技术栈有一定的学习<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2></li>\n<li>2017.02-2017.03  极客网工作室官网    前端开发<ul>\n<li>使用jQuery操作DOM，制作页面效果 页面部分使用到CSS3，为页面添加动画效果 </li>\n<li>使用Ajax与后台进行交互，实现前端页面展示、后台管理界面的增、删、改、查 </li>\n<li>实现了不需要再手动从数据库输入，直接操作后台管理界面进行管理后台数据 </li>\n<li>使用github、coding等工具进行协同开发 </li>\n<li>使用Tomcat服务器、MySQL进行辅助开发</li>\n</ul>\n</li>\n<li>2016.11-2016.12  校园博览会           前端开发<ul>\n<li>使用jQuery操作DOM，为页面添加动画效果 </li>\n<li>使用Ajax与后台进行交互，并将后台数据显示在前端页面  </li>\n<li>使用Ajax交互，并实现前端页面向后台输送数据 </li>\n<li>使用cookie将用户名、密码保存在客户端 </li>\n<li>使用Tomcat服务器进行本地开发<h2 id=\"个人评价\"><a href=\"#个人评价\" class=\"headerlink\" title=\"个人评价\"></a>个人评价</h2></li>\n</ul>\n</li>\n<li>自学前端，有较好的自控能力，对待事情态度认真 </li>\n<li>对事情积极乐观，能够很快融入群体 </li>\n<li>责任心强，不喜欢轻言放弃</li>\n</ul>\n"},{"title":"categories","date":"2017-08-14T11:03:38.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-14 19:03:38\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-08-15T12:51:49.361Z","path":"categories/index.html","layout":"page","_id":"cj6f2j8ak0003lso00buca5vh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-01-16T04:46:09.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-01-16 12:46:09\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-08-15T12:51:49.381Z","path":"tags/index.html","layout":"page","_id":"cj6f2j8b70007lso0d0qwvspo","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"express-session介绍","date":"2017-08-15T14:15:39.000Z","_content":"","source":"_posts/express-session介绍.md","raw":"---\ntitle: express-session介绍\ndate: 2017-08-15 22:15:39\ntags: [express,session]\ncategories: Node\n---\n","slug":"express-session介绍","published":1,"updated":"2017-08-16T05:13:00.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j89q0000lso0ubq7vz5i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hexo博客分支教训","date":"2017-08-16T05:17:43.000Z","_content":"<img src=\"/img/2017-8-16/1.png\" align=\"center\">\n\n最近在写博客的时候突然想把自己的hexo分支完善一下，可是却不小心踩了坑。弄了好几个小时才弄好。最大的原因还是自己对分支管理掌握不够，搞的自己出现问题的时候狼狈不堪。\n<!-- more -->\n如果想要进行hexo博客分支备份，推荐[Hexo博客备份](http://www.jianshu.com/p/57b5a384f234)\n\n#### 先说一下事情起因过程\n+ 我发现当我切换到hexo分支时，本地的目录是master分支里面的东西，而我切换到master分支时，本地目录是hexo分支里面的东西（可能是我记错了，也可能是我一时疏忽大意，没管那么多，没仔细看）\n+ 一不小心把master分支里面的东西传到了hexo分支\n+ 然后把本地分支删除了\n+ 后来索性把远程分支一起删了（就是这样，本地的东西也没了，还好我把博客的md文章全部备份了，不然哭死）\n+ 发现仓库不能用了\n后来我才知道，进行单独的分支管理，最好本地是有一个单独分支文件夹（反正我是喜欢这样）\n\n#### 解决过程\n+ 再创建一个hexo分支，将hexo设为默认分支\n+ 把之前的博客文件夹弃用\n+ 将github的东西克隆下来（会有博客的基本结构）\n<img src=\"/img/2017-8-16/2.JPG\" align=\"center\">\n+ 将之前保留的_config.yml，themes/，source/，scaffolds/，package.json，.gitignore复制过来\n+ 执行```npm install```和```npm install hexo-deployer-git```（重要 在hexo分支）（一开始我没执行```hexo-deployer-git```，然后执行```hexo d``` 的时候就会有```ERROR Deployer not found: git``` 的错误）\n+ 执行```git add``` .、```git commit -m \"\" ```、```git push origin hexo```来提交hexo网站源文件\n+ 依次执行```hexo g```和```hexo d ```生成静态网页部署至Github上\n\n这样一来，你的博客仓库就有master分支和hexo分支，分别保存静态网页和源文件。\n\n#### 以后进行修改添加\n+ 执行```git add``` .、```git commit -m \"\" ```、```git push origin hexo```来提交hexo网站源文件\n+ 依次执行```hexo g```和```hexo d ```生成静态网页部署至Github上\n\n#### 结尾语\n以后尽量不手痒，到处乱改。这次过程其实还是挺艰难的，因为自己脑子太乱了，所以做的时候半天抓不到思绪。所以其实耗费了很多时间，也是对自己的一个小考验。希望这次之后，自己能更加坦然去面对bug，也让自己更加独立思考和行动。","source":"_posts/hexo博客分支教训.md","raw":"---\ntitle: hexo博客分支教训\ndate: 2017-08-16 13:17:43\ntags: hexo\ncategories: hexo\n---\n<img src=\"/img/2017-8-16/1.png\" align=\"center\">\n\n最近在写博客的时候突然想把自己的hexo分支完善一下，可是却不小心踩了坑。弄了好几个小时才弄好。最大的原因还是自己对分支管理掌握不够，搞的自己出现问题的时候狼狈不堪。\n<!-- more -->\n如果想要进行hexo博客分支备份，推荐[Hexo博客备份](http://www.jianshu.com/p/57b5a384f234)\n\n#### 先说一下事情起因过程\n+ 我发现当我切换到hexo分支时，本地的目录是master分支里面的东西，而我切换到master分支时，本地目录是hexo分支里面的东西（可能是我记错了，也可能是我一时疏忽大意，没管那么多，没仔细看）\n+ 一不小心把master分支里面的东西传到了hexo分支\n+ 然后把本地分支删除了\n+ 后来索性把远程分支一起删了（就是这样，本地的东西也没了，还好我把博客的md文章全部备份了，不然哭死）\n+ 发现仓库不能用了\n后来我才知道，进行单独的分支管理，最好本地是有一个单独分支文件夹（反正我是喜欢这样）\n\n#### 解决过程\n+ 再创建一个hexo分支，将hexo设为默认分支\n+ 把之前的博客文件夹弃用\n+ 将github的东西克隆下来（会有博客的基本结构）\n<img src=\"/img/2017-8-16/2.JPG\" align=\"center\">\n+ 将之前保留的_config.yml，themes/，source/，scaffolds/，package.json，.gitignore复制过来\n+ 执行```npm install```和```npm install hexo-deployer-git```（重要 在hexo分支）（一开始我没执行```hexo-deployer-git```，然后执行```hexo d``` 的时候就会有```ERROR Deployer not found: git``` 的错误）\n+ 执行```git add``` .、```git commit -m \"\" ```、```git push origin hexo```来提交hexo网站源文件\n+ 依次执行```hexo g```和```hexo d ```生成静态网页部署至Github上\n\n这样一来，你的博客仓库就有master分支和hexo分支，分别保存静态网页和源文件。\n\n#### 以后进行修改添加\n+ 执行```git add``` .、```git commit -m \"\" ```、```git push origin hexo```来提交hexo网站源文件\n+ 依次执行```hexo g```和```hexo d ```生成静态网页部署至Github上\n\n#### 结尾语\n以后尽量不手痒，到处乱改。这次过程其实还是挺艰难的，因为自己脑子太乱了，所以做的时候半天抓不到思绪。所以其实耗费了很多时间，也是对自己的一个小考验。希望这次之后，自己能更加坦然去面对bug，也让自己更加独立思考和行动。","slug":"hexo博客分支教训","published":1,"updated":"2017-08-16T05:57:48.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8ae0002lso0nhden9rp","content":"<p><img src=\"/img/2017-8-16/1.png\" align=\"center\"></p>\n<p>最近在写博客的时候突然想把自己的hexo分支完善一下，可是却不小心踩了坑。弄了好几个小时才弄好。最大的原因还是自己对分支管理掌握不够，搞的自己出现问题的时候狼狈不堪。<br><a id=\"more\"></a><br>如果想要进行hexo博客分支备份，推荐<a href=\"http://www.jianshu.com/p/57b5a384f234\" target=\"_blank\" rel=\"external\">Hexo博客备份</a></p>\n<h4 id=\"先说一下事情起因过程\"><a href=\"#先说一下事情起因过程\" class=\"headerlink\" title=\"先说一下事情起因过程\"></a>先说一下事情起因过程</h4><ul>\n<li>我发现当我切换到hexo分支时，本地的目录是master分支里面的东西，而我切换到master分支时，本地目录是hexo分支里面的东西（可能是我记错了，也可能是我一时疏忽大意，没管那么多，没仔细看）</li>\n<li>一不小心把master分支里面的东西传到了hexo分支</li>\n<li>然后把本地分支删除了</li>\n<li>后来索性把远程分支一起删了（就是这样，本地的东西也没了，还好我把博客的md文章全部备份了，不然哭死）</li>\n<li>发现仓库不能用了<br>后来我才知道，进行单独的分支管理，最好本地是有一个单独分支文件夹（反正我是喜欢这样）</li>\n</ul>\n<h4 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h4><ul>\n<li>再创建一个hexo分支，将hexo设为默认分支</li>\n<li>把之前的博客文件夹弃用</li>\n<li>将github的东西克隆下来（会有博客的基本结构）<br><img src=\"/img/2017-8-16/2.JPG\" align=\"center\"></li>\n<li>将之前保留的_config.yml，themes/，source/，scaffolds/，package.json，.gitignore复制过来</li>\n<li>执行<code>npm install</code>和<code>npm install hexo-deployer-git</code>（重要 在hexo分支）（一开始我没执行<code>hexo-deployer-git</code>，然后执行<code>hexo d</code> 的时候就会有<code>ERROR Deployer not found: git</code> 的错误）</li>\n<li>执行<code>git add</code> .、<code>git commit -m &quot;&quot;</code>、<code>git push origin hexo</code>来提交hexo网站源文件</li>\n<li>依次执行<code>hexo g</code>和<code>hexo d</code>生成静态网页部署至Github上</li>\n</ul>\n<p>这样一来，你的博客仓库就有master分支和hexo分支，分别保存静态网页和源文件。</p>\n<h4 id=\"以后进行修改添加\"><a href=\"#以后进行修改添加\" class=\"headerlink\" title=\"以后进行修改添加\"></a>以后进行修改添加</h4><ul>\n<li>执行<code>git add</code> .、<code>git commit -m &quot;&quot;</code>、<code>git push origin hexo</code>来提交hexo网站源文件</li>\n<li>依次执行<code>hexo g</code>和<code>hexo d</code>生成静态网页部署至Github上</li>\n</ul>\n<h4 id=\"结尾语\"><a href=\"#结尾语\" class=\"headerlink\" title=\"结尾语\"></a>结尾语</h4><p>以后尽量不手痒，到处乱改。这次过程其实还是挺艰难的，因为自己脑子太乱了，所以做的时候半天抓不到思绪。所以其实耗费了很多时间，也是对自己的一个小考验。希望这次之后，自己能更加坦然去面对bug，也让自己更加独立思考和行动。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/2017-8-16/1.png\" align=\"center\"></p>\n<p>最近在写博客的时候突然想把自己的hexo分支完善一下，可是却不小心踩了坑。弄了好几个小时才弄好。最大的原因还是自己对分支管理掌握不够，搞的自己出现问题的时候狼狈不堪。<br>","more":"<br>如果想要进行hexo博客分支备份，推荐<a href=\"http://www.jianshu.com/p/57b5a384f234\" target=\"_blank\" rel=\"external\">Hexo博客备份</a></p>\n<h4 id=\"先说一下事情起因过程\"><a href=\"#先说一下事情起因过程\" class=\"headerlink\" title=\"先说一下事情起因过程\"></a>先说一下事情起因过程</h4><ul>\n<li>我发现当我切换到hexo分支时，本地的目录是master分支里面的东西，而我切换到master分支时，本地目录是hexo分支里面的东西（可能是我记错了，也可能是我一时疏忽大意，没管那么多，没仔细看）</li>\n<li>一不小心把master分支里面的东西传到了hexo分支</li>\n<li>然后把本地分支删除了</li>\n<li>后来索性把远程分支一起删了（就是这样，本地的东西也没了，还好我把博客的md文章全部备份了，不然哭死）</li>\n<li>发现仓库不能用了<br>后来我才知道，进行单独的分支管理，最好本地是有一个单独分支文件夹（反正我是喜欢这样）</li>\n</ul>\n<h4 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h4><ul>\n<li>再创建一个hexo分支，将hexo设为默认分支</li>\n<li>把之前的博客文件夹弃用</li>\n<li>将github的东西克隆下来（会有博客的基本结构）<br><img src=\"/img/2017-8-16/2.JPG\" align=\"center\"></li>\n<li>将之前保留的_config.yml，themes/，source/，scaffolds/，package.json，.gitignore复制过来</li>\n<li>执行<code>npm install</code>和<code>npm install hexo-deployer-git</code>（重要 在hexo分支）（一开始我没执行<code>hexo-deployer-git</code>，然后执行<code>hexo d</code> 的时候就会有<code>ERROR Deployer not found: git</code> 的错误）</li>\n<li>执行<code>git add</code> .、<code>git commit -m &quot;&quot;</code>、<code>git push origin hexo</code>来提交hexo网站源文件</li>\n<li>依次执行<code>hexo g</code>和<code>hexo d</code>生成静态网页部署至Github上</li>\n</ul>\n<p>这样一来，你的博客仓库就有master分支和hexo分支，分别保存静态网页和源文件。</p>\n<h4 id=\"以后进行修改添加\"><a href=\"#以后进行修改添加\" class=\"headerlink\" title=\"以后进行修改添加\"></a>以后进行修改添加</h4><ul>\n<li>执行<code>git add</code> .、<code>git commit -m &quot;&quot;</code>、<code>git push origin hexo</code>来提交hexo网站源文件</li>\n<li>依次执行<code>hexo g</code>和<code>hexo d</code>生成静态网页部署至Github上</li>\n</ul>\n<h4 id=\"结尾语\"><a href=\"#结尾语\" class=\"headerlink\" title=\"结尾语\"></a>结尾语</h4><p>以后尽量不手痒，到处乱改。这次过程其实还是挺艰难的，因为自己脑子太乱了，所以做的时候半天抓不到思绪。所以其实耗费了很多时间，也是对自己的一个小考验。希望这次之后，自己能更加坦然去面对bug，也让自己更加独立思考和行动。</p>"},{"title":"Hello World","date":"2017-01-15T14:15:39.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-01-15 22:15:39\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-08-16T05:06:53.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8b10006lso0o0uxfoa8","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>"},{"title":"markdowm语法总结","date":"2017-01-14T06:23:59.000Z","_content":"### 对一些简单markdown的语法理解\n![markdown](/img/markdown.jpg)\n##### 这也是我第一次用markdown语法写的文章，还是有很多不足\n<!--more-->\n##### 【前提概要】\n对于一个markdown小白来总结这篇文章，我理解的最深刻的就是，HTML与markdown语法之间的联系。简而言之，HTML不能使用markdown的语法，但是markdown中支持在HTML中的语法使用。所有我一开始用的HTML语法来写的github的README.md文档达到了我想要的效果 ，比如\\< p>或者\\< img>标签，也可以用来作为markdown中的行段落和插入图片。  \n\n##### 【段落和换行】\n要写一篇文章的话，对于段落感跟换行是必须的，可以用HTML中的\\< br>标签进行换行， 但在markdown中，也可以用两个或两个以上的空格加回车键，就可以换好行了。  \n\n##### 【标题】\nMarkdown 支持两种标题的语法，类 Setext 和类 atx 形式。  \n类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）。  \n相比于类Setext形式，我更喜欢用类atx形式，相比也比较简单，直接在标题前面加上#即可，几号标题加几个#即可（1到6个）。  \n\n##### 【区块引用 Blockquotes】\n在文字开头添加“>”表示区块引用（块注释）  \n\n##### 【斜体和粗体】\n在需要斜体的文字两端用\"\\*\"或者\"\\_\"夹起来，而如要粗体，则用两个\"\\*\"或者\"\\_\"夹起来。  \n\n##### 【无序与有序列表】\n在文字开头添加(\\*, +, and -)实现无序列表。但是要注意在(\\*, +, and -)和文字之间需要添加空格。(一个文档中最好只是用一种无序列表的表示方式)，而有序列表在使用数字后面加上句号和空格即可。  \n\n##### 【链接】\n实现链接一共有两种基本方式：内联和引用方式。  \n内联：在链接的文字外加上\\[\\],而在\\[\\]外加上(里面是链接的地址)，如：这篇文章主要来自[markdown语法](http://www.appinn.com/markdown/)。  \n引用：这篇文章主要来自\\[markdown语法\\]\\[1\\]，\\[第二个\\]\\[2\\]  \n\\[1\\]: http://www.appinn.com/markdown/  \"markdown\"  \n\\[2\\]: http://www.appinn.com/markdown/  \"markdown\"  \n其中\"markdown\"表示鼠标移到链接的文字上去，会显示出来的内容，如：  \n引用：这篇文章主要来自[markdown语法][1]，[第二个][2]  \n[1]: http://www.appinn.com/markdown/  \"markdown\"  \n[2]: http://www.appinn.com/markdown/  \"markdown\"  \n\n##### 【插入图片】\n插入图片的方式跟链接的方式类似。  \n内联方式：\\!\\[alt text\\]\\(/path/to/img.jpg \"Title\"\\)\n引用方式：\n\\!\\[alt text\\]\\[id\\]  \n\\[id\\]: /path/to/img.jpg \"Title\"  \n\n##### 【代码框】\n有两种方式，第一种是在一些比较简单的代码中，可以直接使用\\` < blockquote>\\`来实现。第二种是大片文字需要实现代码框。使用Tab或四个空格。  \n\n##### 【脚注】\nhello\\[^hello\\]\n\\[^hello\\]: hi  \n效果为：  \nhello[^hello]\n[^hello]: hi  \n\n##### 【下划线】\n在空白行下方添加三条“-”横线。\n\n\n\n\n","source":"_posts/markdowm语法总结.md","raw":"---\ntitle: markdowm语法总结\ndate: 2017-01-14 14:23:59\ntags: markdown\ncategories: 前端\n---\n### 对一些简单markdown的语法理解\n![markdown](/img/markdown.jpg)\n##### 这也是我第一次用markdown语法写的文章，还是有很多不足\n<!--more-->\n##### 【前提概要】\n对于一个markdown小白来总结这篇文章，我理解的最深刻的就是，HTML与markdown语法之间的联系。简而言之，HTML不能使用markdown的语法，但是markdown中支持在HTML中的语法使用。所有我一开始用的HTML语法来写的github的README.md文档达到了我想要的效果 ，比如\\< p>或者\\< img>标签，也可以用来作为markdown中的行段落和插入图片。  \n\n##### 【段落和换行】\n要写一篇文章的话，对于段落感跟换行是必须的，可以用HTML中的\\< br>标签进行换行， 但在markdown中，也可以用两个或两个以上的空格加回车键，就可以换好行了。  \n\n##### 【标题】\nMarkdown 支持两种标题的语法，类 Setext 和类 atx 形式。  \n类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）。  \n相比于类Setext形式，我更喜欢用类atx形式，相比也比较简单，直接在标题前面加上#即可，几号标题加几个#即可（1到6个）。  \n\n##### 【区块引用 Blockquotes】\n在文字开头添加“>”表示区块引用（块注释）  \n\n##### 【斜体和粗体】\n在需要斜体的文字两端用\"\\*\"或者\"\\_\"夹起来，而如要粗体，则用两个\"\\*\"或者\"\\_\"夹起来。  \n\n##### 【无序与有序列表】\n在文字开头添加(\\*, +, and -)实现无序列表。但是要注意在(\\*, +, and -)和文字之间需要添加空格。(一个文档中最好只是用一种无序列表的表示方式)，而有序列表在使用数字后面加上句号和空格即可。  \n\n##### 【链接】\n实现链接一共有两种基本方式：内联和引用方式。  \n内联：在链接的文字外加上\\[\\],而在\\[\\]外加上(里面是链接的地址)，如：这篇文章主要来自[markdown语法](http://www.appinn.com/markdown/)。  \n引用：这篇文章主要来自\\[markdown语法\\]\\[1\\]，\\[第二个\\]\\[2\\]  \n\\[1\\]: http://www.appinn.com/markdown/  \"markdown\"  \n\\[2\\]: http://www.appinn.com/markdown/  \"markdown\"  \n其中\"markdown\"表示鼠标移到链接的文字上去，会显示出来的内容，如：  \n引用：这篇文章主要来自[markdown语法][1]，[第二个][2]  \n[1]: http://www.appinn.com/markdown/  \"markdown\"  \n[2]: http://www.appinn.com/markdown/  \"markdown\"  \n\n##### 【插入图片】\n插入图片的方式跟链接的方式类似。  \n内联方式：\\!\\[alt text\\]\\(/path/to/img.jpg \"Title\"\\)\n引用方式：\n\\!\\[alt text\\]\\[id\\]  \n\\[id\\]: /path/to/img.jpg \"Title\"  \n\n##### 【代码框】\n有两种方式，第一种是在一些比较简单的代码中，可以直接使用\\` < blockquote>\\`来实现。第二种是大片文字需要实现代码框。使用Tab或四个空格。  \n\n##### 【脚注】\nhello\\[^hello\\]\n\\[^hello\\]: hi  \n效果为：  \nhello[^hello]\n[^hello]: hi  \n\n##### 【下划线】\n在空白行下方添加三条“-”横线。\n\n\n\n\n","slug":"markdowm语法总结","published":1,"updated":"2017-08-15T12:51:49.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8bi0008lso02h8wir1u","content":"<h3 id=\"对一些简单markdown的语法理解\"><a href=\"#对一些简单markdown的语法理解\" class=\"headerlink\" title=\"对一些简单markdown的语法理解\"></a>对一些简单markdown的语法理解</h3><p><img src=\"/img/markdown.jpg\" alt=\"markdown\"></p>\n<h5 id=\"这也是我第一次用markdown语法写的文章，还是有很多不足\"><a href=\"#这也是我第一次用markdown语法写的文章，还是有很多不足\" class=\"headerlink\" title=\"这也是我第一次用markdown语法写的文章，还是有很多不足\"></a>这也是我第一次用markdown语法写的文章，还是有很多不足</h5><a id=\"more\"></a>\n<h5 id=\"【前提概要】\"><a href=\"#【前提概要】\" class=\"headerlink\" title=\"【前提概要】\"></a>【前提概要】</h5><p>对于一个markdown小白来总结这篇文章，我理解的最深刻的就是，HTML与markdown语法之间的联系。简而言之，HTML不能使用markdown的语法，但是markdown中支持在HTML中的语法使用。所有我一开始用的HTML语法来写的github的README.md文档达到了我想要的效果 ，比如\\&lt; p&gt;或者\\&lt; img&gt;标签，也可以用来作为markdown中的行段落和插入图片。  </p>\n<h5 id=\"【段落和换行】\"><a href=\"#【段落和换行】\" class=\"headerlink\" title=\"【段落和换行】\"></a>【段落和换行】</h5><p>要写一篇文章的话，对于段落感跟换行是必须的，可以用HTML中的\\&lt; br&gt;标签进行换行， 但在markdown中，也可以用两个或两个以上的空格加回车键，就可以换好行了。  </p>\n<h5 id=\"【标题】\"><a href=\"#【标题】\" class=\"headerlink\" title=\"【标题】\"></a>【标题】</h5><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。<br>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）。<br>相比于类Setext形式，我更喜欢用类atx形式，相比也比较简单，直接在标题前面加上#即可，几号标题加几个#即可（1到6个）。  </p>\n<h5 id=\"【区块引用-Blockquotes】\"><a href=\"#【区块引用-Blockquotes】\" class=\"headerlink\" title=\"【区块引用 Blockquotes】\"></a>【区块引用 Blockquotes】</h5><p>在文字开头添加“&gt;”表示区块引用（块注释）  </p>\n<h5 id=\"【斜体和粗体】\"><a href=\"#【斜体和粗体】\" class=\"headerlink\" title=\"【斜体和粗体】\"></a>【斜体和粗体】</h5><p>在需要斜体的文字两端用”*“或者”_“夹起来，而如要粗体，则用两个”*“或者”_“夹起来。  </p>\n<h5 id=\"【无序与有序列表】\"><a href=\"#【无序与有序列表】\" class=\"headerlink\" title=\"【无序与有序列表】\"></a>【无序与有序列表】</h5><p>在文字开头添加(*, +, and -)实现无序列表。但是要注意在(*, +, and -)和文字之间需要添加空格。(一个文档中最好只是用一种无序列表的表示方式)，而有序列表在使用数字后面加上句号和空格即可。  </p>\n<h5 id=\"【链接】\"><a href=\"#【链接】\" class=\"headerlink\" title=\"【链接】\"></a>【链接】</h5><p>实现链接一共有两种基本方式：内联和引用方式。<br>内联：在链接的文字外加上[],而在[]外加上(里面是链接的地址)，如：这篇文章主要来自<a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">markdown语法</a>。<br>引用：这篇文章主要来自[markdown语法][1]，[第二个][2]<br>[1]: <a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">http://www.appinn.com/markdown/</a>  “markdown”<br>[2]: <a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">http://www.appinn.com/markdown/</a>  “markdown”<br>其中”markdown”表示鼠标移到链接的文字上去，会显示出来的内容，如：<br>引用：这篇文章主要来自<a href=\"http://www.appinn.com/markdown/\" title=\"markdown\" target=\"_blank\" rel=\"external\">markdown语法</a>，<a href=\"http://www.appinn.com/markdown/\" title=\"markdown\" target=\"_blank\" rel=\"external\">第二个</a>  </p>\n<h5 id=\"【插入图片】\"><a href=\"#【插入图片】\" class=\"headerlink\" title=\"【插入图片】\"></a>【插入图片】</h5><p>插入图片的方式跟链接的方式类似。<br>内联方式：![alt text](/path/to/img.jpg “Title”)<br>引用方式：<br>![alt text][id]<br>[id]: /path/to/img.jpg “Title”  </p>\n<h5 id=\"【代码框】\"><a href=\"#【代码框】\" class=\"headerlink\" title=\"【代码框】\"></a>【代码框】</h5><p>有两种方式，第一种是在一些比较简单的代码中，可以直接使用` &lt; blockquote&gt;`来实现。第二种是大片文字需要实现代码框。使用Tab或四个空格。  </p>\n<h5 id=\"【脚注】\"><a href=\"#【脚注】\" class=\"headerlink\" title=\"【脚注】\"></a>【脚注】</h5><p>hello[^hello]<br>[^hello]: hi<br>效果为：<br>hello<a href=\"hi\">^hello</a></p>\n<h5 id=\"【下划线】\"><a href=\"#【下划线】\" class=\"headerlink\" title=\"【下划线】\"></a>【下划线】</h5><p>在空白行下方添加三条“-”横线。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"对一些简单markdown的语法理解\"><a href=\"#对一些简单markdown的语法理解\" class=\"headerlink\" title=\"对一些简单markdown的语法理解\"></a>对一些简单markdown的语法理解</h3><p><img src=\"/img/markdown.jpg\" alt=\"markdown\"></p>\n<h5 id=\"这也是我第一次用markdown语法写的文章，还是有很多不足\"><a href=\"#这也是我第一次用markdown语法写的文章，还是有很多不足\" class=\"headerlink\" title=\"这也是我第一次用markdown语法写的文章，还是有很多不足\"></a>这也是我第一次用markdown语法写的文章，还是有很多不足</h5>","more":"<h5 id=\"【前提概要】\"><a href=\"#【前提概要】\" class=\"headerlink\" title=\"【前提概要】\"></a>【前提概要】</h5><p>对于一个markdown小白来总结这篇文章，我理解的最深刻的就是，HTML与markdown语法之间的联系。简而言之，HTML不能使用markdown的语法，但是markdown中支持在HTML中的语法使用。所有我一开始用的HTML语法来写的github的README.md文档达到了我想要的效果 ，比如\\&lt; p&gt;或者\\&lt; img&gt;标签，也可以用来作为markdown中的行段落和插入图片。  </p>\n<h5 id=\"【段落和换行】\"><a href=\"#【段落和换行】\" class=\"headerlink\" title=\"【段落和换行】\"></a>【段落和换行】</h5><p>要写一篇文章的话，对于段落感跟换行是必须的，可以用HTML中的\\&lt; br&gt;标签进行换行， 但在markdown中，也可以用两个或两个以上的空格加回车键，就可以换好行了。  </p>\n<h5 id=\"【标题】\"><a href=\"#【标题】\" class=\"headerlink\" title=\"【标题】\"></a>【标题】</h5><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。<br>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）。<br>相比于类Setext形式，我更喜欢用类atx形式，相比也比较简单，直接在标题前面加上#即可，几号标题加几个#即可（1到6个）。  </p>\n<h5 id=\"【区块引用-Blockquotes】\"><a href=\"#【区块引用-Blockquotes】\" class=\"headerlink\" title=\"【区块引用 Blockquotes】\"></a>【区块引用 Blockquotes】</h5><p>在文字开头添加“&gt;”表示区块引用（块注释）  </p>\n<h5 id=\"【斜体和粗体】\"><a href=\"#【斜体和粗体】\" class=\"headerlink\" title=\"【斜体和粗体】\"></a>【斜体和粗体】</h5><p>在需要斜体的文字两端用”*“或者”_“夹起来，而如要粗体，则用两个”*“或者”_“夹起来。  </p>\n<h5 id=\"【无序与有序列表】\"><a href=\"#【无序与有序列表】\" class=\"headerlink\" title=\"【无序与有序列表】\"></a>【无序与有序列表】</h5><p>在文字开头添加(*, +, and -)实现无序列表。但是要注意在(*, +, and -)和文字之间需要添加空格。(一个文档中最好只是用一种无序列表的表示方式)，而有序列表在使用数字后面加上句号和空格即可。  </p>\n<h5 id=\"【链接】\"><a href=\"#【链接】\" class=\"headerlink\" title=\"【链接】\"></a>【链接】</h5><p>实现链接一共有两种基本方式：内联和引用方式。<br>内联：在链接的文字外加上[],而在[]外加上(里面是链接的地址)，如：这篇文章主要来自<a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">markdown语法</a>。<br>引用：这篇文章主要来自[markdown语法][1]，[第二个][2]<br>[1]: <a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">http://www.appinn.com/markdown/</a>  “markdown”<br>[2]: <a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">http://www.appinn.com/markdown/</a>  “markdown”<br>其中”markdown”表示鼠标移到链接的文字上去，会显示出来的内容，如：<br>引用：这篇文章主要来自<a href=\"http://www.appinn.com/markdown/\" title=\"markdown\" target=\"_blank\" rel=\"external\">markdown语法</a>，<a href=\"http://www.appinn.com/markdown/\" title=\"markdown\" target=\"_blank\" rel=\"external\">第二个</a>  </p>\n<h5 id=\"【插入图片】\"><a href=\"#【插入图片】\" class=\"headerlink\" title=\"【插入图片】\"></a>【插入图片】</h5><p>插入图片的方式跟链接的方式类似。<br>内联方式：![alt text](/path/to/img.jpg “Title”)<br>引用方式：<br>![alt text][id]<br>[id]: /path/to/img.jpg “Title”  </p>\n<h5 id=\"【代码框】\"><a href=\"#【代码框】\" class=\"headerlink\" title=\"【代码框】\"></a>【代码框】</h5><p>有两种方式，第一种是在一些比较简单的代码中，可以直接使用` &lt; blockquote&gt;`来实现。第二种是大片文字需要实现代码框。使用Tab或四个空格。  </p>\n<h5 id=\"【脚注】\"><a href=\"#【脚注】\" class=\"headerlink\" title=\"【脚注】\"></a>【脚注】</h5><p>hello[^hello]<br>[^hello]: hi<br>效果为：<br>hello<a href=\"hi\">^hello</a></p>\n<h5 id=\"【下划线】\"><a href=\"#【下划线】\" class=\"headerlink\" title=\"【下划线】\"></a>【下划线】</h5><p>在空白行下方添加三条“-”横线。</p>"},{"title":"redux学习笔记——简易开发步骤","date":"2017-07-10T07:18:40.000Z","_content":"这篇文章主要是写我一开始学习redux的开发的步骤，比较适合刚刚入门的小白，不知道怎么开始下手代码,本篇文章以计数器为例。本篇文章参考[Redux学习笔记：Redux简易开发步骤](http://www.cnblogs.com/yinluhui0229/p/6709782.html) \ngithub代码地址[react-redux-counter](https://github.com/wlfsmile/Redux/tree/master/counter)\n\n<!-- more -->\n\n#### 项目结构\n```\n    .\n    ├─.babelrc                            // babel的配置\n    ├─.gitignore                          // git忽略上传的文件\n    ├─package.json                        // npm命令包\n    ├─readme.md                           // 项目介绍\n    ├─node_modules\n    ├─public                              // 展示页面html入口\n    |  └index.html\n    ├─src                        \n    |      ├─components                   // react component\n    |      |    ├─Counter.js\n    |      ├─reducers\n    |      |    ├─index.js                // 操作信息并改变state\n    |      └index.js                      // 主文件js\n```\n\n#### 步骤\n1. index.js(主文件js)\n2. 定义render入口并调用Counter\n```\n    const render = () => ReactDOM.render(\n        <Counter \n        value={}\n        onIncrement={}\n        onDecrement={}\n         />,\n        document.getElementById('root')\n    )\n```\n3. 定义Counter，也就是React Component，生成DOM结构，render时触发。\n```\n    import React,{Component} from 'react';\n    import {render} from 'react-dom';\n\n    class Counter extends Component{\n\n      constructor(props) {\n        super(props);\n      }\n\n      render(){\n        const {value,onDecrement,onIncrement} = this.props;\n        return(\n          <p>\n            Clicked: {value} times\n            {' '}\n            <button onClick={onIncrement}>\n              +\n            </button>\n            {' '}\n            <button onClick={onDecrement}>\n              -\n            </button>\n          </p>\n        );\n      }\n\n    }\n\n    export default Counter;\n```\n\n4. 初始化显示，手动调用render()，第一次初始化时定义，后续不在执行\n```\n    render();\n```\n5. 创建store，并绑定reducer\n```\n    const store = createStore(reducer); // createStore的第一个参数必须是个函数，store.dispatch()时执行，该函数就叫reducer\n```\n6. 定义Action，调用store.dispatch\n```\n    const render = () => ReactDOM.render(\n        <Counter\n            value={store.getState()}\n            onIncrement={() => store.dispatch({ type: 'INCREMENT' })}\n            onDecrement={() => store.dispatch({ type: 'DECREMENT' })}\n        />,\n        rootEl\n    )\n\n    render()\n```\n7. 定义Reducer，生成新的state(reducer/index.js)\n```\n    export default (state = 0, action) => {\n      switch (action.type) {\n        case 'INCREMENT':\n          return state + 1\n        case 'DECREMENT':\n          return state - 1\n        default:\n          return state\n      }\n    }\n```\n8. 定义state变化监听(index.js主文件)\n```\n    store.subscribe(render)\n```\n","source":"_posts/redux学习笔记——简易开发步骤.md","raw":"---\ntitle: redux学习笔记——简易开发步骤\ndate: 2017-07-10 15:18:40\ntags: redux\ncategories: react\n---\n这篇文章主要是写我一开始学习redux的开发的步骤，比较适合刚刚入门的小白，不知道怎么开始下手代码,本篇文章以计数器为例。本篇文章参考[Redux学习笔记：Redux简易开发步骤](http://www.cnblogs.com/yinluhui0229/p/6709782.html) \ngithub代码地址[react-redux-counter](https://github.com/wlfsmile/Redux/tree/master/counter)\n\n<!-- more -->\n\n#### 项目结构\n```\n    .\n    ├─.babelrc                            // babel的配置\n    ├─.gitignore                          // git忽略上传的文件\n    ├─package.json                        // npm命令包\n    ├─readme.md                           // 项目介绍\n    ├─node_modules\n    ├─public                              // 展示页面html入口\n    |  └index.html\n    ├─src                        \n    |      ├─components                   // react component\n    |      |    ├─Counter.js\n    |      ├─reducers\n    |      |    ├─index.js                // 操作信息并改变state\n    |      └index.js                      // 主文件js\n```\n\n#### 步骤\n1. index.js(主文件js)\n2. 定义render入口并调用Counter\n```\n    const render = () => ReactDOM.render(\n        <Counter \n        value={}\n        onIncrement={}\n        onDecrement={}\n         />,\n        document.getElementById('root')\n    )\n```\n3. 定义Counter，也就是React Component，生成DOM结构，render时触发。\n```\n    import React,{Component} from 'react';\n    import {render} from 'react-dom';\n\n    class Counter extends Component{\n\n      constructor(props) {\n        super(props);\n      }\n\n      render(){\n        const {value,onDecrement,onIncrement} = this.props;\n        return(\n          <p>\n            Clicked: {value} times\n            {' '}\n            <button onClick={onIncrement}>\n              +\n            </button>\n            {' '}\n            <button onClick={onDecrement}>\n              -\n            </button>\n          </p>\n        );\n      }\n\n    }\n\n    export default Counter;\n```\n\n4. 初始化显示，手动调用render()，第一次初始化时定义，后续不在执行\n```\n    render();\n```\n5. 创建store，并绑定reducer\n```\n    const store = createStore(reducer); // createStore的第一个参数必须是个函数，store.dispatch()时执行，该函数就叫reducer\n```\n6. 定义Action，调用store.dispatch\n```\n    const render = () => ReactDOM.render(\n        <Counter\n            value={store.getState()}\n            onIncrement={() => store.dispatch({ type: 'INCREMENT' })}\n            onDecrement={() => store.dispatch({ type: 'DECREMENT' })}\n        />,\n        rootEl\n    )\n\n    render()\n```\n7. 定义Reducer，生成新的state(reducer/index.js)\n```\n    export default (state = 0, action) => {\n      switch (action.type) {\n        case 'INCREMENT':\n          return state + 1\n        case 'DECREMENT':\n          return state - 1\n        default:\n          return state\n      }\n    }\n```\n8. 定义state变化监听(index.js主文件)\n```\n    store.subscribe(render)\n```\n","slug":"redux学习笔记——简易开发步骤","published":1,"updated":"2017-08-16T05:19:13.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8bm0009lso03ufkxgj9","content":"<p>这篇文章主要是写我一开始学习redux的开发的步骤，比较适合刚刚入门的小白，不知道怎么开始下手代码,本篇文章以计数器为例。本篇文章参考<a href=\"http://www.cnblogs.com/yinluhui0229/p/6709782.html\" target=\"_blank\" rel=\"external\">Redux学习笔记：Redux简易开发步骤</a><br>github代码地址<a href=\"https://github.com/wlfsmile/Redux/tree/master/counter\" target=\"_blank\" rel=\"external\">react-redux-counter</a></p>\n<a id=\"more\"></a>\n<h4 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├─.babelrc                            // babel的配置</div><div class=\"line\">├─.gitignore                          // git忽略上传的文件</div><div class=\"line\">├─package.json                        // npm命令包</div><div class=\"line\">├─readme.md                           // 项目介绍</div><div class=\"line\">├─node_modules</div><div class=\"line\">├─public                              // 展示页面html入口</div><div class=\"line\">|  └index.html</div><div class=\"line\">├─src                        </div><div class=\"line\">|      ├─components                   // react component</div><div class=\"line\">|      |    ├─Counter.js</div><div class=\"line\">|      ├─reducers</div><div class=\"line\">|      |    ├─index.js                // 操作信息并改变state</div><div class=\"line\">|      └index.js                      // 主文件js</div></pre></td></tr></table></figure>\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ol>\n<li>index.js(主文件js)</li>\n<li><p>定义render入口并调用Counter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">const render = () =&gt; ReactDOM.render(</div><div class=\"line\">    &lt;Counter </div><div class=\"line\">    value=&#123;&#125;</div><div class=\"line\">    onIncrement=&#123;&#125;</div><div class=\"line\">    onDecrement=&#123;&#125;</div><div class=\"line\">     /&gt;,</div><div class=\"line\">    document.getElementById(&apos;root&apos;)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n</li>\n<li><p>定义Counter，也就是React Component，生成DOM结构，render时触发。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React,&#123;Component&#125; from &apos;react&apos;;</div><div class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</div><div class=\"line\"></div><div class=\"line\">class Counter extends Component&#123;</div><div class=\"line\"></div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render()&#123;</div><div class=\"line\">    const &#123;value,onDecrement,onIncrement&#125; = this.props;</div><div class=\"line\">    return(</div><div class=\"line\">      &lt;p&gt;</div><div class=\"line\">        Clicked: &#123;value&#125; times</div><div class=\"line\">        &#123;&apos; &apos;&#125;</div><div class=\"line\">        &lt;button onClick=&#123;onIncrement&#125;&gt;</div><div class=\"line\">          +</div><div class=\"line\">        &lt;/button&gt;</div><div class=\"line\">        &#123;&apos; &apos;&#125;</div><div class=\"line\">        &lt;button onClick=&#123;onDecrement&#125;&gt;</div><div class=\"line\">          -</div><div class=\"line\">        &lt;/button&gt;</div><div class=\"line\">      &lt;/p&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default Counter;</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化显示，手动调用render()，第一次初始化时定义，后续不在执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">render();</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建store，并绑定reducer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">const store = createStore(reducer); // createStore的第一个参数必须是个函数，store.dispatch()时执行，该函数就叫reducer</div></pre></td></tr></table></figure>\n</li>\n<li><p>定义Action，调用store.dispatch</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">const render = () =&gt; ReactDOM.render(</div><div class=\"line\">    &lt;Counter</div><div class=\"line\">        value=&#123;store.getState()&#125;</div><div class=\"line\">        onIncrement=&#123;() =&gt; store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;)&#125;</div><div class=\"line\">        onDecrement=&#123;() =&gt; store.dispatch(&#123; type: &apos;DECREMENT&apos; &#125;)&#125;</div><div class=\"line\">    /&gt;,</div><div class=\"line\">    rootEl</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">render()</div></pre></td></tr></table></figure>\n</li>\n<li><p>定义Reducer，生成新的state(reducer/index.js)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">export default (state = 0, action) =&gt; &#123;</div><div class=\"line\">  switch (action.type) &#123;</div><div class=\"line\">    case &apos;INCREMENT&apos;:</div><div class=\"line\">      return state + 1</div><div class=\"line\">    case &apos;DECREMENT&apos;:</div><div class=\"line\">      return state - 1</div><div class=\"line\">    default:</div><div class=\"line\">      return state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>定义state变化监听(index.js主文件)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">store.subscribe(render)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>这篇文章主要是写我一开始学习redux的开发的步骤，比较适合刚刚入门的小白，不知道怎么开始下手代码,本篇文章以计数器为例。本篇文章参考<a href=\"http://www.cnblogs.com/yinluhui0229/p/6709782.html\" target=\"_blank\" rel=\"external\">Redux学习笔记：Redux简易开发步骤</a><br>github代码地址<a href=\"https://github.com/wlfsmile/Redux/tree/master/counter\" target=\"_blank\" rel=\"external\">react-redux-counter</a></p>","more":"<h4 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├─.babelrc                            // babel的配置</div><div class=\"line\">├─.gitignore                          // git忽略上传的文件</div><div class=\"line\">├─package.json                        // npm命令包</div><div class=\"line\">├─readme.md                           // 项目介绍</div><div class=\"line\">├─node_modules</div><div class=\"line\">├─public                              // 展示页面html入口</div><div class=\"line\">|  └index.html</div><div class=\"line\">├─src                        </div><div class=\"line\">|      ├─components                   // react component</div><div class=\"line\">|      |    ├─Counter.js</div><div class=\"line\">|      ├─reducers</div><div class=\"line\">|      |    ├─index.js                // 操作信息并改变state</div><div class=\"line\">|      └index.js                      // 主文件js</div></pre></td></tr></table></figure>\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ol>\n<li>index.js(主文件js)</li>\n<li><p>定义render入口并调用Counter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">const render = () =&gt; ReactDOM.render(</div><div class=\"line\">    &lt;Counter </div><div class=\"line\">    value=&#123;&#125;</div><div class=\"line\">    onIncrement=&#123;&#125;</div><div class=\"line\">    onDecrement=&#123;&#125;</div><div class=\"line\">     /&gt;,</div><div class=\"line\">    document.getElementById(&apos;root&apos;)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n</li>\n<li><p>定义Counter，也就是React Component，生成DOM结构，render时触发。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React,&#123;Component&#125; from &apos;react&apos;;</div><div class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</div><div class=\"line\"></div><div class=\"line\">class Counter extends Component&#123;</div><div class=\"line\"></div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render()&#123;</div><div class=\"line\">    const &#123;value,onDecrement,onIncrement&#125; = this.props;</div><div class=\"line\">    return(</div><div class=\"line\">      &lt;p&gt;</div><div class=\"line\">        Clicked: &#123;value&#125; times</div><div class=\"line\">        &#123;&apos; &apos;&#125;</div><div class=\"line\">        &lt;button onClick=&#123;onIncrement&#125;&gt;</div><div class=\"line\">          +</div><div class=\"line\">        &lt;/button&gt;</div><div class=\"line\">        &#123;&apos; &apos;&#125;</div><div class=\"line\">        &lt;button onClick=&#123;onDecrement&#125;&gt;</div><div class=\"line\">          -</div><div class=\"line\">        &lt;/button&gt;</div><div class=\"line\">      &lt;/p&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default Counter;</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化显示，手动调用render()，第一次初始化时定义，后续不在执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">render();</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建store，并绑定reducer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">const store = createStore(reducer); // createStore的第一个参数必须是个函数，store.dispatch()时执行，该函数就叫reducer</div></pre></td></tr></table></figure>\n</li>\n<li><p>定义Action，调用store.dispatch</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">const render = () =&gt; ReactDOM.render(</div><div class=\"line\">    &lt;Counter</div><div class=\"line\">        value=&#123;store.getState()&#125;</div><div class=\"line\">        onIncrement=&#123;() =&gt; store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;)&#125;</div><div class=\"line\">        onDecrement=&#123;() =&gt; store.dispatch(&#123; type: &apos;DECREMENT&apos; &#125;)&#125;</div><div class=\"line\">    /&gt;,</div><div class=\"line\">    rootEl</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">render()</div></pre></td></tr></table></figure>\n</li>\n<li><p>定义Reducer，生成新的state(reducer/index.js)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">export default (state = 0, action) =&gt; &#123;</div><div class=\"line\">  switch (action.type) &#123;</div><div class=\"line\">    case &apos;INCREMENT&apos;:</div><div class=\"line\">      return state + 1</div><div class=\"line\">    case &apos;DECREMENT&apos;:</div><div class=\"line\">      return state - 1</div><div class=\"line\">    default:</div><div class=\"line\">      return state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>定义state变化监听(index.js主文件)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">store.subscribe(render)</div></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"使用Node.js+Express 简易开发服务端实例","date":"2017-08-14T06:48:29.000Z","_content":"> 本文主要写的是用NodeJS+Express进行的一个服务端的建议开发\n\n<img src=\"/img/2017-8-14/1.png\" alt=\"1.png\" align=\"center\" />\n<!-- more -->\n本文主要摘自[使用 NodeJS+Express 开发服务端](http://www.jianshu.com/p/db4df1938eca)\ngithub代码地址：[demo]()\n\n#### 环境配置要求\n1. 安装Node.js环境，具体方法不做细说，可参考[阮一峰的官方网站](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n2. 安装express(都为全局安装)，npm有时候太慢，可安装淘宝镜像[cnpm](https://npm.taobao.org/)\n\n```\n    npm install express -g\n    npm install express-generator -g\n```\n\n3. 初始化项目\n\n```\n    cd 你的文件目录\n    express 项目名称（我设为APIServer）\n```\n<img src=\"/img/2017-8-14/2.JPG\" alt=\"express\" align=\"center\" />\n得到的目录结构如下\n\n<img src=\"/img/2017-8-14/3.JPG\" alt=\"express\" align=\"center\" /> + /bin:用来启动应用（服务器）\n+ /public: 存放静态资源目录\n+ /routes：路由用于确定应用程序如何响应对特定端点的客户机请求，包含一个URI（或路径）和一个特定的 HTTP 请求方法（GET、POST等）。每个路由可以具有一个或多个处理程序函数，这些函数在路由匹配时执行\n+ /views: 模板文件所在目录 文件格式为.jade\n+ 目录app.js程序main文件 这个是服务器启动的入口\n\n#### 启动服务器\n在终端最后的位置输出了如下两个命令\n```\n    install dependencies:\n     $ cd APIServer && npm install  //进入项目并安装环境\n\n    run the app:\n     $ DEBUG=apiserver:* npm start //启动服务器\n\n```\n+ 启动服务器\n\n```\n    npm start\n```\n\n<img src=\"/img/2017-8-14/4.JPG\" alt=\"express\" align=\"center\" /> \n+在浏览器中访问[http://localhost:3000/](http://localhost:3000/)\n\n<img src=\"/img/2017-8-14/1.png\" align=\"center\" />\n\n#### 基本使用\n+ app.js\n\n```\n    var express = require('express');\n    var path = require('path');\n    var favicon = require('serve-favicon');\n    var logger = require('morgan');\n    var cookieParser = require('cookie-parser');\n    var bodyParser = require('body-parser');\n    var app = express();\n    ///=======路由信息 （接口地址）开始 存放在./routes目录下===========//\n\n    var routes = require('./routes/index');//home page接口\n    var users = require('./routes/users'); //用户接口\n\n    app.use('/', routes); //在app中注册routes该接口 \n    app.use('/users', users);//在app中注册users接口\n    ///=======路由信息 （接口地址 介绍===========//\n\n    ///=======模板 开始===========//\n    // view engine setup\n    app.set('views', path.join(__dirname, 'views'));\n    app.set('view engine', 'jade');\n    ///=======模板 结束===========//\n\n```\n\n+ index.js\n\n```\n    var express = require('express');\n    var router = express.Router();\n\n\n    //定义一个get请求 path为根目录\n    /* GET home page. */\n    router.get('/', function(req, res, next) {\n        res.render('index', { title: 'Express' });\n    });\n\n    module.exports = router;\n\n```\n\n定义一个路由的基本格式为\n```\n    app.METHOD(PATH, HANDLER)\n```\n\n其中\n+ app: express的实例\n+ METHOD: HTTP 请求方法(get/post之类)。\n+ PATH: 服务器上的路径。\n+ HANDLER: 在路由匹配时执行的函数。\n\n#### 简单实现一个获取用户信息接口\n+ 创建一个user.js文件,/routes/user.js\n+ 定义一个User模型\n\n```\nfunction User(){\n    this.name;\n    this.city;\n    this.age;\n}\nmodule.exports = User;\n\n```\n\n+ 切换到users.js\n头部添加\n\n```\nvar URL = require('url'); //请求url模块\nvar User = require('./user'); //引入user.js\n```\n并继续添加\n```\nrouter.get('/getUserInfo',function(req,res,next){\n    var user = new User();\n    var params = URL.parse(req.url,true).query;\n\n    if(params.id == '1'){\n        user.name = \"ligh\";\n        user.age = \"1\";\n        user.city = \"北京市\";\n    }else{\n        user.name = \"SPTING\";\n        user.age = \"1\";\n       user.city = \"杭州市\";\n    }\n\n    var response = {status:1,data:user};\n    res.send(JSON.stringify(response));\n})\n```\n其中\n```\n获取url参数 依赖于url模块 使用前需要使用  require('url')\nvar params = URL.parse(req.url, true).query;\n```\n<img src=\"/img/2017-8-14/5.JPG\" alt=\"express\" align=\"center\" />\n由于users.js路由信息已经在app.js注册\n停止服务器 重新start服务器即可直接访问\n\n+ 调用方式\n[http://localhost:3000/users/getUserInfo?id=1](http://localhost:3000/users/getUserInfo?id=1)\n或者\n[http://localhost:3000/users/getUserInfo?id=2](http://localhost:3000/users/getUserInfo?id=2)\n\n<img src=\"/img/2017-8-14/6.JPG\" alt=\"express\" align=\"center\" /> <img src=\"/img/2017-8-14/7.JPG\" alt=\"express\" align=\"center\" />\n注意我们访问的方式为users/getUserInfo?id=1 而不是基于根\n原因是我们在app.js注册方式为app.use('/users', users);\n我们可以利用这种方式 开发模块功能 比如 你有另外一个模块为msg\n我们注册为：app.use('/msgs', msgs);\n调用方式为\nhttp://localhost:3000/msgs/getUserMsgs?id=1\n","source":"_posts/使用Node.js-Express-简易来发服务端实例.md","raw":"---\ntitle: 使用Node.js+Express 简易开发服务端实例\ndate: 2017-08-14 14:48:29\ntags: [node.js,express]\ncategories: Node\n---\n> 本文主要写的是用NodeJS+Express进行的一个服务端的建议开发\n\n<img src=\"/img/2017-8-14/1.png\" alt=\"1.png\" align=\"center\" />\n<!-- more -->\n本文主要摘自[使用 NodeJS+Express 开发服务端](http://www.jianshu.com/p/db4df1938eca)\ngithub代码地址：[demo]()\n\n#### 环境配置要求\n1. 安装Node.js环境，具体方法不做细说，可参考[阮一峰的官方网站](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n2. 安装express(都为全局安装)，npm有时候太慢，可安装淘宝镜像[cnpm](https://npm.taobao.org/)\n\n```\n    npm install express -g\n    npm install express-generator -g\n```\n\n3. 初始化项目\n\n```\n    cd 你的文件目录\n    express 项目名称（我设为APIServer）\n```\n<img src=\"/img/2017-8-14/2.JPG\" alt=\"express\" align=\"center\" />\n得到的目录结构如下\n\n<img src=\"/img/2017-8-14/3.JPG\" alt=\"express\" align=\"center\" /> + /bin:用来启动应用（服务器）\n+ /public: 存放静态资源目录\n+ /routes：路由用于确定应用程序如何响应对特定端点的客户机请求，包含一个URI（或路径）和一个特定的 HTTP 请求方法（GET、POST等）。每个路由可以具有一个或多个处理程序函数，这些函数在路由匹配时执行\n+ /views: 模板文件所在目录 文件格式为.jade\n+ 目录app.js程序main文件 这个是服务器启动的入口\n\n#### 启动服务器\n在终端最后的位置输出了如下两个命令\n```\n    install dependencies:\n     $ cd APIServer && npm install  //进入项目并安装环境\n\n    run the app:\n     $ DEBUG=apiserver:* npm start //启动服务器\n\n```\n+ 启动服务器\n\n```\n    npm start\n```\n\n<img src=\"/img/2017-8-14/4.JPG\" alt=\"express\" align=\"center\" /> \n+在浏览器中访问[http://localhost:3000/](http://localhost:3000/)\n\n<img src=\"/img/2017-8-14/1.png\" align=\"center\" />\n\n#### 基本使用\n+ app.js\n\n```\n    var express = require('express');\n    var path = require('path');\n    var favicon = require('serve-favicon');\n    var logger = require('morgan');\n    var cookieParser = require('cookie-parser');\n    var bodyParser = require('body-parser');\n    var app = express();\n    ///=======路由信息 （接口地址）开始 存放在./routes目录下===========//\n\n    var routes = require('./routes/index');//home page接口\n    var users = require('./routes/users'); //用户接口\n\n    app.use('/', routes); //在app中注册routes该接口 \n    app.use('/users', users);//在app中注册users接口\n    ///=======路由信息 （接口地址 介绍===========//\n\n    ///=======模板 开始===========//\n    // view engine setup\n    app.set('views', path.join(__dirname, 'views'));\n    app.set('view engine', 'jade');\n    ///=======模板 结束===========//\n\n```\n\n+ index.js\n\n```\n    var express = require('express');\n    var router = express.Router();\n\n\n    //定义一个get请求 path为根目录\n    /* GET home page. */\n    router.get('/', function(req, res, next) {\n        res.render('index', { title: 'Express' });\n    });\n\n    module.exports = router;\n\n```\n\n定义一个路由的基本格式为\n```\n    app.METHOD(PATH, HANDLER)\n```\n\n其中\n+ app: express的实例\n+ METHOD: HTTP 请求方法(get/post之类)。\n+ PATH: 服务器上的路径。\n+ HANDLER: 在路由匹配时执行的函数。\n\n#### 简单实现一个获取用户信息接口\n+ 创建一个user.js文件,/routes/user.js\n+ 定义一个User模型\n\n```\nfunction User(){\n    this.name;\n    this.city;\n    this.age;\n}\nmodule.exports = User;\n\n```\n\n+ 切换到users.js\n头部添加\n\n```\nvar URL = require('url'); //请求url模块\nvar User = require('./user'); //引入user.js\n```\n并继续添加\n```\nrouter.get('/getUserInfo',function(req,res,next){\n    var user = new User();\n    var params = URL.parse(req.url,true).query;\n\n    if(params.id == '1'){\n        user.name = \"ligh\";\n        user.age = \"1\";\n        user.city = \"北京市\";\n    }else{\n        user.name = \"SPTING\";\n        user.age = \"1\";\n       user.city = \"杭州市\";\n    }\n\n    var response = {status:1,data:user};\n    res.send(JSON.stringify(response));\n})\n```\n其中\n```\n获取url参数 依赖于url模块 使用前需要使用  require('url')\nvar params = URL.parse(req.url, true).query;\n```\n<img src=\"/img/2017-8-14/5.JPG\" alt=\"express\" align=\"center\" />\n由于users.js路由信息已经在app.js注册\n停止服务器 重新start服务器即可直接访问\n\n+ 调用方式\n[http://localhost:3000/users/getUserInfo?id=1](http://localhost:3000/users/getUserInfo?id=1)\n或者\n[http://localhost:3000/users/getUserInfo?id=2](http://localhost:3000/users/getUserInfo?id=2)\n\n<img src=\"/img/2017-8-14/6.JPG\" alt=\"express\" align=\"center\" /> <img src=\"/img/2017-8-14/7.JPG\" alt=\"express\" align=\"center\" />\n注意我们访问的方式为users/getUserInfo?id=1 而不是基于根\n原因是我们在app.js注册方式为app.use('/users', users);\n我们可以利用这种方式 开发模块功能 比如 你有另外一个模块为msg\n我们注册为：app.use('/msgs', msgs);\n调用方式为\nhttp://localhost:3000/msgs/getUserMsgs?id=1\n","slug":"使用Node.js-Express-简易来发服务端实例","published":1,"updated":"2017-08-15T12:51:49.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8bq000clso0tlr1uhj1","content":"<blockquote>\n<p>本文主要写的是用NodeJS+Express进行的一个服务端的建议开发</p>\n</blockquote>\n<p><img src=\"/img/2017-8-14/1.png\" alt=\"1.png\" align=\"center\"><br><a id=\"more\"></a><br>本文主要摘自<a href=\"http://www.jianshu.com/p/db4df1938eca\" target=\"_blank\" rel=\"external\">使用 NodeJS+Express 开发服务端</a><br>github代码地址：<a href=\"\">demo</a></p>\n<h4 id=\"环境配置要求\"><a href=\"#环境配置要求\" class=\"headerlink\" title=\"环境配置要求\"></a>环境配置要求</h4><ol>\n<li><p>安装Node.js环境，具体方法不做细说，可参考<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"external\">阮一峰的官方网站</a></p>\n</li>\n<li><p>安装express(都为全局安装)，npm有时候太慢，可安装淘宝镜像<a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"external\">cnpm</a></p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express -g</div><div class=\"line\">npm install express-generator -g</div></pre></td></tr></table></figure>\n<ol>\n<li>初始化项目</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd 你的文件目录</div><div class=\"line\">express 项目名称（我设为APIServer）</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2017-8-14/2.JPG\" alt=\"express\" align=\"center\"><br>得到的目录结构如下</p>\n<p><img src=\"/img/2017-8-14/3.JPG\" alt=\"express\" align=\"center\"> + /bin:用来启动应用（服务器）</p>\n<ul>\n<li>/public: 存放静态资源目录</li>\n<li>/routes：路由用于确定应用程序如何响应对特定端点的客户机请求，包含一个URI（或路径）和一个特定的 HTTP 请求方法（GET、POST等）。每个路由可以具有一个或多个处理程序函数，这些函数在路由匹配时执行</li>\n<li>/views: 模板文件所在目录 文件格式为.jade</li>\n<li>目录app.js程序main文件 这个是服务器启动的入口</li>\n</ul>\n<h4 id=\"启动服务器\"><a href=\"#启动服务器\" class=\"headerlink\" title=\"启动服务器\"></a>启动服务器</h4><p>在终端最后的位置输出了如下两个命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">install dependencies:</div><div class=\"line\"> $ cd APIServer &amp;&amp; npm install  //进入项目并安装环境</div><div class=\"line\"></div><div class=\"line\">run the app:</div><div class=\"line\"> $ DEBUG=apiserver:* npm start //启动服务器</div></pre></td></tr></table></figure></p>\n<ul>\n<li>启动服务器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm start</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2017-8-14/4.JPG\" alt=\"express\" align=\"center\"><br>+在浏览器中访问<a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"external\">http://localhost:3000/</a></p>\n<p><img src=\"/img/2017-8-14/1.png\" align=\"center\"></p>\n<h4 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h4><ul>\n<li>app.js</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var express = require(&apos;express&apos;);</div><div class=\"line\">var path = require(&apos;path&apos;);</div><div class=\"line\">var favicon = require(&apos;serve-favicon&apos;);</div><div class=\"line\">var logger = require(&apos;morgan&apos;);</div><div class=\"line\">var cookieParser = require(&apos;cookie-parser&apos;);</div><div class=\"line\">var bodyParser = require(&apos;body-parser&apos;);</div><div class=\"line\">var app = express();</div><div class=\"line\">///=======路由信息 （接口地址）开始 存放在./routes目录下===========//</div><div class=\"line\"></div><div class=\"line\">var routes = require(&apos;./routes/index&apos;);//home page接口</div><div class=\"line\">var users = require(&apos;./routes/users&apos;); //用户接口</div><div class=\"line\"></div><div class=\"line\">app.use(&apos;/&apos;, routes); //在app中注册routes该接口 </div><div class=\"line\">app.use(&apos;/users&apos;, users);//在app中注册users接口</div><div class=\"line\">///=======路由信息 （接口地址 介绍===========//</div><div class=\"line\"></div><div class=\"line\">///=======模板 开始===========//</div><div class=\"line\">// view engine setup</div><div class=\"line\">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</div><div class=\"line\">app.set(&apos;view engine&apos;, &apos;jade&apos;);</div><div class=\"line\">///=======模板 结束===========//</div></pre></td></tr></table></figure>\n<ul>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var express = require(&apos;express&apos;);</div><div class=\"line\">var router = express.Router();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//定义一个get请求 path为根目录</div><div class=\"line\">/* GET home page. */</div><div class=\"line\">router.get(&apos;/&apos;, function(req, res, next) &#123;</div><div class=\"line\">    res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = router;</div></pre></td></tr></table></figure>\n<p>定义一个路由的基本格式为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.METHOD(PATH, HANDLER)</div></pre></td></tr></table></figure></p>\n<p>其中</p>\n<ul>\n<li>app: express的实例</li>\n<li>METHOD: HTTP 请求方法(get/post之类)。</li>\n<li>PATH: 服务器上的路径。</li>\n<li>HANDLER: 在路由匹配时执行的函数。</li>\n</ul>\n<h4 id=\"简单实现一个获取用户信息接口\"><a href=\"#简单实现一个获取用户信息接口\" class=\"headerlink\" title=\"简单实现一个获取用户信息接口\"></a>简单实现一个获取用户信息接口</h4><ul>\n<li>创建一个user.js文件,/routes/user.js</li>\n<li>定义一个User模型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function User()&#123;</div><div class=\"line\">    this.name;</div><div class=\"line\">    this.city;</div><div class=\"line\">    this.age;</div><div class=\"line\">&#125;</div><div class=\"line\">module.exports = User;</div></pre></td></tr></table></figure>\n<ul>\n<li>切换到users.js<br>头部添加</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var URL = require(&apos;url&apos;); //请求url模块</div><div class=\"line\">var User = require(&apos;./user&apos;); //引入user.js</div></pre></td></tr></table></figure>\n<p>并继续添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.get(&apos;/getUserInfo&apos;,function(req,res,next)&#123;</div><div class=\"line\">    var user = new User();</div><div class=\"line\">    var params = URL.parse(req.url,true).query;</div><div class=\"line\"></div><div class=\"line\">    if(params.id == &apos;1&apos;)&#123;</div><div class=\"line\">        user.name = &quot;ligh&quot;;</div><div class=\"line\">        user.age = &quot;1&quot;;</div><div class=\"line\">        user.city = &quot;北京市&quot;;</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        user.name = &quot;SPTING&quot;;</div><div class=\"line\">        user.age = &quot;1&quot;;</div><div class=\"line\">       user.city = &quot;杭州市&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var response = &#123;status:1,data:user&#125;;</div><div class=\"line\">    res.send(JSON.stringify(response));</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>其中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">获取url参数 依赖于url模块 使用前需要使用  require(&apos;url&apos;)</div><div class=\"line\">var params = URL.parse(req.url, true).query;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/2017-8-14/5.JPG\" alt=\"express\" align=\"center\"><br>由于users.js路由信息已经在app.js注册<br>停止服务器 重新start服务器即可直接访问</p>\n<ul>\n<li>调用方式<br><a href=\"http://localhost:3000/users/getUserInfo?id=1\" target=\"_blank\" rel=\"external\">http://localhost:3000/users/getUserInfo?id=1</a><br>或者<br><a href=\"http://localhost:3000/users/getUserInfo?id=2\" target=\"_blank\" rel=\"external\">http://localhost:3000/users/getUserInfo?id=2</a></li>\n</ul>\n<p><img src=\"/img/2017-8-14/6.JPG\" alt=\"express\" align=\"center\"> <img src=\"/img/2017-8-14/7.JPG\" alt=\"express\" align=\"center\"><br>注意我们访问的方式为users/getUserInfo?id=1 而不是基于根<br>原因是我们在app.js注册方式为app.use(‘/users’, users);<br>我们可以利用这种方式 开发模块功能 比如 你有另外一个模块为msg<br>我们注册为：app.use(‘/msgs’, msgs);<br>调用方式为<br><a href=\"http://localhost:3000/msgs/getUserMsgs?id=1\" target=\"_blank\" rel=\"external\">http://localhost:3000/msgs/getUserMsgs?id=1</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文主要写的是用NodeJS+Express进行的一个服务端的建议开发</p>\n</blockquote>\n<p><img src=\"/img/2017-8-14/1.png\" alt=\"1.png\" align=\"center\"><br>","more":"<br>本文主要摘自<a href=\"http://www.jianshu.com/p/db4df1938eca\" target=\"_blank\" rel=\"external\">使用 NodeJS+Express 开发服务端</a><br>github代码地址：<a href=\"\">demo</a></p>\n<h4 id=\"环境配置要求\"><a href=\"#环境配置要求\" class=\"headerlink\" title=\"环境配置要求\"></a>环境配置要求</h4><ol>\n<li><p>安装Node.js环境，具体方法不做细说，可参考<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"external\">阮一峰的官方网站</a></p>\n</li>\n<li><p>安装express(都为全局安装)，npm有时候太慢，可安装淘宝镜像<a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"external\">cnpm</a></p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express -g</div><div class=\"line\">npm install express-generator -g</div></pre></td></tr></table></figure>\n<ol>\n<li>初始化项目</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd 你的文件目录</div><div class=\"line\">express 项目名称（我设为APIServer）</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2017-8-14/2.JPG\" alt=\"express\" align=\"center\"><br>得到的目录结构如下</p>\n<p><img src=\"/img/2017-8-14/3.JPG\" alt=\"express\" align=\"center\"> + /bin:用来启动应用（服务器）</p>\n<ul>\n<li>/public: 存放静态资源目录</li>\n<li>/routes：路由用于确定应用程序如何响应对特定端点的客户机请求，包含一个URI（或路径）和一个特定的 HTTP 请求方法（GET、POST等）。每个路由可以具有一个或多个处理程序函数，这些函数在路由匹配时执行</li>\n<li>/views: 模板文件所在目录 文件格式为.jade</li>\n<li>目录app.js程序main文件 这个是服务器启动的入口</li>\n</ul>\n<h4 id=\"启动服务器\"><a href=\"#启动服务器\" class=\"headerlink\" title=\"启动服务器\"></a>启动服务器</h4><p>在终端最后的位置输出了如下两个命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">install dependencies:</div><div class=\"line\"> $ cd APIServer &amp;&amp; npm install  //进入项目并安装环境</div><div class=\"line\"></div><div class=\"line\">run the app:</div><div class=\"line\"> $ DEBUG=apiserver:* npm start //启动服务器</div></pre></td></tr></table></figure></p>\n<ul>\n<li>启动服务器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm start</div></pre></td></tr></table></figure>\n<p><img src=\"/img/2017-8-14/4.JPG\" alt=\"express\" align=\"center\"><br>+在浏览器中访问<a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"external\">http://localhost:3000/</a></p>\n<p><img src=\"/img/2017-8-14/1.png\" align=\"center\"></p>\n<h4 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h4><ul>\n<li>app.js</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var express = require(&apos;express&apos;);</div><div class=\"line\">var path = require(&apos;path&apos;);</div><div class=\"line\">var favicon = require(&apos;serve-favicon&apos;);</div><div class=\"line\">var logger = require(&apos;morgan&apos;);</div><div class=\"line\">var cookieParser = require(&apos;cookie-parser&apos;);</div><div class=\"line\">var bodyParser = require(&apos;body-parser&apos;);</div><div class=\"line\">var app = express();</div><div class=\"line\">///=======路由信息 （接口地址）开始 存放在./routes目录下===========//</div><div class=\"line\"></div><div class=\"line\">var routes = require(&apos;./routes/index&apos;);//home page接口</div><div class=\"line\">var users = require(&apos;./routes/users&apos;); //用户接口</div><div class=\"line\"></div><div class=\"line\">app.use(&apos;/&apos;, routes); //在app中注册routes该接口 </div><div class=\"line\">app.use(&apos;/users&apos;, users);//在app中注册users接口</div><div class=\"line\">///=======路由信息 （接口地址 介绍===========//</div><div class=\"line\"></div><div class=\"line\">///=======模板 开始===========//</div><div class=\"line\">// view engine setup</div><div class=\"line\">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</div><div class=\"line\">app.set(&apos;view engine&apos;, &apos;jade&apos;);</div><div class=\"line\">///=======模板 结束===========//</div></pre></td></tr></table></figure>\n<ul>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var express = require(&apos;express&apos;);</div><div class=\"line\">var router = express.Router();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//定义一个get请求 path为根目录</div><div class=\"line\">/* GET home page. */</div><div class=\"line\">router.get(&apos;/&apos;, function(req, res, next) &#123;</div><div class=\"line\">    res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = router;</div></pre></td></tr></table></figure>\n<p>定义一个路由的基本格式为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.METHOD(PATH, HANDLER)</div></pre></td></tr></table></figure></p>\n<p>其中</p>\n<ul>\n<li>app: express的实例</li>\n<li>METHOD: HTTP 请求方法(get/post之类)。</li>\n<li>PATH: 服务器上的路径。</li>\n<li>HANDLER: 在路由匹配时执行的函数。</li>\n</ul>\n<h4 id=\"简单实现一个获取用户信息接口\"><a href=\"#简单实现一个获取用户信息接口\" class=\"headerlink\" title=\"简单实现一个获取用户信息接口\"></a>简单实现一个获取用户信息接口</h4><ul>\n<li>创建一个user.js文件,/routes/user.js</li>\n<li>定义一个User模型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function User()&#123;</div><div class=\"line\">    this.name;</div><div class=\"line\">    this.city;</div><div class=\"line\">    this.age;</div><div class=\"line\">&#125;</div><div class=\"line\">module.exports = User;</div></pre></td></tr></table></figure>\n<ul>\n<li>切换到users.js<br>头部添加</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var URL = require(&apos;url&apos;); //请求url模块</div><div class=\"line\">var User = require(&apos;./user&apos;); //引入user.js</div></pre></td></tr></table></figure>\n<p>并继续添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.get(&apos;/getUserInfo&apos;,function(req,res,next)&#123;</div><div class=\"line\">    var user = new User();</div><div class=\"line\">    var params = URL.parse(req.url,true).query;</div><div class=\"line\"></div><div class=\"line\">    if(params.id == &apos;1&apos;)&#123;</div><div class=\"line\">        user.name = &quot;ligh&quot;;</div><div class=\"line\">        user.age = &quot;1&quot;;</div><div class=\"line\">        user.city = &quot;北京市&quot;;</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        user.name = &quot;SPTING&quot;;</div><div class=\"line\">        user.age = &quot;1&quot;;</div><div class=\"line\">       user.city = &quot;杭州市&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var response = &#123;status:1,data:user&#125;;</div><div class=\"line\">    res.send(JSON.stringify(response));</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>其中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">获取url参数 依赖于url模块 使用前需要使用  require(&apos;url&apos;)</div><div class=\"line\">var params = URL.parse(req.url, true).query;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/2017-8-14/5.JPG\" alt=\"express\" align=\"center\"><br>由于users.js路由信息已经在app.js注册<br>停止服务器 重新start服务器即可直接访问</p>\n<ul>\n<li>调用方式<br><a href=\"http://localhost:3000/users/getUserInfo?id=1\" target=\"_blank\" rel=\"external\">http://localhost:3000/users/getUserInfo?id=1</a><br>或者<br><a href=\"http://localhost:3000/users/getUserInfo?id=2\" target=\"_blank\" rel=\"external\">http://localhost:3000/users/getUserInfo?id=2</a></li>\n</ul>\n<p><img src=\"/img/2017-8-14/6.JPG\" alt=\"express\" align=\"center\"> <img src=\"/img/2017-8-14/7.JPG\" alt=\"express\" align=\"center\"><br>注意我们访问的方式为users/getUserInfo?id=1 而不是基于根<br>原因是我们在app.js注册方式为app.use(‘/users’, users);<br>我们可以利用这种方式 开发模块功能 比如 你有另外一个模块为msg<br>我们注册为：app.use(‘/msgs’, msgs);<br>调用方式为<br><a href=\"http://localhost:3000/msgs/getUserMsgs?id=1\" target=\"_blank\" rel=\"external\">http://localhost:3000/msgs/getUserMsgs?id=1</a></p>"},{"title":"《你不知道的JavaScript》——作用域1.0","date":"2017-04-25T11:14:26.000Z","_content":"##### 作用域理解\n##### 参与者\n+ 引擎：负责整个JavaScript程序的编译和执行过程\n+ 编译器：负责语法分析以及代码生成\n+ 作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。\n\n<!-- more -->\n\n##### 对于 var a = 2;\n+ 会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明），然后再运行时引擎会在作用域中查找该变量，如果能找到就对其赋值。\n##### RHS和LHS\n+ RHS查询：与简单的查询某个变量的值差不多。\n+ LHS查询：会试图找到变量容器的本身。\n```\n    function foo(a){\n        console.log(a); //2\n    }\n    foo(2);\n```\n+ 对于最后一行的foo(...)函数的调用是对foo进行RHS引用，意味着“去找到foo的值，并把它给我”\n+ 代码中隐式的a=2操作， 这个操作发生在2被当做参数传递给foo(...)函数时，2会被分配给a。进行了一次LHS查询。\n\n##### 异常\n```\n    function foo(a){\n         console.log(a+b);\n         b=a;\n    }\n    foo(2);\n```\n+ 第一次对b进行RHS查询是无法找到该变量的。如果RHS查询在所有嵌套作用域中都找不到所需的变量，引擎会抛出ReferenceError异常\n+ 当引擎进行LHS查询时，如果在全局作用域中也无法找到目标变量，全局作用域中会创建一个具有该名称的变量（非严格模式下）。严格模式下，LHS查询失败时，引擎会抛出与RHS查询失败时类似的ReferenceError异常。\n+ 如果RHS查询找到了一个变量，但如果对其的值进行不合理操作，引擎会抛出TypeError异常。\n\n#### 词法作用域\n词法作用域是由你在写代码时将变量和块作用域写在哪决定的。\n##### 查找\n+ 作用域查找会在找到第一个匹配的标识符时停止。作用域查找始终从运行时所处的最内部作用域开始，逐级往上进行，直到遇到第一个匹配的标识符。\n+ 词法作用域只会查找一级标识符，比如a、b和c。如果代码中引用了foo.bar.baz，词法作用域查找只会试图查找foo标识符，找到变量后，对象属性访问规则会分别接管对bar和baz属性的访问。\n\n##### 欺骗词法\n+ 词法作用域完全由写代码期间函数所声明的位置来定义，JavaScript可以有两种机制在运行时来欺骗词法作用域。\n+ 欺骗词法作用域会导致性能下降\n\n###### eval\n```\n    function foo(str,a){\n        eval(str); //欺骗\n        console.log(a,b);\n    }\n    var b = 2;\n    foo(\"var b = 3\",1); //1,3\n\n```\n+ eval(...)调用中的“var b=3”会被当做本来就在那里一样处理。由于里面声明了一个新的变量b，因此它对已经存在的foo(...)的词法作用域进行修改。这段代码在foo()的内部创建了一个变量b，并遮蔽了外部作用域中的同名变量。\n+ 无论任何情况，eval()都可以在运行期修改书写期的词法作用域。\n+ 但在严格模式下，eval在运行时有其自己的词法作用域，意味着其中的声明无法修改所在作用域，在上面的代码上来看，会进行报错。\n\n###### with\nwith可以不需要重复引用对象本身\n```\n    var obj={\n        a:1,\n        b:2,\n        c:3\n    };\n    obj.a=2;\n    obj.b=3;\n    obj.c=4;\n    //with\n    with(obj){\n        a=3;\n        b=4;\n        c=5;\n    }\n```\n对于以下代码\n```\n    function foo(obj){\n        with(obj){\n            a=2;\n        }\n    }\n    var o1 = {\n        a:3\n    };\n    var o2 = {\n        b:3\n    };\n    \n    foo(o1);\n    console.log(o1.a); //2\n    \n    foo(o2);\n    console.log(o2.a); //undefined\n    console.log(a); //2  a被泄露到全局作用域上了\n```\n+ with可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。\n+ 尽管with块可以将一个对象处理为词法作用域，但是这个块内部正常的var声明并不会被限制在这个块的作用域中，而是被添加到with所处的函数作用域中。\n+ o2的作用域，foo()的作用域和全局作用域中都没有找到标识符a,因此当a=2执行时，会自动创建一个全局变量（非严格）\n\n###### eval和with\n+ eval函数如果接受了含有一个或多个声明的代码，就会修改其所处的词法作用域，而with声明实际上是根据你传递给他的对象凭空创建一个全新的词法作用域。\n+ eval和with都会被严格模式所影响\n+ 当引擎在代码中发现eval或with，它只能简单的假设关于标识符位置的判断都是无效的，无法在词法分析阶段明确知道eval会接收什么代码，也不知道传递给with的到底是什么。\n+ 如果代码中大量使用eval或with，运行会很慢。 \n+ 不使用这两个机制","source":"_posts/《你不知道的JavaScript》——作用域1-0.md","raw":"---\ntitle: 《你不知道的JavaScript》——作用域1.0\ndate: 2017-04-25 19:14:26\ntags: JavaScript\ncategories: 前端\n---\n##### 作用域理解\n##### 参与者\n+ 引擎：负责整个JavaScript程序的编译和执行过程\n+ 编译器：负责语法分析以及代码生成\n+ 作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。\n\n<!-- more -->\n\n##### 对于 var a = 2;\n+ 会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明），然后再运行时引擎会在作用域中查找该变量，如果能找到就对其赋值。\n##### RHS和LHS\n+ RHS查询：与简单的查询某个变量的值差不多。\n+ LHS查询：会试图找到变量容器的本身。\n```\n    function foo(a){\n        console.log(a); //2\n    }\n    foo(2);\n```\n+ 对于最后一行的foo(...)函数的调用是对foo进行RHS引用，意味着“去找到foo的值，并把它给我”\n+ 代码中隐式的a=2操作， 这个操作发生在2被当做参数传递给foo(...)函数时，2会被分配给a。进行了一次LHS查询。\n\n##### 异常\n```\n    function foo(a){\n         console.log(a+b);\n         b=a;\n    }\n    foo(2);\n```\n+ 第一次对b进行RHS查询是无法找到该变量的。如果RHS查询在所有嵌套作用域中都找不到所需的变量，引擎会抛出ReferenceError异常\n+ 当引擎进行LHS查询时，如果在全局作用域中也无法找到目标变量，全局作用域中会创建一个具有该名称的变量（非严格模式下）。严格模式下，LHS查询失败时，引擎会抛出与RHS查询失败时类似的ReferenceError异常。\n+ 如果RHS查询找到了一个变量，但如果对其的值进行不合理操作，引擎会抛出TypeError异常。\n\n#### 词法作用域\n词法作用域是由你在写代码时将变量和块作用域写在哪决定的。\n##### 查找\n+ 作用域查找会在找到第一个匹配的标识符时停止。作用域查找始终从运行时所处的最内部作用域开始，逐级往上进行，直到遇到第一个匹配的标识符。\n+ 词法作用域只会查找一级标识符，比如a、b和c。如果代码中引用了foo.bar.baz，词法作用域查找只会试图查找foo标识符，找到变量后，对象属性访问规则会分别接管对bar和baz属性的访问。\n\n##### 欺骗词法\n+ 词法作用域完全由写代码期间函数所声明的位置来定义，JavaScript可以有两种机制在运行时来欺骗词法作用域。\n+ 欺骗词法作用域会导致性能下降\n\n###### eval\n```\n    function foo(str,a){\n        eval(str); //欺骗\n        console.log(a,b);\n    }\n    var b = 2;\n    foo(\"var b = 3\",1); //1,3\n\n```\n+ eval(...)调用中的“var b=3”会被当做本来就在那里一样处理。由于里面声明了一个新的变量b，因此它对已经存在的foo(...)的词法作用域进行修改。这段代码在foo()的内部创建了一个变量b，并遮蔽了外部作用域中的同名变量。\n+ 无论任何情况，eval()都可以在运行期修改书写期的词法作用域。\n+ 但在严格模式下，eval在运行时有其自己的词法作用域，意味着其中的声明无法修改所在作用域，在上面的代码上来看，会进行报错。\n\n###### with\nwith可以不需要重复引用对象本身\n```\n    var obj={\n        a:1,\n        b:2,\n        c:3\n    };\n    obj.a=2;\n    obj.b=3;\n    obj.c=4;\n    //with\n    with(obj){\n        a=3;\n        b=4;\n        c=5;\n    }\n```\n对于以下代码\n```\n    function foo(obj){\n        with(obj){\n            a=2;\n        }\n    }\n    var o1 = {\n        a:3\n    };\n    var o2 = {\n        b:3\n    };\n    \n    foo(o1);\n    console.log(o1.a); //2\n    \n    foo(o2);\n    console.log(o2.a); //undefined\n    console.log(a); //2  a被泄露到全局作用域上了\n```\n+ with可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。\n+ 尽管with块可以将一个对象处理为词法作用域，但是这个块内部正常的var声明并不会被限制在这个块的作用域中，而是被添加到with所处的函数作用域中。\n+ o2的作用域，foo()的作用域和全局作用域中都没有找到标识符a,因此当a=2执行时，会自动创建一个全局变量（非严格）\n\n###### eval和with\n+ eval函数如果接受了含有一个或多个声明的代码，就会修改其所处的词法作用域，而with声明实际上是根据你传递给他的对象凭空创建一个全新的词法作用域。\n+ eval和with都会被严格模式所影响\n+ 当引擎在代码中发现eval或with，它只能简单的假设关于标识符位置的判断都是无效的，无法在词法分析阶段明确知道eval会接收什么代码，也不知道传递给with的到底是什么。\n+ 如果代码中大量使用eval或with，运行会很慢。 \n+ 不使用这两个机制","slug":"《你不知道的JavaScript》——作用域1-0","published":1,"updated":"2017-08-15T12:51:49.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8bw000elso0pd6azte5","content":"<h5 id=\"作用域理解\"><a href=\"#作用域理解\" class=\"headerlink\" title=\"作用域理解\"></a>作用域理解</h5><h5 id=\"参与者\"><a href=\"#参与者\" class=\"headerlink\" title=\"参与者\"></a>参与者</h5><ul>\n<li>引擎：负责整个JavaScript程序的编译和执行过程</li>\n<li>编译器：负责语法分析以及代码生成</li>\n<li>作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。</li>\n</ul>\n<a id=\"more\"></a>\n<h5 id=\"对于-var-a-2\"><a href=\"#对于-var-a-2\" class=\"headerlink\" title=\"对于 var a = 2;\"></a>对于 var a = 2;</h5><ul>\n<li>会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明），然后再运行时引擎会在作用域中查找该变量，如果能找到就对其赋值。<h5 id=\"RHS和LHS\"><a href=\"#RHS和LHS\" class=\"headerlink\" title=\"RHS和LHS\"></a>RHS和LHS</h5></li>\n<li>RHS查询：与简单的查询某个变量的值差不多。</li>\n<li><p>LHS查询：会试图找到变量容器的本身。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(a)&#123;</div><div class=\"line\">    console.log(a); //2</div><div class=\"line\">&#125;</div><div class=\"line\">foo(2);</div></pre></td></tr></table></figure>\n</li>\n<li><p>对于最后一行的foo(…)函数的调用是对foo进行RHS引用，意味着“去找到foo的值，并把它给我”</p>\n</li>\n<li>代码中隐式的a=2操作， 这个操作发生在2被当做参数传递给foo(…)函数时，2会被分配给a。进行了一次LHS查询。</li>\n</ul>\n<h5 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(a)&#123;</div><div class=\"line\">     console.log(a+b);</div><div class=\"line\">     b=a;</div><div class=\"line\">&#125;</div><div class=\"line\">foo(2);</div></pre></td></tr></table></figure>\n<ul>\n<li>第一次对b进行RHS查询是无法找到该变量的。如果RHS查询在所有嵌套作用域中都找不到所需的变量，引擎会抛出ReferenceError异常</li>\n<li>当引擎进行LHS查询时，如果在全局作用域中也无法找到目标变量，全局作用域中会创建一个具有该名称的变量（非严格模式下）。严格模式下，LHS查询失败时，引擎会抛出与RHS查询失败时类似的ReferenceError异常。</li>\n<li>如果RHS查询找到了一个变量，但如果对其的值进行不合理操作，引擎会抛出TypeError异常。</li>\n</ul>\n<h4 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h4><p>词法作用域是由你在写代码时将变量和块作用域写在哪决定的。</p>\n<h5 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h5><ul>\n<li>作用域查找会在找到第一个匹配的标识符时停止。作用域查找始终从运行时所处的最内部作用域开始，逐级往上进行，直到遇到第一个匹配的标识符。</li>\n<li>词法作用域只会查找一级标识符，比如a、b和c。如果代码中引用了foo.bar.baz，词法作用域查找只会试图查找foo标识符，找到变量后，对象属性访问规则会分别接管对bar和baz属性的访问。</li>\n</ul>\n<h5 id=\"欺骗词法\"><a href=\"#欺骗词法\" class=\"headerlink\" title=\"欺骗词法\"></a>欺骗词法</h5><ul>\n<li>词法作用域完全由写代码期间函数所声明的位置来定义，JavaScript可以有两种机制在运行时来欺骗词法作用域。</li>\n<li>欺骗词法作用域会导致性能下降</li>\n</ul>\n<h6 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(str,a)&#123;</div><div class=\"line\">    eval(str); //欺骗</div><div class=\"line\">    console.log(a,b);</div><div class=\"line\">&#125;</div><div class=\"line\">var b = 2;</div><div class=\"line\">foo(&quot;var b = 3&quot;,1); //1,3</div></pre></td></tr></table></figure>\n<ul>\n<li>eval(…)调用中的“var b=3”会被当做本来就在那里一样处理。由于里面声明了一个新的变量b，因此它对已经存在的foo(…)的词法作用域进行修改。这段代码在foo()的内部创建了一个变量b，并遮蔽了外部作用域中的同名变量。</li>\n<li>无论任何情况，eval()都可以在运行期修改书写期的词法作用域。</li>\n<li>但在严格模式下，eval在运行时有其自己的词法作用域，意味着其中的声明无法修改所在作用域，在上面的代码上来看，会进行报错。</li>\n</ul>\n<h6 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h6><p>with可以不需要重复引用对象本身<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj=&#123;</div><div class=\"line\">    a:1,</div><div class=\"line\">    b:2,</div><div class=\"line\">    c:3</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.a=2;</div><div class=\"line\">obj.b=3;</div><div class=\"line\">obj.c=4;</div><div class=\"line\">//with</div><div class=\"line\">with(obj)&#123;</div><div class=\"line\">    a=3;</div><div class=\"line\">    b=4;</div><div class=\"line\">    c=5;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对于以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(obj)&#123;</div><div class=\"line\">    with(obj)&#123;</div><div class=\"line\">        a=2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var o1 = &#123;</div><div class=\"line\">    a:3</div><div class=\"line\">&#125;;</div><div class=\"line\">var o2 = &#123;</div><div class=\"line\">    b:3</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">foo(o1);</div><div class=\"line\">console.log(o1.a); //2</div><div class=\"line\"></div><div class=\"line\">foo(o2);</div><div class=\"line\">console.log(o2.a); //undefined</div><div class=\"line\">console.log(a); //2  a被泄露到全局作用域上了</div></pre></td></tr></table></figure></p>\n<ul>\n<li>with可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。</li>\n<li>尽管with块可以将一个对象处理为词法作用域，但是这个块内部正常的var声明并不会被限制在这个块的作用域中，而是被添加到with所处的函数作用域中。</li>\n<li>o2的作用域，foo()的作用域和全局作用域中都没有找到标识符a,因此当a=2执行时，会自动创建一个全局变量（非严格）</li>\n</ul>\n<h6 id=\"eval和with\"><a href=\"#eval和with\" class=\"headerlink\" title=\"eval和with\"></a>eval和with</h6><ul>\n<li>eval函数如果接受了含有一个或多个声明的代码，就会修改其所处的词法作用域，而with声明实际上是根据你传递给他的对象凭空创建一个全新的词法作用域。</li>\n<li>eval和with都会被严格模式所影响</li>\n<li>当引擎在代码中发现eval或with，它只能简单的假设关于标识符位置的判断都是无效的，无法在词法分析阶段明确知道eval会接收什么代码，也不知道传递给with的到底是什么。</li>\n<li>如果代码中大量使用eval或with，运行会很慢。 </li>\n<li>不使用这两个机制</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h5 id=\"作用域理解\"><a href=\"#作用域理解\" class=\"headerlink\" title=\"作用域理解\"></a>作用域理解</h5><h5 id=\"参与者\"><a href=\"#参与者\" class=\"headerlink\" title=\"参与者\"></a>参与者</h5><ul>\n<li>引擎：负责整个JavaScript程序的编译和执行过程</li>\n<li>编译器：负责语法分析以及代码生成</li>\n<li>作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。</li>\n</ul>","more":"<h5 id=\"对于-var-a-2\"><a href=\"#对于-var-a-2\" class=\"headerlink\" title=\"对于 var a = 2;\"></a>对于 var a = 2;</h5><ul>\n<li>会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明），然后再运行时引擎会在作用域中查找该变量，如果能找到就对其赋值。<h5 id=\"RHS和LHS\"><a href=\"#RHS和LHS\" class=\"headerlink\" title=\"RHS和LHS\"></a>RHS和LHS</h5></li>\n<li>RHS查询：与简单的查询某个变量的值差不多。</li>\n<li><p>LHS查询：会试图找到变量容器的本身。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(a)&#123;</div><div class=\"line\">    console.log(a); //2</div><div class=\"line\">&#125;</div><div class=\"line\">foo(2);</div></pre></td></tr></table></figure>\n</li>\n<li><p>对于最后一行的foo(…)函数的调用是对foo进行RHS引用，意味着“去找到foo的值，并把它给我”</p>\n</li>\n<li>代码中隐式的a=2操作， 这个操作发生在2被当做参数传递给foo(…)函数时，2会被分配给a。进行了一次LHS查询。</li>\n</ul>\n<h5 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(a)&#123;</div><div class=\"line\">     console.log(a+b);</div><div class=\"line\">     b=a;</div><div class=\"line\">&#125;</div><div class=\"line\">foo(2);</div></pre></td></tr></table></figure>\n<ul>\n<li>第一次对b进行RHS查询是无法找到该变量的。如果RHS查询在所有嵌套作用域中都找不到所需的变量，引擎会抛出ReferenceError异常</li>\n<li>当引擎进行LHS查询时，如果在全局作用域中也无法找到目标变量，全局作用域中会创建一个具有该名称的变量（非严格模式下）。严格模式下，LHS查询失败时，引擎会抛出与RHS查询失败时类似的ReferenceError异常。</li>\n<li>如果RHS查询找到了一个变量，但如果对其的值进行不合理操作，引擎会抛出TypeError异常。</li>\n</ul>\n<h4 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h4><p>词法作用域是由你在写代码时将变量和块作用域写在哪决定的。</p>\n<h5 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h5><ul>\n<li>作用域查找会在找到第一个匹配的标识符时停止。作用域查找始终从运行时所处的最内部作用域开始，逐级往上进行，直到遇到第一个匹配的标识符。</li>\n<li>词法作用域只会查找一级标识符，比如a、b和c。如果代码中引用了foo.bar.baz，词法作用域查找只会试图查找foo标识符，找到变量后，对象属性访问规则会分别接管对bar和baz属性的访问。</li>\n</ul>\n<h5 id=\"欺骗词法\"><a href=\"#欺骗词法\" class=\"headerlink\" title=\"欺骗词法\"></a>欺骗词法</h5><ul>\n<li>词法作用域完全由写代码期间函数所声明的位置来定义，JavaScript可以有两种机制在运行时来欺骗词法作用域。</li>\n<li>欺骗词法作用域会导致性能下降</li>\n</ul>\n<h6 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(str,a)&#123;</div><div class=\"line\">    eval(str); //欺骗</div><div class=\"line\">    console.log(a,b);</div><div class=\"line\">&#125;</div><div class=\"line\">var b = 2;</div><div class=\"line\">foo(&quot;var b = 3&quot;,1); //1,3</div></pre></td></tr></table></figure>\n<ul>\n<li>eval(…)调用中的“var b=3”会被当做本来就在那里一样处理。由于里面声明了一个新的变量b，因此它对已经存在的foo(…)的词法作用域进行修改。这段代码在foo()的内部创建了一个变量b，并遮蔽了外部作用域中的同名变量。</li>\n<li>无论任何情况，eval()都可以在运行期修改书写期的词法作用域。</li>\n<li>但在严格模式下，eval在运行时有其自己的词法作用域，意味着其中的声明无法修改所在作用域，在上面的代码上来看，会进行报错。</li>\n</ul>\n<h6 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h6><p>with可以不需要重复引用对象本身<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj=&#123;</div><div class=\"line\">    a:1,</div><div class=\"line\">    b:2,</div><div class=\"line\">    c:3</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.a=2;</div><div class=\"line\">obj.b=3;</div><div class=\"line\">obj.c=4;</div><div class=\"line\">//with</div><div class=\"line\">with(obj)&#123;</div><div class=\"line\">    a=3;</div><div class=\"line\">    b=4;</div><div class=\"line\">    c=5;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对于以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(obj)&#123;</div><div class=\"line\">    with(obj)&#123;</div><div class=\"line\">        a=2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var o1 = &#123;</div><div class=\"line\">    a:3</div><div class=\"line\">&#125;;</div><div class=\"line\">var o2 = &#123;</div><div class=\"line\">    b:3</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">foo(o1);</div><div class=\"line\">console.log(o1.a); //2</div><div class=\"line\"></div><div class=\"line\">foo(o2);</div><div class=\"line\">console.log(o2.a); //undefined</div><div class=\"line\">console.log(a); //2  a被泄露到全局作用域上了</div></pre></td></tr></table></figure></p>\n<ul>\n<li>with可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。</li>\n<li>尽管with块可以将一个对象处理为词法作用域，但是这个块内部正常的var声明并不会被限制在这个块的作用域中，而是被添加到with所处的函数作用域中。</li>\n<li>o2的作用域，foo()的作用域和全局作用域中都没有找到标识符a,因此当a=2执行时，会自动创建一个全局变量（非严格）</li>\n</ul>\n<h6 id=\"eval和with\"><a href=\"#eval和with\" class=\"headerlink\" title=\"eval和with\"></a>eval和with</h6><ul>\n<li>eval函数如果接受了含有一个或多个声明的代码，就会修改其所处的词法作用域，而with声明实际上是根据你传递给他的对象凭空创建一个全新的词法作用域。</li>\n<li>eval和with都会被严格模式所影响</li>\n<li>当引擎在代码中发现eval或with，它只能简单的假设关于标识符位置的判断都是无效的，无法在词法分析阶段明确知道eval会接收什么代码，也不知道传递给with的到底是什么。</li>\n<li>如果代码中大量使用eval或with，运行会很慢。 </li>\n<li>不使用这两个机制</li>\n</ul>"},{"title":"函数作用域和块作用域","date":"2017-04-27T08:30:43.000Z","_content":"> 这篇总结主要摘自《你不知道的JavaScript》上卷。也是我对这一部分的总结\n> 这部分的知识点我并未完全总结，主要是一些平时常用或者易错点\n\n<!-- more -->\n\n#### 函数作用域\n+ 每声明一个函数，都会为其自身创建一个气泡。\n\n##### 隐藏内部实现\n+ 我们可以将函数理解为先声明一个函数，再为其添加代码。也可以理解为先写代码，再用函数声明进行包装。后者就是所谓的“隐藏”，将变量隐藏在函数声明里面\n+ 最小授权/暴露原则：在软件设计中，最小限度地暴露必要内容，而将其他内容都隐藏起来。\n+ 作用\n    + 避免同名标识符之间的冲突\n\n##### 匿名和具名\n+ 如果function是声明中的第一个词，那么就是一个函数声明。否则就是一个函数表达式。\n+  函数表达式可以是匿名的，函数声明不可以省略函数名。\n+  匿名函数的弊端\n    +  在栈追踪中不会显示出有意义的函数名，使得调试困难\n    +  函数引用自身时不方便，只能使用过期的argument.callee引用\n    + 降低代码的可读性和可理解性\n+ 解决方法：行内函数表达式\n```\n    setTimeout(function(){\n        console.log(\"111\");\n    },1000);\n    //改为行内函数表达式\n    setTimeout(function timeoutHandler(){\n        console.log(\"111\");\n    },1000);\n```\n\n##### 立即执行函数表达式\n```\n    var a = 2;\n    (function foo(){\n        var a = 3;\n        console.log(a); //3\n    })();\n    console.log(a); //2\n```\n+ (function foo(){...})()，第一个()将函数变成表达式，第二个()执行了这个函数\n+ IIFE：代表立即执行函数表达式\n+ 另一种用法：(function(){}())。两种形式功能一样\n\n###### IIFE的一些用法\n+ 把他们当做函数调用并传递参数进去\n```\n    var a = 2;\n    (function IIFE(global){\n        var a = 3;\n        console.log(a);  //3\n        console.log(global.a);  //2\n    })(window);\n    console.log(a); //2\n```\n+ 解决undefined标识符的默认值被错误覆盖引发的异常（少见）\n```\n    undefined = true; //bug\n    (function IIFE(undefined){\n        var a;\n        if(a === undefined){\n            console.log(\"undefined is safe here!\");\n        }\n    })();\n```\n+ 倒置代码的运行顺序\n```\n    var a = 2;\n    (function IIFE(def){\n        def(window)l\n    })(function def(global){\n        var a = 3;\n        console.log(a); //3\n        console.log(global.a); //2\n    });\n```\n+ 将需要运行的函数放在第二位，在IIFE执行之后当做参数传递进去\n+ 先执行def,在将window当做参数传入def\n\n#### 块作用域\n```\n    for(var i=0;i<10;i++){\n        console.log(i);\n    }\n```\n+ 以上代码中的i会被绑定在外部作用域（函数或全局）中\n+ 块作用域是一个用来对最小授权原则进行扩展的工具，将代码从在函数中隐藏信息扩展为在块中隐藏信息\n##### 方案\n###### with\n###### try/catch\n+ try/catch的catch分句会创建一个块作用域，其中声明的变量仅在catch内部有效\n```\n    try{\n        undefined();\n    }\n    catch(err){\n        console.log(err); //正常运行\n    }\n    console.log(err);  //RefrenceError : err not found\n```\n\n###### let\n + ES6引入了新的let关键字。可以绑定到所在的任何作用域中。let为其声明的变量隐式的劫持了所在的块作用域\n + 为块作用域显示创建块——在声明中的任意位置都可以使用{}来为let创建一个用于绑定的块\n + let进行的声明不会在块作用域中进行提升\n + 垃圾收集\n```\n    function process(data){\n        //...\n    }    \n    var someReallyBigData = {...};\n    process(someReallyBigData);\n    var btn = document.getElementById(\"my_button\");\n    btn.addEventListener(\"click\",function click(evt){\n        console.log(\"button clicked\");\n    },/**/false);\n```\n+ click函数点击回调并不需要someReallyBigData变量。但是当process执行后，其并不一定被垃圾回收了。由于click函数形成了一个覆盖整个作用域的闭包，JavaScript引擎极可能保存着这个结构。\n+ 块作用域用来解决\n```\n    function process(data){\n        //...\n    }\n    //这个块定义的内容完事可以销毁\n    {    \n        let someReallyBigData = {...};\n        process(someReallyBigData);\n    }\n    var btn = document.getElementById(\"my_button\");\n    btn.addEventListener(\"click\",function click(evt){\n        console.log(\"button clicked\");\n    },/**/false);\n```\n+ let循环\n```\n    for(let i=0;i<10;i++){\n        console.log(i);\n    }\n    console.log(i); //ReferenceError\n```\n+ for循环头部的let将i绑定到了for循环的块中。也将其重新绑定到了循环的每一次迭代中，确保使用上一次循环迭代结束时的值重新进行赋值。\n\n###### const\n+ const可以用来创建块作用域，但其值是固定的（常量）。不可修改\n```\n    var foo = true;\n    if(foo){\n        var a = 2;\n        const b = 3; // 包含在if中的块作用域常量\n        a = 3; // 正常\n        b = 4; // 错误\n    }\n    console.log(a); //3\n    console.log(b); //ReferenceError\n```\n\n#### 附加\n+ 引擎会在解释JavaScript代码之前首先对其进行编译，编译阶段会找到所有的声明，并用合适的作用域将他们关联起来。\n+ 所有声明（变量、函数）都会在任何代码被执行前首先被处理\n##### 先声明后赋值\n+ 只有声明本身会被提升，赋值或其他运行逻辑会留在原地\n```\n    console.log(a);\n    var a = 2;\n```\n会被解读为\n```\n    var a;\n    console.log(a); //undefined\n    a = 2;\n```\n+ 函数声明会被提升，但是函数表达式却不会被提升\n+ 即使是具名的函数表达式，名称在标识符赋值之前也无法在所在作用域中使用\n```\n    foo(); //TypError\n    bar(); //ReferenceError\n    var foo= funcion bar(){\n        //...\n    };\n```\n会被解读为\n```\n    var foo;\n    foo(); //TypError\n    bar(); //ReferenceError\n    foo= funcion bar(){\n        //...\n    };\n```\n##### 函数优先\n+ 函数声明和变量声明都会被提升，函数会首先被提升，然后才是变量\n```\n    foo();  //1\n    var foo;\n    function foo(){\n        console.log(1);\n    }\n    foo = function(){\n        console.log(2);\n    };\n```\n会被引擎理解为\n```\n    function foo(){\n        console.log(1);\n    }\n    foo();  //1\n    foo = function(){\n        console.log(2);\n    };\n```\n+ 虽然var foo出现在function foo()的声明之前，但是他是重复声明，所以被忽略了。函数声明会被提升到普通变量之前。\n+ 后面的函数声明可以覆盖前面的函数声明。\n+ 一个普通块内部的函数声明通常会被提升到所在作用域顶部，避免在块内部声明函数\n```\n    foo(); //b\n    var a = true;\n    if(a){\n        function foo(){\n            console.log(\"a\");\n        }\n    }else{\n        console.log(\"b\");\n    }\n```","source":"_posts/函数作用域和块作用域.md","raw":"---\ntitle: 函数作用域和块作用域\ndate: 2017-04-27 16:30:43\ntags: JavaScript\ncategories: 前端\n---\n> 这篇总结主要摘自《你不知道的JavaScript》上卷。也是我对这一部分的总结\n> 这部分的知识点我并未完全总结，主要是一些平时常用或者易错点\n\n<!-- more -->\n\n#### 函数作用域\n+ 每声明一个函数，都会为其自身创建一个气泡。\n\n##### 隐藏内部实现\n+ 我们可以将函数理解为先声明一个函数，再为其添加代码。也可以理解为先写代码，再用函数声明进行包装。后者就是所谓的“隐藏”，将变量隐藏在函数声明里面\n+ 最小授权/暴露原则：在软件设计中，最小限度地暴露必要内容，而将其他内容都隐藏起来。\n+ 作用\n    + 避免同名标识符之间的冲突\n\n##### 匿名和具名\n+ 如果function是声明中的第一个词，那么就是一个函数声明。否则就是一个函数表达式。\n+  函数表达式可以是匿名的，函数声明不可以省略函数名。\n+  匿名函数的弊端\n    +  在栈追踪中不会显示出有意义的函数名，使得调试困难\n    +  函数引用自身时不方便，只能使用过期的argument.callee引用\n    + 降低代码的可读性和可理解性\n+ 解决方法：行内函数表达式\n```\n    setTimeout(function(){\n        console.log(\"111\");\n    },1000);\n    //改为行内函数表达式\n    setTimeout(function timeoutHandler(){\n        console.log(\"111\");\n    },1000);\n```\n\n##### 立即执行函数表达式\n```\n    var a = 2;\n    (function foo(){\n        var a = 3;\n        console.log(a); //3\n    })();\n    console.log(a); //2\n```\n+ (function foo(){...})()，第一个()将函数变成表达式，第二个()执行了这个函数\n+ IIFE：代表立即执行函数表达式\n+ 另一种用法：(function(){}())。两种形式功能一样\n\n###### IIFE的一些用法\n+ 把他们当做函数调用并传递参数进去\n```\n    var a = 2;\n    (function IIFE(global){\n        var a = 3;\n        console.log(a);  //3\n        console.log(global.a);  //2\n    })(window);\n    console.log(a); //2\n```\n+ 解决undefined标识符的默认值被错误覆盖引发的异常（少见）\n```\n    undefined = true; //bug\n    (function IIFE(undefined){\n        var a;\n        if(a === undefined){\n            console.log(\"undefined is safe here!\");\n        }\n    })();\n```\n+ 倒置代码的运行顺序\n```\n    var a = 2;\n    (function IIFE(def){\n        def(window)l\n    })(function def(global){\n        var a = 3;\n        console.log(a); //3\n        console.log(global.a); //2\n    });\n```\n+ 将需要运行的函数放在第二位，在IIFE执行之后当做参数传递进去\n+ 先执行def,在将window当做参数传入def\n\n#### 块作用域\n```\n    for(var i=0;i<10;i++){\n        console.log(i);\n    }\n```\n+ 以上代码中的i会被绑定在外部作用域（函数或全局）中\n+ 块作用域是一个用来对最小授权原则进行扩展的工具，将代码从在函数中隐藏信息扩展为在块中隐藏信息\n##### 方案\n###### with\n###### try/catch\n+ try/catch的catch分句会创建一个块作用域，其中声明的变量仅在catch内部有效\n```\n    try{\n        undefined();\n    }\n    catch(err){\n        console.log(err); //正常运行\n    }\n    console.log(err);  //RefrenceError : err not found\n```\n\n###### let\n + ES6引入了新的let关键字。可以绑定到所在的任何作用域中。let为其声明的变量隐式的劫持了所在的块作用域\n + 为块作用域显示创建块——在声明中的任意位置都可以使用{}来为let创建一个用于绑定的块\n + let进行的声明不会在块作用域中进行提升\n + 垃圾收集\n```\n    function process(data){\n        //...\n    }    \n    var someReallyBigData = {...};\n    process(someReallyBigData);\n    var btn = document.getElementById(\"my_button\");\n    btn.addEventListener(\"click\",function click(evt){\n        console.log(\"button clicked\");\n    },/**/false);\n```\n+ click函数点击回调并不需要someReallyBigData变量。但是当process执行后，其并不一定被垃圾回收了。由于click函数形成了一个覆盖整个作用域的闭包，JavaScript引擎极可能保存着这个结构。\n+ 块作用域用来解决\n```\n    function process(data){\n        //...\n    }\n    //这个块定义的内容完事可以销毁\n    {    \n        let someReallyBigData = {...};\n        process(someReallyBigData);\n    }\n    var btn = document.getElementById(\"my_button\");\n    btn.addEventListener(\"click\",function click(evt){\n        console.log(\"button clicked\");\n    },/**/false);\n```\n+ let循环\n```\n    for(let i=0;i<10;i++){\n        console.log(i);\n    }\n    console.log(i); //ReferenceError\n```\n+ for循环头部的let将i绑定到了for循环的块中。也将其重新绑定到了循环的每一次迭代中，确保使用上一次循环迭代结束时的值重新进行赋值。\n\n###### const\n+ const可以用来创建块作用域，但其值是固定的（常量）。不可修改\n```\n    var foo = true;\n    if(foo){\n        var a = 2;\n        const b = 3; // 包含在if中的块作用域常量\n        a = 3; // 正常\n        b = 4; // 错误\n    }\n    console.log(a); //3\n    console.log(b); //ReferenceError\n```\n\n#### 附加\n+ 引擎会在解释JavaScript代码之前首先对其进行编译，编译阶段会找到所有的声明，并用合适的作用域将他们关联起来。\n+ 所有声明（变量、函数）都会在任何代码被执行前首先被处理\n##### 先声明后赋值\n+ 只有声明本身会被提升，赋值或其他运行逻辑会留在原地\n```\n    console.log(a);\n    var a = 2;\n```\n会被解读为\n```\n    var a;\n    console.log(a); //undefined\n    a = 2;\n```\n+ 函数声明会被提升，但是函数表达式却不会被提升\n+ 即使是具名的函数表达式，名称在标识符赋值之前也无法在所在作用域中使用\n```\n    foo(); //TypError\n    bar(); //ReferenceError\n    var foo= funcion bar(){\n        //...\n    };\n```\n会被解读为\n```\n    var foo;\n    foo(); //TypError\n    bar(); //ReferenceError\n    foo= funcion bar(){\n        //...\n    };\n```\n##### 函数优先\n+ 函数声明和变量声明都会被提升，函数会首先被提升，然后才是变量\n```\n    foo();  //1\n    var foo;\n    function foo(){\n        console.log(1);\n    }\n    foo = function(){\n        console.log(2);\n    };\n```\n会被引擎理解为\n```\n    function foo(){\n        console.log(1);\n    }\n    foo();  //1\n    foo = function(){\n        console.log(2);\n    };\n```\n+ 虽然var foo出现在function foo()的声明之前，但是他是重复声明，所以被忽略了。函数声明会被提升到普通变量之前。\n+ 后面的函数声明可以覆盖前面的函数声明。\n+ 一个普通块内部的函数声明通常会被提升到所在作用域顶部，避免在块内部声明函数\n```\n    foo(); //b\n    var a = true;\n    if(a){\n        function foo(){\n            console.log(\"a\");\n        }\n    }else{\n        console.log(\"b\");\n    }\n```","slug":"函数作用域和块作用域","published":1,"updated":"2017-08-15T12:51:49.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8c2000hlso0gxzpztdp","content":"<blockquote>\n<p>这篇总结主要摘自《你不知道的JavaScript》上卷。也是我对这一部分的总结<br>这部分的知识点我并未完全总结，主要是一些平时常用或者易错点</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h4><ul>\n<li>每声明一个函数，都会为其自身创建一个气泡。</li>\n</ul>\n<h5 id=\"隐藏内部实现\"><a href=\"#隐藏内部实现\" class=\"headerlink\" title=\"隐藏内部实现\"></a>隐藏内部实现</h5><ul>\n<li>我们可以将函数理解为先声明一个函数，再为其添加代码。也可以理解为先写代码，再用函数声明进行包装。后者就是所谓的“隐藏”，将变量隐藏在函数声明里面</li>\n<li>最小授权/暴露原则：在软件设计中，最小限度地暴露必要内容，而将其他内容都隐藏起来。</li>\n<li>作用<ul>\n<li>避免同名标识符之间的冲突</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"匿名和具名\"><a href=\"#匿名和具名\" class=\"headerlink\" title=\"匿名和具名\"></a>匿名和具名</h5><ul>\n<li>如果function是声明中的第一个词，那么就是一个函数声明。否则就是一个函数表达式。</li>\n<li>函数表达式可以是匿名的，函数声明不可以省略函数名。</li>\n<li>匿名函数的弊端<ul>\n<li>在栈追踪中不会显示出有意义的函数名，使得调试困难</li>\n<li>函数引用自身时不方便，只能使用过期的argument.callee引用</li>\n<li>降低代码的可读性和可理解性</li>\n</ul>\n</li>\n<li>解决方法：行内函数表达式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(function()&#123;</div><div class=\"line\">    console.log(&quot;111&quot;);</div><div class=\"line\">&#125;,1000);</div><div class=\"line\">//改为行内函数表达式</div><div class=\"line\">setTimeout(function timeoutHandler()&#123;</div><div class=\"line\">    console.log(&quot;111&quot;);</div><div class=\"line\">&#125;,1000);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"立即执行函数表达式\"><a href=\"#立即执行函数表达式\" class=\"headerlink\" title=\"立即执行函数表达式\"></a>立即执行函数表达式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 2;</div><div class=\"line\">(function foo()&#123;</div><div class=\"line\">    var a = 3;</div><div class=\"line\">    console.log(a); //3</div><div class=\"line\">&#125;)();</div><div class=\"line\">console.log(a); //2</div></pre></td></tr></table></figure>\n<ul>\n<li>(function foo(){…})()，第一个()将函数变成表达式，第二个()执行了这个函数</li>\n<li>IIFE：代表立即执行函数表达式</li>\n<li>另一种用法：(function(){}())。两种形式功能一样</li>\n</ul>\n<h6 id=\"IIFE的一些用法\"><a href=\"#IIFE的一些用法\" class=\"headerlink\" title=\"IIFE的一些用法\"></a>IIFE的一些用法</h6><ul>\n<li><p>把他们当做函数调用并传递参数进去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 2;</div><div class=\"line\">(function IIFE(global)&#123;</div><div class=\"line\">    var a = 3;</div><div class=\"line\">    console.log(a);  //3</div><div class=\"line\">    console.log(global.a);  //2</div><div class=\"line\">&#125;)(window);</div><div class=\"line\">console.log(a); //2</div></pre></td></tr></table></figure>\n</li>\n<li><p>解决undefined标识符的默认值被错误覆盖引发的异常（少见）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">undefined = true; //bug</div><div class=\"line\">(function IIFE(undefined)&#123;</div><div class=\"line\">    var a;</div><div class=\"line\">    if(a === undefined)&#123;</div><div class=\"line\">        console.log(&quot;undefined is safe here!&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n</li>\n<li><p>倒置代码的运行顺序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 2;</div><div class=\"line\">(function IIFE(def)&#123;</div><div class=\"line\">    def(window)l</div><div class=\"line\">&#125;)(function def(global)&#123;</div><div class=\"line\">    var a = 3;</div><div class=\"line\">    console.log(a); //3</div><div class=\"line\">    console.log(global.a); //2</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>将需要运行的函数放在第二位，在IIFE执行之后当做参数传递进去</p>\n</li>\n<li>先执行def,在将window当做参数传入def</li>\n</ul>\n<h4 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i=0;i&lt;10;i++)&#123;</div><div class=\"line\">    console.log(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>以上代码中的i会被绑定在外部作用域（函数或全局）中</li>\n<li>块作用域是一个用来对最小授权原则进行扩展的工具，将代码从在函数中隐藏信息扩展为在块中隐藏信息<h5 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h5><h6 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h6><h6 id=\"try-catch\"><a href=\"#try-catch\" class=\"headerlink\" title=\"try/catch\"></a>try/catch</h6></li>\n<li>try/catch的catch分句会创建一个块作用域，其中声明的变量仅在catch内部有效<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">try&#123;</div><div class=\"line\">    undefined();</div><div class=\"line\">&#125;</div><div class=\"line\">catch(err)&#123;</div><div class=\"line\">    console.log(err); //正常运行</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(err);  //RefrenceError : err not found</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h6><ul>\n<li>ES6引入了新的let关键字。可以绑定到所在的任何作用域中。let为其声明的变量隐式的劫持了所在的块作用域</li>\n<li>为块作用域显示创建块——在声明中的任意位置都可以使用{}来为let创建一个用于绑定的块</li>\n<li>let进行的声明不会在块作用域中进行提升</li>\n<li>垃圾收集<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function process(data)&#123;</div><div class=\"line\">    //...</div><div class=\"line\">&#125;    </div><div class=\"line\">var someReallyBigData = &#123;...&#125;;</div><div class=\"line\">process(someReallyBigData);</div><div class=\"line\">var btn = document.getElementById(&quot;my_button&quot;);</div><div class=\"line\">btn.addEventListener(&quot;click&quot;,function click(evt)&#123;</div><div class=\"line\">    console.log(&quot;button clicked&quot;);</div><div class=\"line\">&#125;,/**/false);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>click函数点击回调并不需要someReallyBigData变量。但是当process执行后，其并不一定被垃圾回收了。由于click函数形成了一个覆盖整个作用域的闭包，JavaScript引擎极可能保存着这个结构。</li>\n<li><p>块作用域用来解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function process(data)&#123;</div><div class=\"line\">    //...</div><div class=\"line\">&#125;</div><div class=\"line\">//这个块定义的内容完事可以销毁</div><div class=\"line\">&#123;    </div><div class=\"line\">    let someReallyBigData = &#123;...&#125;;</div><div class=\"line\">    process(someReallyBigData);</div><div class=\"line\">&#125;</div><div class=\"line\">var btn = document.getElementById(&quot;my_button&quot;);</div><div class=\"line\">btn.addEventListener(&quot;click&quot;,function click(evt)&#123;</div><div class=\"line\">    console.log(&quot;button clicked&quot;);</div><div class=\"line\">&#125;,/**/false);</div></pre></td></tr></table></figure>\n</li>\n<li><p>let循环</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(let i=0;i&lt;10;i++)&#123;</div><div class=\"line\">    console.log(i);</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(i); //ReferenceError</div></pre></td></tr></table></figure>\n</li>\n<li><p>for循环头部的let将i绑定到了for循环的块中。也将其重新绑定到了循环的每一次迭代中，确保使用上一次循环迭代结束时的值重新进行赋值。</p>\n</li>\n</ul>\n<h6 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h6><ul>\n<li>const可以用来创建块作用域，但其值是固定的（常量）。不可修改<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo = true;</div><div class=\"line\">if(foo)&#123;</div><div class=\"line\">    var a = 2;</div><div class=\"line\">    const b = 3; // 包含在if中的块作用域常量</div><div class=\"line\">    a = 3; // 正常</div><div class=\"line\">    b = 4; // 错误</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(a); //3</div><div class=\"line\">console.log(b); //ReferenceError</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"附加\"><a href=\"#附加\" class=\"headerlink\" title=\"附加\"></a>附加</h4><ul>\n<li>引擎会在解释JavaScript代码之前首先对其进行编译，编译阶段会找到所有的声明，并用合适的作用域将他们关联起来。</li>\n<li>所有声明（变量、函数）都会在任何代码被执行前首先被处理<h5 id=\"先声明后赋值\"><a href=\"#先声明后赋值\" class=\"headerlink\" title=\"先声明后赋值\"></a>先声明后赋值</h5></li>\n<li>只有声明本身会被提升，赋值或其他运行逻辑会留在原地<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(a);</div><div class=\"line\">var a = 2;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>会被解读为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a;</div><div class=\"line\">console.log(a); //undefined</div><div class=\"line\">a = 2;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>函数声明会被提升，但是函数表达式却不会被提升</li>\n<li>即使是具名的函数表达式，名称在标识符赋值之前也无法在所在作用域中使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo(); //TypError</div><div class=\"line\">bar(); //ReferenceError</div><div class=\"line\">var foo= funcion bar()&#123;</div><div class=\"line\">    //...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>会被解读为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo;</div><div class=\"line\">foo(); //TypError</div><div class=\"line\">bar(); //ReferenceError</div><div class=\"line\">foo= funcion bar()&#123;</div><div class=\"line\">    //...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h5 id=\"函数优先\"><a href=\"#函数优先\" class=\"headerlink\" title=\"函数优先\"></a>函数优先</h5><ul>\n<li>函数声明和变量声明都会被提升，函数会首先被提升，然后才是变量<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo();  //1</div><div class=\"line\">var foo;</div><div class=\"line\">function foo()&#123;</div><div class=\"line\">    console.log(1);</div><div class=\"line\">&#125;</div><div class=\"line\">foo = function()&#123;</div><div class=\"line\">    console.log(2);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>会被引擎理解为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo()&#123;</div><div class=\"line\">    console.log(1);</div><div class=\"line\">&#125;</div><div class=\"line\">foo();  //1</div><div class=\"line\">foo = function()&#123;</div><div class=\"line\">    console.log(2);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>虽然var foo出现在function foo()的声明之前，但是他是重复声明，所以被忽略了。函数声明会被提升到普通变量之前。</li>\n<li>后面的函数声明可以覆盖前面的函数声明。</li>\n<li>一个普通块内部的函数声明通常会被提升到所在作用域顶部，避免在块内部声明函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo(); //b</div><div class=\"line\">var a = true;</div><div class=\"line\">if(a)&#123;</div><div class=\"line\">    function foo()&#123;</div><div class=\"line\">        console.log(&quot;a&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">    console.log(&quot;b&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这篇总结主要摘自《你不知道的JavaScript》上卷。也是我对这一部分的总结<br>这部分的知识点我并未完全总结，主要是一些平时常用或者易错点</p>\n</blockquote>","more":"<h4 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h4><ul>\n<li>每声明一个函数，都会为其自身创建一个气泡。</li>\n</ul>\n<h5 id=\"隐藏内部实现\"><a href=\"#隐藏内部实现\" class=\"headerlink\" title=\"隐藏内部实现\"></a>隐藏内部实现</h5><ul>\n<li>我们可以将函数理解为先声明一个函数，再为其添加代码。也可以理解为先写代码，再用函数声明进行包装。后者就是所谓的“隐藏”，将变量隐藏在函数声明里面</li>\n<li>最小授权/暴露原则：在软件设计中，最小限度地暴露必要内容，而将其他内容都隐藏起来。</li>\n<li>作用<ul>\n<li>避免同名标识符之间的冲突</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"匿名和具名\"><a href=\"#匿名和具名\" class=\"headerlink\" title=\"匿名和具名\"></a>匿名和具名</h5><ul>\n<li>如果function是声明中的第一个词，那么就是一个函数声明。否则就是一个函数表达式。</li>\n<li>函数表达式可以是匿名的，函数声明不可以省略函数名。</li>\n<li>匿名函数的弊端<ul>\n<li>在栈追踪中不会显示出有意义的函数名，使得调试困难</li>\n<li>函数引用自身时不方便，只能使用过期的argument.callee引用</li>\n<li>降低代码的可读性和可理解性</li>\n</ul>\n</li>\n<li>解决方法：行内函数表达式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(function()&#123;</div><div class=\"line\">    console.log(&quot;111&quot;);</div><div class=\"line\">&#125;,1000);</div><div class=\"line\">//改为行内函数表达式</div><div class=\"line\">setTimeout(function timeoutHandler()&#123;</div><div class=\"line\">    console.log(&quot;111&quot;);</div><div class=\"line\">&#125;,1000);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"立即执行函数表达式\"><a href=\"#立即执行函数表达式\" class=\"headerlink\" title=\"立即执行函数表达式\"></a>立即执行函数表达式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 2;</div><div class=\"line\">(function foo()&#123;</div><div class=\"line\">    var a = 3;</div><div class=\"line\">    console.log(a); //3</div><div class=\"line\">&#125;)();</div><div class=\"line\">console.log(a); //2</div></pre></td></tr></table></figure>\n<ul>\n<li>(function foo(){…})()，第一个()将函数变成表达式，第二个()执行了这个函数</li>\n<li>IIFE：代表立即执行函数表达式</li>\n<li>另一种用法：(function(){}())。两种形式功能一样</li>\n</ul>\n<h6 id=\"IIFE的一些用法\"><a href=\"#IIFE的一些用法\" class=\"headerlink\" title=\"IIFE的一些用法\"></a>IIFE的一些用法</h6><ul>\n<li><p>把他们当做函数调用并传递参数进去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 2;</div><div class=\"line\">(function IIFE(global)&#123;</div><div class=\"line\">    var a = 3;</div><div class=\"line\">    console.log(a);  //3</div><div class=\"line\">    console.log(global.a);  //2</div><div class=\"line\">&#125;)(window);</div><div class=\"line\">console.log(a); //2</div></pre></td></tr></table></figure>\n</li>\n<li><p>解决undefined标识符的默认值被错误覆盖引发的异常（少见）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">undefined = true; //bug</div><div class=\"line\">(function IIFE(undefined)&#123;</div><div class=\"line\">    var a;</div><div class=\"line\">    if(a === undefined)&#123;</div><div class=\"line\">        console.log(&quot;undefined is safe here!&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n</li>\n<li><p>倒置代码的运行顺序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 2;</div><div class=\"line\">(function IIFE(def)&#123;</div><div class=\"line\">    def(window)l</div><div class=\"line\">&#125;)(function def(global)&#123;</div><div class=\"line\">    var a = 3;</div><div class=\"line\">    console.log(a); //3</div><div class=\"line\">    console.log(global.a); //2</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>将需要运行的函数放在第二位，在IIFE执行之后当做参数传递进去</p>\n</li>\n<li>先执行def,在将window当做参数传入def</li>\n</ul>\n<h4 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i=0;i&lt;10;i++)&#123;</div><div class=\"line\">    console.log(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>以上代码中的i会被绑定在外部作用域（函数或全局）中</li>\n<li>块作用域是一个用来对最小授权原则进行扩展的工具，将代码从在函数中隐藏信息扩展为在块中隐藏信息<h5 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h5><h6 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h6><h6 id=\"try-catch\"><a href=\"#try-catch\" class=\"headerlink\" title=\"try/catch\"></a>try/catch</h6></li>\n<li>try/catch的catch分句会创建一个块作用域，其中声明的变量仅在catch内部有效<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">try&#123;</div><div class=\"line\">    undefined();</div><div class=\"line\">&#125;</div><div class=\"line\">catch(err)&#123;</div><div class=\"line\">    console.log(err); //正常运行</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(err);  //RefrenceError : err not found</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h6><ul>\n<li>ES6引入了新的let关键字。可以绑定到所在的任何作用域中。let为其声明的变量隐式的劫持了所在的块作用域</li>\n<li>为块作用域显示创建块——在声明中的任意位置都可以使用{}来为let创建一个用于绑定的块</li>\n<li>let进行的声明不会在块作用域中进行提升</li>\n<li>垃圾收集<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function process(data)&#123;</div><div class=\"line\">    //...</div><div class=\"line\">&#125;    </div><div class=\"line\">var someReallyBigData = &#123;...&#125;;</div><div class=\"line\">process(someReallyBigData);</div><div class=\"line\">var btn = document.getElementById(&quot;my_button&quot;);</div><div class=\"line\">btn.addEventListener(&quot;click&quot;,function click(evt)&#123;</div><div class=\"line\">    console.log(&quot;button clicked&quot;);</div><div class=\"line\">&#125;,/**/false);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>click函数点击回调并不需要someReallyBigData变量。但是当process执行后，其并不一定被垃圾回收了。由于click函数形成了一个覆盖整个作用域的闭包，JavaScript引擎极可能保存着这个结构。</li>\n<li><p>块作用域用来解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function process(data)&#123;</div><div class=\"line\">    //...</div><div class=\"line\">&#125;</div><div class=\"line\">//这个块定义的内容完事可以销毁</div><div class=\"line\">&#123;    </div><div class=\"line\">    let someReallyBigData = &#123;...&#125;;</div><div class=\"line\">    process(someReallyBigData);</div><div class=\"line\">&#125;</div><div class=\"line\">var btn = document.getElementById(&quot;my_button&quot;);</div><div class=\"line\">btn.addEventListener(&quot;click&quot;,function click(evt)&#123;</div><div class=\"line\">    console.log(&quot;button clicked&quot;);</div><div class=\"line\">&#125;,/**/false);</div></pre></td></tr></table></figure>\n</li>\n<li><p>let循环</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(let i=0;i&lt;10;i++)&#123;</div><div class=\"line\">    console.log(i);</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(i); //ReferenceError</div></pre></td></tr></table></figure>\n</li>\n<li><p>for循环头部的let将i绑定到了for循环的块中。也将其重新绑定到了循环的每一次迭代中，确保使用上一次循环迭代结束时的值重新进行赋值。</p>\n</li>\n</ul>\n<h6 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h6><ul>\n<li>const可以用来创建块作用域，但其值是固定的（常量）。不可修改<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo = true;</div><div class=\"line\">if(foo)&#123;</div><div class=\"line\">    var a = 2;</div><div class=\"line\">    const b = 3; // 包含在if中的块作用域常量</div><div class=\"line\">    a = 3; // 正常</div><div class=\"line\">    b = 4; // 错误</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(a); //3</div><div class=\"line\">console.log(b); //ReferenceError</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"附加\"><a href=\"#附加\" class=\"headerlink\" title=\"附加\"></a>附加</h4><ul>\n<li>引擎会在解释JavaScript代码之前首先对其进行编译，编译阶段会找到所有的声明，并用合适的作用域将他们关联起来。</li>\n<li>所有声明（变量、函数）都会在任何代码被执行前首先被处理<h5 id=\"先声明后赋值\"><a href=\"#先声明后赋值\" class=\"headerlink\" title=\"先声明后赋值\"></a>先声明后赋值</h5></li>\n<li>只有声明本身会被提升，赋值或其他运行逻辑会留在原地<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(a);</div><div class=\"line\">var a = 2;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>会被解读为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a;</div><div class=\"line\">console.log(a); //undefined</div><div class=\"line\">a = 2;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>函数声明会被提升，但是函数表达式却不会被提升</li>\n<li>即使是具名的函数表达式，名称在标识符赋值之前也无法在所在作用域中使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo(); //TypError</div><div class=\"line\">bar(); //ReferenceError</div><div class=\"line\">var foo= funcion bar()&#123;</div><div class=\"line\">    //...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>会被解读为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var foo;</div><div class=\"line\">foo(); //TypError</div><div class=\"line\">bar(); //ReferenceError</div><div class=\"line\">foo= funcion bar()&#123;</div><div class=\"line\">    //...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h5 id=\"函数优先\"><a href=\"#函数优先\" class=\"headerlink\" title=\"函数优先\"></a>函数优先</h5><ul>\n<li>函数声明和变量声明都会被提升，函数会首先被提升，然后才是变量<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo();  //1</div><div class=\"line\">var foo;</div><div class=\"line\">function foo()&#123;</div><div class=\"line\">    console.log(1);</div><div class=\"line\">&#125;</div><div class=\"line\">foo = function()&#123;</div><div class=\"line\">    console.log(2);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>会被引擎理解为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo()&#123;</div><div class=\"line\">    console.log(1);</div><div class=\"line\">&#125;</div><div class=\"line\">foo();  //1</div><div class=\"line\">foo = function()&#123;</div><div class=\"line\">    console.log(2);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>虽然var foo出现在function foo()的声明之前，但是他是重复声明，所以被忽略了。函数声明会被提升到普通变量之前。</li>\n<li>后面的函数声明可以覆盖前面的函数声明。</li>\n<li>一个普通块内部的函数声明通常会被提升到所在作用域顶部，避免在块内部声明函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo(); //b</div><div class=\"line\">var a = true;</div><div class=\"line\">if(a)&#123;</div><div class=\"line\">    function foo()&#123;</div><div class=\"line\">        console.log(&quot;a&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">    console.log(&quot;b&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>"},{"title":"极客官网项目制作总结","date":"2017-02-27T12:15:20.000Z","_content":"> 这篇文章是为了总结了一下这个寒假的寒假作业——极客网工作室官网制作   \n\n<!-- more -->\n#### 前期准备\n这个官网是主要制作我们工作室一个展示的官网。其中分为三个小组，有前端、后台。而我，也恰巧使我们小组的组长。这也是我在这个寒假做的唯一的一件大事情。  \n\n首先，是小组进行了讨论，主要是针对需求文档，包括一些基本信息，基本功能实现、网页设计制作、人员分配等问题（因为我们只是寒假放假之后短暂的停留几天，都会各自回家，所以详细的讨论更分工就显得尤为重要）。  \n\n>大致讨论内容\n\n- 网页模式：长网 \n\n- 本机服务器：MySQL\n\n- 工具：coding、、RAP\n\n- 规范：《百度前端代码规范》\n\n  写代码命名加上自己的首字母+下划线，如税小豪（S_）\n\n  长网页每个人负责的版块用一个整的\\<div>括起来\n\n- 实现技术：HTML、CSS、JavaScript/JQuery、Java、Spring MVC、Ajax\n\n- 前后端版块实现\n  - 前端展示页\n  - 后台数据库\n  - 后台管理界面\n\n- 功能：\n  - 导航栏：首页、工作室简介、成员介绍、毕业去向、加入我们\n  - 主页：背景大图+logo+轮播\n  - 工作室简介\n  - 成员介绍(交互)\n      - 交互数据：name(成员姓名)、 img(照片地址) 、grade(年级) 、direction(技术方向 )、motto(格言) \n  - 毕业去向(交互)\n      - company(公司)\n  - 加入我们(交互)\n      - 传给后台：name(姓名) 、shoolName(学院) 、major(专业) 、studentId(学号) 、direction(技术方向)  \n    \n#### 前期准备的问题  \n- 因为我们是在学校进行讨论，准备回家后做，可是这样就出现了严重的时间效率拖延问题，以至于是最后大家提前回学校进行制作的。\n- 作为组长，我没有做好详细的分配，是我的失责  \n- 还有就是网页样式制作的准备不够，造成了我们后期对样式修改的程度比较大\n- 工具的使用没有正确。虽然用的是coding，可是前期框架没有搭好，在后期也造成了一定问题\n\n#### 正式制作  \n正式制作，我主要负责了后台管理界面和前端界面的毕业去向这一块。  \n\n>主要技术使用  \n\n这次我只是单独说一下我负责的那块的技术使用。  \n- HTML、css 两样进行了基本样式的制作\n- 用简单的css3 进行了一些动画效果的制作\n- 用jQuery写的ajax进行交互\n- 用ajax进行动态请求分页  \n\n这次我用的最多的就是ajax的交互使用，所以说，我更多的是增加了对ajax的一些熟悉度和他的基本原理。  \n\n##### 制作中的问题  \n\n- 因为之前我几乎没有接触过css3，所以并未处理好css3动画效果的兼容性\n-  ajax的代码量太大，没有做到很好的优化代码量，不过在后期的制作中，我注意到了这一点\n-  ajax的异步请求问题。前期通过了一个ES6中的promise使其纵向加载。后期也可以通过写在ajax里面进行ajax来解决问题\n-  代码比较乱，因为我们的代码展示都在同一个页面，虽然前期说了代码规范，不过后来还是出现了一些问题，而且也忘了JavaScript中将代码封装在立即执行函数中\n\n#### 总结\n这次项目是一个不大不小的项目。作为组长的我在分配以及调节方面都有不可推卸的责任，这也是我之后制作项目的一个警戒。不过看到项目完工，其实也有一种莫名的自豪感，哈哈哈，还是觉得实实在在敲代码比较好。。  \n一个寒假，原本的学习计划都没有好好执行。QAQ，新学期，我要进行新学习咯，加油，好好学习！","source":"_posts/极客官网项目制作总结.md","raw":"title: 极客官网项目制作总结\ndate: 2017-02-27 20:15:20\ntags: 技术总结\ncategories: 前端\n---\n> 这篇文章是为了总结了一下这个寒假的寒假作业——极客网工作室官网制作   \n\n<!-- more -->\n#### 前期准备\n这个官网是主要制作我们工作室一个展示的官网。其中分为三个小组，有前端、后台。而我，也恰巧使我们小组的组长。这也是我在这个寒假做的唯一的一件大事情。  \n\n首先，是小组进行了讨论，主要是针对需求文档，包括一些基本信息，基本功能实现、网页设计制作、人员分配等问题（因为我们只是寒假放假之后短暂的停留几天，都会各自回家，所以详细的讨论更分工就显得尤为重要）。  \n\n>大致讨论内容\n\n- 网页模式：长网 \n\n- 本机服务器：MySQL\n\n- 工具：coding、、RAP\n\n- 规范：《百度前端代码规范》\n\n  写代码命名加上自己的首字母+下划线，如税小豪（S_）\n\n  长网页每个人负责的版块用一个整的\\<div>括起来\n\n- 实现技术：HTML、CSS、JavaScript/JQuery、Java、Spring MVC、Ajax\n\n- 前后端版块实现\n  - 前端展示页\n  - 后台数据库\n  - 后台管理界面\n\n- 功能：\n  - 导航栏：首页、工作室简介、成员介绍、毕业去向、加入我们\n  - 主页：背景大图+logo+轮播\n  - 工作室简介\n  - 成员介绍(交互)\n      - 交互数据：name(成员姓名)、 img(照片地址) 、grade(年级) 、direction(技术方向 )、motto(格言) \n  - 毕业去向(交互)\n      - company(公司)\n  - 加入我们(交互)\n      - 传给后台：name(姓名) 、shoolName(学院) 、major(专业) 、studentId(学号) 、direction(技术方向)  \n    \n#### 前期准备的问题  \n- 因为我们是在学校进行讨论，准备回家后做，可是这样就出现了严重的时间效率拖延问题，以至于是最后大家提前回学校进行制作的。\n- 作为组长，我没有做好详细的分配，是我的失责  \n- 还有就是网页样式制作的准备不够，造成了我们后期对样式修改的程度比较大\n- 工具的使用没有正确。虽然用的是coding，可是前期框架没有搭好，在后期也造成了一定问题\n\n#### 正式制作  \n正式制作，我主要负责了后台管理界面和前端界面的毕业去向这一块。  \n\n>主要技术使用  \n\n这次我只是单独说一下我负责的那块的技术使用。  \n- HTML、css 两样进行了基本样式的制作\n- 用简单的css3 进行了一些动画效果的制作\n- 用jQuery写的ajax进行交互\n- 用ajax进行动态请求分页  \n\n这次我用的最多的就是ajax的交互使用，所以说，我更多的是增加了对ajax的一些熟悉度和他的基本原理。  \n\n##### 制作中的问题  \n\n- 因为之前我几乎没有接触过css3，所以并未处理好css3动画效果的兼容性\n-  ajax的代码量太大，没有做到很好的优化代码量，不过在后期的制作中，我注意到了这一点\n-  ajax的异步请求问题。前期通过了一个ES6中的promise使其纵向加载。后期也可以通过写在ajax里面进行ajax来解决问题\n-  代码比较乱，因为我们的代码展示都在同一个页面，虽然前期说了代码规范，不过后来还是出现了一些问题，而且也忘了JavaScript中将代码封装在立即执行函数中\n\n#### 总结\n这次项目是一个不大不小的项目。作为组长的我在分配以及调节方面都有不可推卸的责任，这也是我之后制作项目的一个警戒。不过看到项目完工，其实也有一种莫名的自豪感，哈哈哈，还是觉得实实在在敲代码比较好。。  \n一个寒假，原本的学习计划都没有好好执行。QAQ，新学期，我要进行新学习咯，加油，好好学习！","slug":"极客官网项目制作总结","published":1,"updated":"2017-08-15T12:51:49.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8c6000klso09ng4571d","content":"<blockquote>\n<p>这篇文章是为了总结了一下这个寒假的寒假作业——极客网工作室官网制作   </p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h4><p>这个官网是主要制作我们工作室一个展示的官网。其中分为三个小组，有前端、后台。而我，也恰巧使我们小组的组长。这也是我在这个寒假做的唯一的一件大事情。  </p>\n<p>首先，是小组进行了讨论，主要是针对需求文档，包括一些基本信息，基本功能实现、网页设计制作、人员分配等问题（因为我们只是寒假放假之后短暂的停留几天，都会各自回家，所以详细的讨论更分工就显得尤为重要）。  </p>\n<blockquote>\n<p>大致讨论内容</p>\n</blockquote>\n<ul>\n<li><p>网页模式：长网 </p>\n</li>\n<li><p>本机服务器：MySQL</p>\n</li>\n<li><p>工具：coding、、RAP</p>\n</li>\n<li><p>规范：《百度前端代码规范》</p>\n<p>写代码命名加上自己的首字母+下划线，如税小豪（S_）</p>\n<p>长网页每个人负责的版块用一个整的\\<div>括起来</div></p>\n</li>\n<li><p>实现技术：HTML、CSS、JavaScript/JQuery、Java、Spring MVC、Ajax</p>\n</li>\n<li><p>前后端版块实现</p>\n<ul>\n<li>前端展示页</li>\n<li>后台数据库</li>\n<li>后台管理界面</li>\n</ul>\n</li>\n<li><p>功能：</p>\n<ul>\n<li>导航栏：首页、工作室简介、成员介绍、毕业去向、加入我们</li>\n<li>主页：背景大图+logo+轮播</li>\n<li>工作室简介</li>\n<li>成员介绍(交互)<ul>\n<li>交互数据：name(成员姓名)、 img(照片地址) 、grade(年级) 、direction(技术方向 )、motto(格言) </li>\n</ul>\n</li>\n<li>毕业去向(交互)<ul>\n<li>company(公司)</li>\n</ul>\n</li>\n<li>加入我们(交互)<ul>\n<li>传给后台：name(姓名) 、shoolName(学院) 、major(专业) 、studentId(学号) 、direction(技术方向)  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"前期准备的问题\"><a href=\"#前期准备的问题\" class=\"headerlink\" title=\"前期准备的问题\"></a>前期准备的问题</h4><ul>\n<li>因为我们是在学校进行讨论，准备回家后做，可是这样就出现了严重的时间效率拖延问题，以至于是最后大家提前回学校进行制作的。</li>\n<li>作为组长，我没有做好详细的分配，是我的失责  </li>\n<li>还有就是网页样式制作的准备不够，造成了我们后期对样式修改的程度比较大</li>\n<li>工具的使用没有正确。虽然用的是coding，可是前期框架没有搭好，在后期也造成了一定问题</li>\n</ul>\n<h4 id=\"正式制作\"><a href=\"#正式制作\" class=\"headerlink\" title=\"正式制作\"></a>正式制作</h4><p>正式制作，我主要负责了后台管理界面和前端界面的毕业去向这一块。  </p>\n<blockquote>\n<p>主要技术使用  </p>\n</blockquote>\n<p>这次我只是单独说一下我负责的那块的技术使用。  </p>\n<ul>\n<li>HTML、css 两样进行了基本样式的制作</li>\n<li>用简单的css3 进行了一些动画效果的制作</li>\n<li>用jQuery写的ajax进行交互</li>\n<li>用ajax进行动态请求分页  </li>\n</ul>\n<p>这次我用的最多的就是ajax的交互使用，所以说，我更多的是增加了对ajax的一些熟悉度和他的基本原理。  </p>\n<h5 id=\"制作中的问题\"><a href=\"#制作中的问题\" class=\"headerlink\" title=\"制作中的问题\"></a>制作中的问题</h5><ul>\n<li>因为之前我几乎没有接触过css3，所以并未处理好css3动画效果的兼容性</li>\n<li>ajax的代码量太大，没有做到很好的优化代码量，不过在后期的制作中，我注意到了这一点</li>\n<li>ajax的异步请求问题。前期通过了一个ES6中的promise使其纵向加载。后期也可以通过写在ajax里面进行ajax来解决问题</li>\n<li>代码比较乱，因为我们的代码展示都在同一个页面，虽然前期说了代码规范，不过后来还是出现了一些问题，而且也忘了JavaScript中将代码封装在立即执行函数中</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>这次项目是一个不大不小的项目。作为组长的我在分配以及调节方面都有不可推卸的责任，这也是我之后制作项目的一个警戒。不过看到项目完工，其实也有一种莫名的自豪感，哈哈哈，还是觉得实实在在敲代码比较好。。<br>一个寒假，原本的学习计划都没有好好执行。QAQ，新学期，我要进行新学习咯，加油，好好学习！</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这篇文章是为了总结了一下这个寒假的寒假作业——极客网工作室官网制作   </p>\n</blockquote>","more":"<h4 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h4><p>这个官网是主要制作我们工作室一个展示的官网。其中分为三个小组，有前端、后台。而我，也恰巧使我们小组的组长。这也是我在这个寒假做的唯一的一件大事情。  </p>\n<p>首先，是小组进行了讨论，主要是针对需求文档，包括一些基本信息，基本功能实现、网页设计制作、人员分配等问题（因为我们只是寒假放假之后短暂的停留几天，都会各自回家，所以详细的讨论更分工就显得尤为重要）。  </p>\n<blockquote>\n<p>大致讨论内容</p>\n</blockquote>\n<ul>\n<li><p>网页模式：长网 </p>\n</li>\n<li><p>本机服务器：MySQL</p>\n</li>\n<li><p>工具：coding、、RAP</p>\n</li>\n<li><p>规范：《百度前端代码规范》</p>\n<p>写代码命名加上自己的首字母+下划线，如税小豪（S_）</p>\n<p>长网页每个人负责的版块用一个整的\\<div>括起来</div></p>\n</li>\n<li><p>实现技术：HTML、CSS、JavaScript/JQuery、Java、Spring MVC、Ajax</p>\n</li>\n<li><p>前后端版块实现</p>\n<ul>\n<li>前端展示页</li>\n<li>后台数据库</li>\n<li>后台管理界面</li>\n</ul>\n</li>\n<li><p>功能：</p>\n<ul>\n<li>导航栏：首页、工作室简介、成员介绍、毕业去向、加入我们</li>\n<li>主页：背景大图+logo+轮播</li>\n<li>工作室简介</li>\n<li>成员介绍(交互)<ul>\n<li>交互数据：name(成员姓名)、 img(照片地址) 、grade(年级) 、direction(技术方向 )、motto(格言) </li>\n</ul>\n</li>\n<li>毕业去向(交互)<ul>\n<li>company(公司)</li>\n</ul>\n</li>\n<li>加入我们(交互)<ul>\n<li>传给后台：name(姓名) 、shoolName(学院) 、major(专业) 、studentId(学号) 、direction(技术方向)  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"前期准备的问题\"><a href=\"#前期准备的问题\" class=\"headerlink\" title=\"前期准备的问题\"></a>前期准备的问题</h4><ul>\n<li>因为我们是在学校进行讨论，准备回家后做，可是这样就出现了严重的时间效率拖延问题，以至于是最后大家提前回学校进行制作的。</li>\n<li>作为组长，我没有做好详细的分配，是我的失责  </li>\n<li>还有就是网页样式制作的准备不够，造成了我们后期对样式修改的程度比较大</li>\n<li>工具的使用没有正确。虽然用的是coding，可是前期框架没有搭好，在后期也造成了一定问题</li>\n</ul>\n<h4 id=\"正式制作\"><a href=\"#正式制作\" class=\"headerlink\" title=\"正式制作\"></a>正式制作</h4><p>正式制作，我主要负责了后台管理界面和前端界面的毕业去向这一块。  </p>\n<blockquote>\n<p>主要技术使用  </p>\n</blockquote>\n<p>这次我只是单独说一下我负责的那块的技术使用。  </p>\n<ul>\n<li>HTML、css 两样进行了基本样式的制作</li>\n<li>用简单的css3 进行了一些动画效果的制作</li>\n<li>用jQuery写的ajax进行交互</li>\n<li>用ajax进行动态请求分页  </li>\n</ul>\n<p>这次我用的最多的就是ajax的交互使用，所以说，我更多的是增加了对ajax的一些熟悉度和他的基本原理。  </p>\n<h5 id=\"制作中的问题\"><a href=\"#制作中的问题\" class=\"headerlink\" title=\"制作中的问题\"></a>制作中的问题</h5><ul>\n<li>因为之前我几乎没有接触过css3，所以并未处理好css3动画效果的兼容性</li>\n<li>ajax的代码量太大，没有做到很好的优化代码量，不过在后期的制作中，我注意到了这一点</li>\n<li>ajax的异步请求问题。前期通过了一个ES6中的promise使其纵向加载。后期也可以通过写在ajax里面进行ajax来解决问题</li>\n<li>代码比较乱，因为我们的代码展示都在同一个页面，虽然前期说了代码规范，不过后来还是出现了一些问题，而且也忘了JavaScript中将代码封装在立即执行函数中</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>这次项目是一个不大不小的项目。作为组长的我在分配以及调节方面都有不可推卸的责任，这也是我之后制作项目的一个警戒。不过看到项目完工，其实也有一种莫名的自豪感，哈哈哈，还是觉得实实在在敲代码比较好。。<br>一个寒假，原本的学习计划都没有好好执行。QAQ，新学期，我要进行新学习咯，加油，好好学习！</p>"},{"title":"深入react技术栈-1","date":"2017-04-10T12:24:24.000Z","_content":"#### 第一章（基本介绍、JSX、React组件）\n+ react是Facebook开源在github上的JavaScript库。把用户界面抽象成一个个组件。引用了JSX语法\n<!-- more -->\n\n##### 虚拟DOM\n+ react把真实DOM树转成JavaScript对象树（虚拟DOM）。\n+ 虚拟DOM提升了react的性能。还方便和其他平台集成。\n+ react承载了构建HTML结构化页面的职责。是通过创建与更新虚拟元素来管理整个虚拟DOM。\n##### JSX\n+ 用意在于通过加入增强语法，使JavaScript更快、安全、简单。\n+ 虚拟元素的构建和更新都是在内存中完成的，并不会真正的渲染到DOM中去。\n+ react创建的虚拟元素分为DOM元素和组件元素两种。分别对应着原生DOM元素与自定义元素。\n+ 因为元素有公共的表达方法，我们就可以让元素们彼此嵌套或混合。这种层层封装的组件元素就是所谓的react组件，最终可以用递归渲染的方式构建出完全的DOM元素树。\n+ JXS是将HTML语法直接加入到JavaScript代码中，再通过翻译器转换到纯JavaScript后由浏览器执行。\n##### JSX基本语法\n+ JSX是类XML语法的ECMAScript扩展，可以说，JSX基本语法被XML囊括，但也有些许不同 \n###### XML基本语法\n+标签可以任意嵌套。可以清晰地看到DOM树状结构及其属性。\n\n```\nconst List = () =>(\n    <div>\n        <Title>title</Title>\n        <ul>\n            <li>list</li>\n            <li>list</li>\n        </ul>\n    </div>\n);\n```\n+ 注意\n    - 定义标签时，只允许被一个标签包裹。\n    - 标签一定要闭合。\n###### 元素类型\n+ HTML标签首字母为小写，对应DOM元素；反之，则对应组件元素。\n+ 依赖的组件中元素不再出现组件元素，就可以将完整的DOM树构建出来。\n+ JSX还可以通过命名空间的方法使用组件元素，可以解决组件命名冲突和对一组组件进行归类。\n+ 注释\n    +   JSX中未定义注释的转换。不过在一个组件的子元素位置使用注释要用{}包起来。\n```\n    const App={\n        <Nav>\n            {/* 节点注释*/}\n            <Person\n            /* 多行\n            注释 */\n            name={window.name}\n        </Nav>\n    }\n```\n###### 元素属性\n在JSX中，DOM和组件元素都有属性。\n+ DOM元素的属性是标准规范化属性，除了class和for。\n    + class——className\n    + for——HTMLFor\n+ 组件元素的属性是完全自定义的属性。\n+ Boolean属性\n     + 省略Boolean属性值会导致JSX任务bool值设为了true。\n+ 展开属性\n    + 如果事先不知道设置那些pros，最好不要设置。可以用ES6 rest/spread特性来提高效率\n```\n//可以将\nconst data = {name:'foo',value:'bar'};\nconst component = <Component name={data.name} value={data.value} />;\n//写为\nconst data = {name:'foo',value:'bar'};\nconst component = <Component {...data}/>;\n```\n+ 自定义HTML属性\n        + 如果在JSX中往DOM元素中传入自定义属性，react不会渲染。若要使用，要使用data-前缀。\n        + 在自定义标签中任意属性都是被支持的。\n        + 以aria-开头的网络无障碍属性同样可正常使用。\n###### JavaScript属性表达式\n+ 属性值要使用表达式，只要用{}替换\"\"即可。\n###### HTML转义\n\n##### React组件\n+ 组件封装的基本思路是面向对象思想。交互基本上以操作DOM为主，逻辑上是结构上需要改变哪里，我们就操作哪里。\n+ 规范化标准组件\n    + 基本的封装性。\n    + 简单的生命周期呈现。\n    + 明确的数据流动。数据指的是调用组件的参数。\n###### React组件的构建\n+ react组件由属性（pros）、状态（state）以及生命周期方法三个部分组成。\n+ react自定义元素是库自己建成的\n+ react渲染过程包含模板的概率，及JSX\n+ react组件的实现均在方法与类中。所有可以相互隔离，但不包括样式\n+ react引用方式遵循ES6 module标准\n###### React组件的构建方法\n+ React基本上由组件的构建方式、组件内的属性状态与生命周期方法组成。\n+ React组件的构造方法：React.createClass、ES6 classes和无状态函数。\n+    React.createClass\n    +   是Reactz=最传统、兼容性最好的方法。\n\n```\n    const Button = React.createClass({\n        getDefaultProps(){\n            return{\n                color:'blue',\n                text:'Confirm',\n            };\n        },\n\n        render(){\n            const {color,text} = this.props;\n            return(\n                <button className={`btn btn-${color}`}>\n                    <em>{text}</em>\n                </button>\n            );\n        }\n    });\n    \n```\n\n+ ES6 classes \n    + 写法是通过ES6标准的类语法的方式来构建方法\n\n```\nimport React,{Component} form 'react';\nclass Button extends Component{\n    constructor(props){\n        super(props);\n    }\n    static defaultProps = {\n        color:'blue',\n        text:'Confirm',\n    };\n    render(){\n        const {color,text} = this.props;\n        return(\n            <button className={`btn btn-${color}`}>\n                <em>{text}</em>\n            </button>\n        );\n    }\n}\n```\n+ 无状态函数\n```\nfunction Button({color='blue',text='Confirm'}){\n    return(\n        <button className={`btn btn-${color}`}>\n            <em>{text}</em>\n        </button>\n    );\n}\n```","source":"_posts/深入react技术栈-1.md","raw":"---\ntitle: 深入react技术栈-1\ndate: 2017-04-10 20:24:24\ntags: react\ncategories: 前端\n---\n#### 第一章（基本介绍、JSX、React组件）\n+ react是Facebook开源在github上的JavaScript库。把用户界面抽象成一个个组件。引用了JSX语法\n<!-- more -->\n\n##### 虚拟DOM\n+ react把真实DOM树转成JavaScript对象树（虚拟DOM）。\n+ 虚拟DOM提升了react的性能。还方便和其他平台集成。\n+ react承载了构建HTML结构化页面的职责。是通过创建与更新虚拟元素来管理整个虚拟DOM。\n##### JSX\n+ 用意在于通过加入增强语法，使JavaScript更快、安全、简单。\n+ 虚拟元素的构建和更新都是在内存中完成的，并不会真正的渲染到DOM中去。\n+ react创建的虚拟元素分为DOM元素和组件元素两种。分别对应着原生DOM元素与自定义元素。\n+ 因为元素有公共的表达方法，我们就可以让元素们彼此嵌套或混合。这种层层封装的组件元素就是所谓的react组件，最终可以用递归渲染的方式构建出完全的DOM元素树。\n+ JXS是将HTML语法直接加入到JavaScript代码中，再通过翻译器转换到纯JavaScript后由浏览器执行。\n##### JSX基本语法\n+ JSX是类XML语法的ECMAScript扩展，可以说，JSX基本语法被XML囊括，但也有些许不同 \n###### XML基本语法\n+标签可以任意嵌套。可以清晰地看到DOM树状结构及其属性。\n\n```\nconst List = () =>(\n    <div>\n        <Title>title</Title>\n        <ul>\n            <li>list</li>\n            <li>list</li>\n        </ul>\n    </div>\n);\n```\n+ 注意\n    - 定义标签时，只允许被一个标签包裹。\n    - 标签一定要闭合。\n###### 元素类型\n+ HTML标签首字母为小写，对应DOM元素；反之，则对应组件元素。\n+ 依赖的组件中元素不再出现组件元素，就可以将完整的DOM树构建出来。\n+ JSX还可以通过命名空间的方法使用组件元素，可以解决组件命名冲突和对一组组件进行归类。\n+ 注释\n    +   JSX中未定义注释的转换。不过在一个组件的子元素位置使用注释要用{}包起来。\n```\n    const App={\n        <Nav>\n            {/* 节点注释*/}\n            <Person\n            /* 多行\n            注释 */\n            name={window.name}\n        </Nav>\n    }\n```\n###### 元素属性\n在JSX中，DOM和组件元素都有属性。\n+ DOM元素的属性是标准规范化属性，除了class和for。\n    + class——className\n    + for——HTMLFor\n+ 组件元素的属性是完全自定义的属性。\n+ Boolean属性\n     + 省略Boolean属性值会导致JSX任务bool值设为了true。\n+ 展开属性\n    + 如果事先不知道设置那些pros，最好不要设置。可以用ES6 rest/spread特性来提高效率\n```\n//可以将\nconst data = {name:'foo',value:'bar'};\nconst component = <Component name={data.name} value={data.value} />;\n//写为\nconst data = {name:'foo',value:'bar'};\nconst component = <Component {...data}/>;\n```\n+ 自定义HTML属性\n        + 如果在JSX中往DOM元素中传入自定义属性，react不会渲染。若要使用，要使用data-前缀。\n        + 在自定义标签中任意属性都是被支持的。\n        + 以aria-开头的网络无障碍属性同样可正常使用。\n###### JavaScript属性表达式\n+ 属性值要使用表达式，只要用{}替换\"\"即可。\n###### HTML转义\n\n##### React组件\n+ 组件封装的基本思路是面向对象思想。交互基本上以操作DOM为主，逻辑上是结构上需要改变哪里，我们就操作哪里。\n+ 规范化标准组件\n    + 基本的封装性。\n    + 简单的生命周期呈现。\n    + 明确的数据流动。数据指的是调用组件的参数。\n###### React组件的构建\n+ react组件由属性（pros）、状态（state）以及生命周期方法三个部分组成。\n+ react自定义元素是库自己建成的\n+ react渲染过程包含模板的概率，及JSX\n+ react组件的实现均在方法与类中。所有可以相互隔离，但不包括样式\n+ react引用方式遵循ES6 module标准\n###### React组件的构建方法\n+ React基本上由组件的构建方式、组件内的属性状态与生命周期方法组成。\n+ React组件的构造方法：React.createClass、ES6 classes和无状态函数。\n+    React.createClass\n    +   是Reactz=最传统、兼容性最好的方法。\n\n```\n    const Button = React.createClass({\n        getDefaultProps(){\n            return{\n                color:'blue',\n                text:'Confirm',\n            };\n        },\n\n        render(){\n            const {color,text} = this.props;\n            return(\n                <button className={`btn btn-${color}`}>\n                    <em>{text}</em>\n                </button>\n            );\n        }\n    });\n    \n```\n\n+ ES6 classes \n    + 写法是通过ES6标准的类语法的方式来构建方法\n\n```\nimport React,{Component} form 'react';\nclass Button extends Component{\n    constructor(props){\n        super(props);\n    }\n    static defaultProps = {\n        color:'blue',\n        text:'Confirm',\n    };\n    render(){\n        const {color,text} = this.props;\n        return(\n            <button className={`btn btn-${color}`}>\n                <em>{text}</em>\n            </button>\n        );\n    }\n}\n```\n+ 无状态函数\n```\nfunction Button({color='blue',text='Confirm'}){\n    return(\n        <button className={`btn btn-${color}`}>\n            <em>{text}</em>\n        </button>\n    );\n}\n```","slug":"深入react技术栈-1","published":1,"updated":"2017-08-15T12:51:49.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8ci000plso0ufm1cefi","content":"<h4 id=\"第一章（基本介绍、JSX、React组件）\"><a href=\"#第一章（基本介绍、JSX、React组件）\" class=\"headerlink\" title=\"第一章（基本介绍、JSX、React组件）\"></a>第一章（基本介绍、JSX、React组件）</h4><ul>\n<li>react是Facebook开源在github上的JavaScript库。把用户界面抽象成一个个组件。引用了JSX语法<a id=\"more\"></a>\n</li>\n</ul>\n<h5 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h5><ul>\n<li>react把真实DOM树转成JavaScript对象树（虚拟DOM）。</li>\n<li>虚拟DOM提升了react的性能。还方便和其他平台集成。</li>\n<li>react承载了构建HTML结构化页面的职责。是通过创建与更新虚拟元素来管理整个虚拟DOM。<h5 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h5></li>\n<li>用意在于通过加入增强语法，使JavaScript更快、安全、简单。</li>\n<li>虚拟元素的构建和更新都是在内存中完成的，并不会真正的渲染到DOM中去。</li>\n<li>react创建的虚拟元素分为DOM元素和组件元素两种。分别对应着原生DOM元素与自定义元素。</li>\n<li>因为元素有公共的表达方法，我们就可以让元素们彼此嵌套或混合。这种层层封装的组件元素就是所谓的react组件，最终可以用递归渲染的方式构建出完全的DOM元素树。</li>\n<li>JXS是将HTML语法直接加入到JavaScript代码中，再通过翻译器转换到纯JavaScript后由浏览器执行。<h5 id=\"JSX基本语法\"><a href=\"#JSX基本语法\" class=\"headerlink\" title=\"JSX基本语法\"></a>JSX基本语法</h5></li>\n<li>JSX是类XML语法的ECMAScript扩展，可以说，JSX基本语法被XML囊括，但也有些许不同 <h6 id=\"XML基本语法\"><a href=\"#XML基本语法\" class=\"headerlink\" title=\"XML基本语法\"></a>XML基本语法</h6>+标签可以任意嵌套。可以清晰地看到DOM树状结构及其属性。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const List = () =&gt;(</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &lt;Title&gt;title&lt;/Title&gt;</div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\">            &lt;li&gt;list&lt;/li&gt;</div><div class=\"line\">            &lt;li&gt;list&lt;/li&gt;</div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<ul>\n<li>注意<ul>\n<li>定义标签时，只允许被一个标签包裹。</li>\n<li>标签一定要闭合。<h6 id=\"元素类型\"><a href=\"#元素类型\" class=\"headerlink\" title=\"元素类型\"></a>元素类型</h6></li>\n</ul>\n</li>\n<li>HTML标签首字母为小写，对应DOM元素；反之，则对应组件元素。</li>\n<li>依赖的组件中元素不再出现组件元素，就可以将完整的DOM树构建出来。</li>\n<li>JSX还可以通过命名空间的方法使用组件元素，可以解决组件命名冲突和对一组组件进行归类。</li>\n<li>注释<ul>\n<li>JSX中未定义注释的转换。不过在一个组件的子元素位置使用注释要用{}包起来。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App=&#123;</div><div class=\"line\">    &lt;Nav&gt;</div><div class=\"line\">        &#123;/* 节点注释*/&#125;</div><div class=\"line\">        &lt;Person</div><div class=\"line\">        /* 多行</div><div class=\"line\">        注释 */</div><div class=\"line\">        name=&#123;window.name&#125;</div><div class=\"line\">    &lt;/Nav&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"元素属性\"><a href=\"#元素属性\" class=\"headerlink\" title=\"元素属性\"></a>元素属性</h6><p>在JSX中，DOM和组件元素都有属性。</p>\n<ul>\n<li>DOM元素的属性是标准规范化属性，除了class和for。<ul>\n<li>class——className</li>\n<li>for——HTMLFor</li>\n</ul>\n</li>\n<li>组件元素的属性是完全自定义的属性。</li>\n<li>Boolean属性<ul>\n<li>省略Boolean属性值会导致JSX任务bool值设为了true。</li>\n</ul>\n</li>\n<li><p>展开属性</p>\n<ul>\n<li>如果事先不知道设置那些pros，最好不要设置。可以用ES6 rest/spread特性来提高效率<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//可以将</div><div class=\"line\">const data = &#123;name:&apos;foo&apos;,value:&apos;bar&apos;&#125;;</div><div class=\"line\">const component = &lt;Component name=&#123;data.name&#125; value=&#123;data.value&#125; /&gt;;</div><div class=\"line\">//写为</div><div class=\"line\">const data = &#123;name:&apos;foo&apos;,value:&apos;bar&apos;&#125;;</div><div class=\"line\">const component = &lt;Component &#123;...data&#125;/&gt;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>自定义HTML属性</p>\n<pre><code>+ 如果在JSX中往DOM元素中传入自定义属性，react不会渲染。若要使用，要使用data-前缀。\n+ 在自定义标签中任意属性都是被支持的。\n+ 以aria-开头的网络无障碍属性同样可正常使用。\n</code></pre><h6 id=\"JavaScript属性表达式\"><a href=\"#JavaScript属性表达式\" class=\"headerlink\" title=\"JavaScript属性表达式\"></a>JavaScript属性表达式</h6></li>\n<li>属性值要使用表达式，只要用{}替换””即可。<h6 id=\"HTML转义\"><a href=\"#HTML转义\" class=\"headerlink\" title=\"HTML转义\"></a>HTML转义</h6></li>\n</ul>\n<h5 id=\"React组件\"><a href=\"#React组件\" class=\"headerlink\" title=\"React组件\"></a>React组件</h5><ul>\n<li>组件封装的基本思路是面向对象思想。交互基本上以操作DOM为主，逻辑上是结构上需要改变哪里，我们就操作哪里。</li>\n<li>规范化标准组件<ul>\n<li>基本的封装性。</li>\n<li>简单的生命周期呈现。</li>\n<li>明确的数据流动。数据指的是调用组件的参数。<h6 id=\"React组件的构建\"><a href=\"#React组件的构建\" class=\"headerlink\" title=\"React组件的构建\"></a>React组件的构建</h6></li>\n</ul>\n</li>\n<li>react组件由属性（pros）、状态（state）以及生命周期方法三个部分组成。</li>\n<li>react自定义元素是库自己建成的</li>\n<li>react渲染过程包含模板的概率，及JSX</li>\n<li>react组件的实现均在方法与类中。所有可以相互隔离，但不包括样式</li>\n<li>react引用方式遵循ES6 module标准<h6 id=\"React组件的构建方法\"><a href=\"#React组件的构建方法\" class=\"headerlink\" title=\"React组件的构建方法\"></a>React组件的构建方法</h6></li>\n<li>React基本上由组件的构建方式、组件内的属性状态与生命周期方法组成。</li>\n<li>React组件的构造方法：React.createClass、ES6 classes和无状态函数。</li>\n<li>React.createClass<ul>\n<li>是Reactz=最传统、兼容性最好的方法。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Button = React.createClass(&#123;</div><div class=\"line\">    getDefaultProps()&#123;</div><div class=\"line\">        return&#123;</div><div class=\"line\">            color:&apos;blue&apos;,</div><div class=\"line\">            text:&apos;Confirm&apos;,</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    render()&#123;</div><div class=\"line\">        const &#123;color,text&#125; = this.props;</div><div class=\"line\">        return(</div><div class=\"line\">            &lt;button className=&#123;`btn btn-$&#123;color&#125;`&#125;&gt;</div><div class=\"line\">                &lt;em&gt;&#123;text&#125;&lt;/em&gt;</div><div class=\"line\">            &lt;/button&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>ES6 classes <ul>\n<li>写法是通过ES6标准的类语法的方式来构建方法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React,&#123;Component&#125; form &apos;react&apos;;</div><div class=\"line\">class Button extends Component&#123;</div><div class=\"line\">    constructor(props)&#123;</div><div class=\"line\">        super(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    static defaultProps = &#123;</div><div class=\"line\">        color:&apos;blue&apos;,</div><div class=\"line\">        text:&apos;Confirm&apos;,</div><div class=\"line\">    &#125;;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        const &#123;color,text&#125; = this.props;</div><div class=\"line\">        return(</div><div class=\"line\">            &lt;button className=&#123;`btn btn-$&#123;color&#125;`&#125;&gt;</div><div class=\"line\">                &lt;em&gt;&#123;text&#125;&lt;/em&gt;</div><div class=\"line\">            &lt;/button&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>无状态函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Button(&#123;color=&apos;blue&apos;,text=&apos;Confirm&apos;&#125;)&#123;</div><div class=\"line\">    return(</div><div class=\"line\">        &lt;button className=&#123;`btn btn-$&#123;color&#125;`&#125;&gt;</div><div class=\"line\">            &lt;em&gt;&#123;text&#125;&lt;/em&gt;</div><div class=\"line\">        &lt;/button&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"第一章（基本介绍、JSX、React组件）\"><a href=\"#第一章（基本介绍、JSX、React组件）\" class=\"headerlink\" title=\"第一章（基本介绍、JSX、React组件）\"></a>第一章（基本介绍、JSX、React组件）</h4><ul>\n<li>react是Facebook开源在github上的JavaScript库。把用户界面抽象成一个个组件。引用了JSX语法","more":"</li>\n</ul>\n<h5 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h5><ul>\n<li>react把真实DOM树转成JavaScript对象树（虚拟DOM）。</li>\n<li>虚拟DOM提升了react的性能。还方便和其他平台集成。</li>\n<li>react承载了构建HTML结构化页面的职责。是通过创建与更新虚拟元素来管理整个虚拟DOM。<h5 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h5></li>\n<li>用意在于通过加入增强语法，使JavaScript更快、安全、简单。</li>\n<li>虚拟元素的构建和更新都是在内存中完成的，并不会真正的渲染到DOM中去。</li>\n<li>react创建的虚拟元素分为DOM元素和组件元素两种。分别对应着原生DOM元素与自定义元素。</li>\n<li>因为元素有公共的表达方法，我们就可以让元素们彼此嵌套或混合。这种层层封装的组件元素就是所谓的react组件，最终可以用递归渲染的方式构建出完全的DOM元素树。</li>\n<li>JXS是将HTML语法直接加入到JavaScript代码中，再通过翻译器转换到纯JavaScript后由浏览器执行。<h5 id=\"JSX基本语法\"><a href=\"#JSX基本语法\" class=\"headerlink\" title=\"JSX基本语法\"></a>JSX基本语法</h5></li>\n<li>JSX是类XML语法的ECMAScript扩展，可以说，JSX基本语法被XML囊括，但也有些许不同 <h6 id=\"XML基本语法\"><a href=\"#XML基本语法\" class=\"headerlink\" title=\"XML基本语法\"></a>XML基本语法</h6>+标签可以任意嵌套。可以清晰地看到DOM树状结构及其属性。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const List = () =&gt;(</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &lt;Title&gt;title&lt;/Title&gt;</div><div class=\"line\">        &lt;ul&gt;</div><div class=\"line\">            &lt;li&gt;list&lt;/li&gt;</div><div class=\"line\">            &lt;li&gt;list&lt;/li&gt;</div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<ul>\n<li>注意<ul>\n<li>定义标签时，只允许被一个标签包裹。</li>\n<li>标签一定要闭合。<h6 id=\"元素类型\"><a href=\"#元素类型\" class=\"headerlink\" title=\"元素类型\"></a>元素类型</h6></li>\n</ul>\n</li>\n<li>HTML标签首字母为小写，对应DOM元素；反之，则对应组件元素。</li>\n<li>依赖的组件中元素不再出现组件元素，就可以将完整的DOM树构建出来。</li>\n<li>JSX还可以通过命名空间的方法使用组件元素，可以解决组件命名冲突和对一组组件进行归类。</li>\n<li>注释<ul>\n<li>JSX中未定义注释的转换。不过在一个组件的子元素位置使用注释要用{}包起来。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const App=&#123;</div><div class=\"line\">    &lt;Nav&gt;</div><div class=\"line\">        &#123;/* 节点注释*/&#125;</div><div class=\"line\">        &lt;Person</div><div class=\"line\">        /* 多行</div><div class=\"line\">        注释 */</div><div class=\"line\">        name=&#123;window.name&#125;</div><div class=\"line\">    &lt;/Nav&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"元素属性\"><a href=\"#元素属性\" class=\"headerlink\" title=\"元素属性\"></a>元素属性</h6><p>在JSX中，DOM和组件元素都有属性。</p>\n<ul>\n<li>DOM元素的属性是标准规范化属性，除了class和for。<ul>\n<li>class——className</li>\n<li>for——HTMLFor</li>\n</ul>\n</li>\n<li>组件元素的属性是完全自定义的属性。</li>\n<li>Boolean属性<ul>\n<li>省略Boolean属性值会导致JSX任务bool值设为了true。</li>\n</ul>\n</li>\n<li><p>展开属性</p>\n<ul>\n<li>如果事先不知道设置那些pros，最好不要设置。可以用ES6 rest/spread特性来提高效率<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//可以将</div><div class=\"line\">const data = &#123;name:&apos;foo&apos;,value:&apos;bar&apos;&#125;;</div><div class=\"line\">const component = &lt;Component name=&#123;data.name&#125; value=&#123;data.value&#125; /&gt;;</div><div class=\"line\">//写为</div><div class=\"line\">const data = &#123;name:&apos;foo&apos;,value:&apos;bar&apos;&#125;;</div><div class=\"line\">const component = &lt;Component &#123;...data&#125;/&gt;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>自定义HTML属性</p>\n<pre><code>+ 如果在JSX中往DOM元素中传入自定义属性，react不会渲染。若要使用，要使用data-前缀。\n+ 在自定义标签中任意属性都是被支持的。\n+ 以aria-开头的网络无障碍属性同样可正常使用。\n</code></pre><h6 id=\"JavaScript属性表达式\"><a href=\"#JavaScript属性表达式\" class=\"headerlink\" title=\"JavaScript属性表达式\"></a>JavaScript属性表达式</h6></li>\n<li>属性值要使用表达式，只要用{}替换””即可。<h6 id=\"HTML转义\"><a href=\"#HTML转义\" class=\"headerlink\" title=\"HTML转义\"></a>HTML转义</h6></li>\n</ul>\n<h5 id=\"React组件\"><a href=\"#React组件\" class=\"headerlink\" title=\"React组件\"></a>React组件</h5><ul>\n<li>组件封装的基本思路是面向对象思想。交互基本上以操作DOM为主，逻辑上是结构上需要改变哪里，我们就操作哪里。</li>\n<li>规范化标准组件<ul>\n<li>基本的封装性。</li>\n<li>简单的生命周期呈现。</li>\n<li>明确的数据流动。数据指的是调用组件的参数。<h6 id=\"React组件的构建\"><a href=\"#React组件的构建\" class=\"headerlink\" title=\"React组件的构建\"></a>React组件的构建</h6></li>\n</ul>\n</li>\n<li>react组件由属性（pros）、状态（state）以及生命周期方法三个部分组成。</li>\n<li>react自定义元素是库自己建成的</li>\n<li>react渲染过程包含模板的概率，及JSX</li>\n<li>react组件的实现均在方法与类中。所有可以相互隔离，但不包括样式</li>\n<li>react引用方式遵循ES6 module标准<h6 id=\"React组件的构建方法\"><a href=\"#React组件的构建方法\" class=\"headerlink\" title=\"React组件的构建方法\"></a>React组件的构建方法</h6></li>\n<li>React基本上由组件的构建方式、组件内的属性状态与生命周期方法组成。</li>\n<li>React组件的构造方法：React.createClass、ES6 classes和无状态函数。</li>\n<li>React.createClass<ul>\n<li>是Reactz=最传统、兼容性最好的方法。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Button = React.createClass(&#123;</div><div class=\"line\">    getDefaultProps()&#123;</div><div class=\"line\">        return&#123;</div><div class=\"line\">            color:&apos;blue&apos;,</div><div class=\"line\">            text:&apos;Confirm&apos;,</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    render()&#123;</div><div class=\"line\">        const &#123;color,text&#125; = this.props;</div><div class=\"line\">        return(</div><div class=\"line\">            &lt;button className=&#123;`btn btn-$&#123;color&#125;`&#125;&gt;</div><div class=\"line\">                &lt;em&gt;&#123;text&#125;&lt;/em&gt;</div><div class=\"line\">            &lt;/button&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>ES6 classes <ul>\n<li>写法是通过ES6标准的类语法的方式来构建方法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React,&#123;Component&#125; form &apos;react&apos;;</div><div class=\"line\">class Button extends Component&#123;</div><div class=\"line\">    constructor(props)&#123;</div><div class=\"line\">        super(props);</div><div class=\"line\">    &#125;</div><div class=\"line\">    static defaultProps = &#123;</div><div class=\"line\">        color:&apos;blue&apos;,</div><div class=\"line\">        text:&apos;Confirm&apos;,</div><div class=\"line\">    &#125;;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        const &#123;color,text&#125; = this.props;</div><div class=\"line\">        return(</div><div class=\"line\">            &lt;button className=&#123;`btn btn-$&#123;color&#125;`&#125;&gt;</div><div class=\"line\">                &lt;em&gt;&#123;text&#125;&lt;/em&gt;</div><div class=\"line\">            &lt;/button&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>无状态函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Button(&#123;color=&apos;blue&apos;,text=&apos;Confirm&apos;&#125;)&#123;</div><div class=\"line\">    return(</div><div class=\"line\">        &lt;button className=&#123;`btn btn-$&#123;color&#125;`&#125;&gt;</div><div class=\"line\">            &lt;em&gt;&#123;text&#125;&lt;/em&gt;</div><div class=\"line\">        &lt;/button&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>"},{"title":"深入react技术栈-2","date":"2017-04-10T12:31:30.000Z","_content":"#### 第一章（Raact数据流、React生命周期、React与DOM）\n##### React数据流\n在React中，数据是自项向下单向流动的。即从父组件到子组件。\n+ 如果顶层组件初始化props，那么React会向下遍历整棵组件树，重新尝试渲染所有相关的子组件。而state只关心每个组件自己的内部的状态，这些状态只能在组件内改变。\n<!-- more -->\n###### state\n+ 当组件内部使用库内置的setState方法时，最大的表现行为就是该组合会尝试重新渲染。\n```\nimport React,{Component} form 'react';\nclass Counter extends Component{\n    constructor(pros){\n        super(props);\n        this.state = {\n            count:0,\n        };\n    }\n    handleClick(e){\n        e.preventDefault();\n        this.setState({\n            count : this.state.count + 1,\n        });\n    }\n    render(){\n        renturn(\n            <div>\n                <p>{this.state.count}</p>\n                <a href=\"#\" onClick={this.handleClick}>更新</a>\n            </div>\n        );\n    }\n}\n```\n上述例子是通过点击“更新”按钮不断的更新内部值。把组件内状态封装在现实中。\n+ setState 是一个异步方法。一个生命周期内所有的setState方法会合并操作。\n\n###### props\n+ 是react用来让组件之间相互联系的一种机制。\n+ react的单向数据流，主要的流动管道是props。其本身不可变的，组件的props一定来自默认属性或者通过父组件传递而来。\n+ 组件的部分props\n    + className：根节点的class。\n    + classPrefix：class的统一前缀。有助于对样式与交互分离。\n    + defaultActiveIndex和activeIndex：默认的激活索引。\n    + onChange：回调函数。一般与activeIndex搭配使用。\n+ react为props提供了默认配置，可通过defaultProps静态变量的方式定义。\n```\nstatic defaultProps ={\n    classPrefix:'',\n    onChange:()=>{},\n};\n```\n+ 子组件prop\n    + 在react中有一个重要且内置的prop——children，代表组件的子组件集合。\n    + React.Children是React官方提供的一系列操作children的方法。提供诸如map、forEach、count等实用函数。\n+ 组件props\n+ 用function prop与父组件通信\n    + 对于state，它的通信集中在组件内部。对于props，它的通信是父组件向子组件的传播。\n+ propType\n    + 用于规范props的类型与必需的状态。若组件定义了propType，那么在开发环境下，就会对组件的props值的类型作检查。  \n\n##### React生命周期\n react组件的生命周期分为挂载、渲染和卸载。\n \n###### 挂载或卸载过程\n+ 组件的挂载\n    + 主要做组件状态的初始化\n    ```\n    import React,{Component,PropTypes} form 'react';\n    class App extends Component{\n        static propTypes={\n            //...\n        };\n        static defaultProps={\n            //...\n        };\n        constructor(props){\n            super(props);\n            this.state={\n                //...\n            };\n        }\n        componentWillMount(){\n            //...\n        }\n        componentDidMount(){\n        //...\n        }\n        render(){\n            return <div>This is a demo.</div>;\n        }\n    }\n    \n    ```\n+ 两个生命周期方法\n    + componentWillMount，在render方法之前执行。（渲染前）\n    + componentDidMount，在render方法之后执行。（渲染后）\n+ 执行setState方法\n    + 在componentWillMount中，组件会更新state，但组件只渲染一次。无意义的执行\n    + 在componentDidMount中，组件会再次更新，在初始化过程中就渲染了两次。\n+ 组件的卸载\n    + 只有componentWillMount这一个卸载前状态。\n\n###### 数据更新过程\n+ 指的是父组件向下传递props或组件自身执行setState方法时发生的一系列更新动作。\n```\nimport React,{Component,PropTypes} from 'react';\nclass App extends Component{\n    componentWillReceiveProps(nextProps){\n        //this.setState({})\n    }\n    shouldComponentUpdate(nextProps,nextState){\n        //...\n    }\n    componentWillUpdate(nextProps,nextState){\n        //...\n    }\n    componentDidUpdate(prevProps,prevState){\n        //...\n    }\n    render(){\n        return <div>This is a demo.</div>\n    }\n}\n```\n+ 组件自身的state更新，会依次执行shouldComponentUpdate、componentWillUpdate、rebder和componentDidUpdate。\n+ shouldComponentUpdate 接收需要更新的props和state。开发者加入必要的条件判断，当方法返回false，组件不再向下执行生命周期方法。\n+ componentWillUpdate方法提供需要更新的props和state，代表更新过程中渲染前时刻；componentDidUpdate方法提供更新前的props和state，代表更新过程中渲染后时刻。\n+ 如果组件是由父组件更新props而更新的，那么在shouldComponentUpdate之前会先执行componentWillReceiveProps方法。在此方法中调用setState不会有二次渲染。\n\n##### React与DOM\n+ 在组件开实现中，不会用到ReactDOM，只有在顶层组件以及由于React模型所限而不得不操作DOM的时候，才会用。\n\n###### ReactDOM\n+ findDOMNode\n    + React提供的获取DOM元素的方法。\n    ```\n    DOMElement findDOMNode(ReactComponent component)\n    ```\n    + 当组件被渲染到DOM中之后，findDOMNode返回该React组件实例相应的DOM节点。它可以用于获取表单的value以及用于DOM的测量。\n    ```\n    //当前组件加载完时获取当前DOM\n    import React,{Component} from 'react';\n    import ReactDOM from 'react-dom';\n    class App extends Component{\n        componentDidMount(){\n            //this为当前组件实例\n            const dom = ReactDOM.findDOMNode(this);\n        }\n        render(){}\n    }\n    ```\n    + findDOMNode只对已经挂载的组件有效。\n+ render\n    + 用于把React渲染的Virtual DOM渲染到浏览器的DOM当中。\n    ```\n    ReactComponent render(\n        ReactElement element,\n        DOMElement container,\n        [function callback]\n    )\n    ```\n    + 该方法把元素挂载到container中，并返回element实例（refs引用）。如果是无状态组件，render会返回null，当组件装载完毕时，callback就会被调用。\n    + 再次更新时，React不会把组件重新渲染，而是用DOM diff算法做局部更新。\n    \n###### ReactDOM的不稳定方法\n + 有两种不稳定方法\n\n###### refs\n+ 组件中特殊的prop，可以附加到任何一个组件上。组件被调用时会指向一个实例，而refs会指向这个实例。\n+ 可以是一个回调函数，这个回调函数会在组件挂载之后立即执行。\n+  refs同样支持字符串，对于DOM操作，不仅可以使用findDOMNode获得该组件DOM，还可以使用refs获得组件内部的DOM。\n\n###### React之外的DOM操作\n+ React的 声明式渲染机制把复杂的DOM操作抽象为简单的state和props的操作，因此避免了很多直接的DOM操作。不过，仍有一些DOM操作是React无法避免的。","source":"_posts/深入react技术栈-2.md","raw":"---\ntitle: 深入react技术栈-2\ndate: 2017-04-10 20:31:30\ntags: react\ncategories: 前端\n---\n#### 第一章（Raact数据流、React生命周期、React与DOM）\n##### React数据流\n在React中，数据是自项向下单向流动的。即从父组件到子组件。\n+ 如果顶层组件初始化props，那么React会向下遍历整棵组件树，重新尝试渲染所有相关的子组件。而state只关心每个组件自己的内部的状态，这些状态只能在组件内改变。\n<!-- more -->\n###### state\n+ 当组件内部使用库内置的setState方法时，最大的表现行为就是该组合会尝试重新渲染。\n```\nimport React,{Component} form 'react';\nclass Counter extends Component{\n    constructor(pros){\n        super(props);\n        this.state = {\n            count:0,\n        };\n    }\n    handleClick(e){\n        e.preventDefault();\n        this.setState({\n            count : this.state.count + 1,\n        });\n    }\n    render(){\n        renturn(\n            <div>\n                <p>{this.state.count}</p>\n                <a href=\"#\" onClick={this.handleClick}>更新</a>\n            </div>\n        );\n    }\n}\n```\n上述例子是通过点击“更新”按钮不断的更新内部值。把组件内状态封装在现实中。\n+ setState 是一个异步方法。一个生命周期内所有的setState方法会合并操作。\n\n###### props\n+ 是react用来让组件之间相互联系的一种机制。\n+ react的单向数据流，主要的流动管道是props。其本身不可变的，组件的props一定来自默认属性或者通过父组件传递而来。\n+ 组件的部分props\n    + className：根节点的class。\n    + classPrefix：class的统一前缀。有助于对样式与交互分离。\n    + defaultActiveIndex和activeIndex：默认的激活索引。\n    + onChange：回调函数。一般与activeIndex搭配使用。\n+ react为props提供了默认配置，可通过defaultProps静态变量的方式定义。\n```\nstatic defaultProps ={\n    classPrefix:'',\n    onChange:()=>{},\n};\n```\n+ 子组件prop\n    + 在react中有一个重要且内置的prop——children，代表组件的子组件集合。\n    + React.Children是React官方提供的一系列操作children的方法。提供诸如map、forEach、count等实用函数。\n+ 组件props\n+ 用function prop与父组件通信\n    + 对于state，它的通信集中在组件内部。对于props，它的通信是父组件向子组件的传播。\n+ propType\n    + 用于规范props的类型与必需的状态。若组件定义了propType，那么在开发环境下，就会对组件的props值的类型作检查。  \n\n##### React生命周期\n react组件的生命周期分为挂载、渲染和卸载。\n \n###### 挂载或卸载过程\n+ 组件的挂载\n    + 主要做组件状态的初始化\n    ```\n    import React,{Component,PropTypes} form 'react';\n    class App extends Component{\n        static propTypes={\n            //...\n        };\n        static defaultProps={\n            //...\n        };\n        constructor(props){\n            super(props);\n            this.state={\n                //...\n            };\n        }\n        componentWillMount(){\n            //...\n        }\n        componentDidMount(){\n        //...\n        }\n        render(){\n            return <div>This is a demo.</div>;\n        }\n    }\n    \n    ```\n+ 两个生命周期方法\n    + componentWillMount，在render方法之前执行。（渲染前）\n    + componentDidMount，在render方法之后执行。（渲染后）\n+ 执行setState方法\n    + 在componentWillMount中，组件会更新state，但组件只渲染一次。无意义的执行\n    + 在componentDidMount中，组件会再次更新，在初始化过程中就渲染了两次。\n+ 组件的卸载\n    + 只有componentWillMount这一个卸载前状态。\n\n###### 数据更新过程\n+ 指的是父组件向下传递props或组件自身执行setState方法时发生的一系列更新动作。\n```\nimport React,{Component,PropTypes} from 'react';\nclass App extends Component{\n    componentWillReceiveProps(nextProps){\n        //this.setState({})\n    }\n    shouldComponentUpdate(nextProps,nextState){\n        //...\n    }\n    componentWillUpdate(nextProps,nextState){\n        //...\n    }\n    componentDidUpdate(prevProps,prevState){\n        //...\n    }\n    render(){\n        return <div>This is a demo.</div>\n    }\n}\n```\n+ 组件自身的state更新，会依次执行shouldComponentUpdate、componentWillUpdate、rebder和componentDidUpdate。\n+ shouldComponentUpdate 接收需要更新的props和state。开发者加入必要的条件判断，当方法返回false，组件不再向下执行生命周期方法。\n+ componentWillUpdate方法提供需要更新的props和state，代表更新过程中渲染前时刻；componentDidUpdate方法提供更新前的props和state，代表更新过程中渲染后时刻。\n+ 如果组件是由父组件更新props而更新的，那么在shouldComponentUpdate之前会先执行componentWillReceiveProps方法。在此方法中调用setState不会有二次渲染。\n\n##### React与DOM\n+ 在组件开实现中，不会用到ReactDOM，只有在顶层组件以及由于React模型所限而不得不操作DOM的时候，才会用。\n\n###### ReactDOM\n+ findDOMNode\n    + React提供的获取DOM元素的方法。\n    ```\n    DOMElement findDOMNode(ReactComponent component)\n    ```\n    + 当组件被渲染到DOM中之后，findDOMNode返回该React组件实例相应的DOM节点。它可以用于获取表单的value以及用于DOM的测量。\n    ```\n    //当前组件加载完时获取当前DOM\n    import React,{Component} from 'react';\n    import ReactDOM from 'react-dom';\n    class App extends Component{\n        componentDidMount(){\n            //this为当前组件实例\n            const dom = ReactDOM.findDOMNode(this);\n        }\n        render(){}\n    }\n    ```\n    + findDOMNode只对已经挂载的组件有效。\n+ render\n    + 用于把React渲染的Virtual DOM渲染到浏览器的DOM当中。\n    ```\n    ReactComponent render(\n        ReactElement element,\n        DOMElement container,\n        [function callback]\n    )\n    ```\n    + 该方法把元素挂载到container中，并返回element实例（refs引用）。如果是无状态组件，render会返回null，当组件装载完毕时，callback就会被调用。\n    + 再次更新时，React不会把组件重新渲染，而是用DOM diff算法做局部更新。\n    \n###### ReactDOM的不稳定方法\n + 有两种不稳定方法\n\n###### refs\n+ 组件中特殊的prop，可以附加到任何一个组件上。组件被调用时会指向一个实例，而refs会指向这个实例。\n+ 可以是一个回调函数，这个回调函数会在组件挂载之后立即执行。\n+  refs同样支持字符串，对于DOM操作，不仅可以使用findDOMNode获得该组件DOM，还可以使用refs获得组件内部的DOM。\n\n###### React之外的DOM操作\n+ React的 声明式渲染机制把复杂的DOM操作抽象为简单的state和props的操作，因此避免了很多直接的DOM操作。不过，仍有一些DOM操作是React无法避免的。","slug":"深入react技术栈-2","published":1,"updated":"2017-08-15T12:51:49.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8co000slso01v9zkdfl","content":"<h4 id=\"第一章（Raact数据流、React生命周期、React与DOM）\"><a href=\"#第一章（Raact数据流、React生命周期、React与DOM）\" class=\"headerlink\" title=\"第一章（Raact数据流、React生命周期、React与DOM）\"></a>第一章（Raact数据流、React生命周期、React与DOM）</h4><h5 id=\"React数据流\"><a href=\"#React数据流\" class=\"headerlink\" title=\"React数据流\"></a>React数据流</h5><p>在React中，数据是自项向下单向流动的。即从父组件到子组件。</p>\n<ul>\n<li>如果顶层组件初始化props，那么React会向下遍历整棵组件树，重新尝试渲染所有相关的子组件。而state只关心每个组件自己的内部的状态，这些状态只能在组件内改变。<a id=\"more\"></a>\n<h6 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h6></li>\n<li>当组件内部使用库内置的setState方法时，最大的表现行为就是该组合会尝试重新渲染。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React,&#123;Component&#125; form &apos;react&apos;;</div><div class=\"line\">class Counter extends Component&#123;</div><div class=\"line\">    constructor(pros)&#123;</div><div class=\"line\">        super(props);</div><div class=\"line\">        this.state = &#123;</div><div class=\"line\">            count:0,</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    handleClick(e)&#123;</div><div class=\"line\">        e.preventDefault();</div><div class=\"line\">        this.setState(&#123;</div><div class=\"line\">            count : this.state.count + 1,</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        renturn(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;p&gt;&#123;this.state.count&#125;&lt;/p&gt;</div><div class=\"line\">                &lt;a href=&quot;#&quot; onClick=&#123;this.handleClick&#125;&gt;更新&lt;/a&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上述例子是通过点击“更新”按钮不断的更新内部值。把组件内状态封装在现实中。</p>\n<ul>\n<li>setState 是一个异步方法。一个生命周期内所有的setState方法会合并操作。</li>\n</ul>\n<h6 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h6><ul>\n<li>是react用来让组件之间相互联系的一种机制。</li>\n<li>react的单向数据流，主要的流动管道是props。其本身不可变的，组件的props一定来自默认属性或者通过父组件传递而来。</li>\n<li>组件的部分props<ul>\n<li>className：根节点的class。</li>\n<li>classPrefix：class的统一前缀。有助于对样式与交互分离。</li>\n<li>defaultActiveIndex和activeIndex：默认的激活索引。</li>\n<li>onChange：回调函数。一般与activeIndex搭配使用。</li>\n</ul>\n</li>\n<li><p>react为props提供了默认配置，可通过defaultProps静态变量的方式定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">static defaultProps =&#123;</div><div class=\"line\">    classPrefix:&apos;&apos;,</div><div class=\"line\">    onChange:()=&gt;&#123;&#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>子组件prop</p>\n<ul>\n<li>在react中有一个重要且内置的prop——children，代表组件的子组件集合。</li>\n<li>React.Children是React官方提供的一系列操作children的方法。提供诸如map、forEach、count等实用函数。</li>\n</ul>\n</li>\n<li>组件props</li>\n<li>用function prop与父组件通信<ul>\n<li>对于state，它的通信集中在组件内部。对于props，它的通信是父组件向子组件的传播。</li>\n</ul>\n</li>\n<li>propType<ul>\n<li>用于规范props的类型与必需的状态。若组件定义了propType，那么在开发环境下，就会对组件的props值的类型作检查。  </li>\n</ul>\n</li>\n</ul>\n<h5 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h5><p> react组件的生命周期分为挂载、渲染和卸载。</p>\n<h6 id=\"挂载或卸载过程\"><a href=\"#挂载或卸载过程\" class=\"headerlink\" title=\"挂载或卸载过程\"></a>挂载或卸载过程</h6><ul>\n<li><p>组件的挂载</p>\n<ul>\n<li>主要做组件状态的初始化<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React,&#123;Component,PropTypes&#125; form &apos;react&apos;;</div><div class=\"line\">class App extends Component&#123;</div><div class=\"line\">    static propTypes=&#123;</div><div class=\"line\">        //...</div><div class=\"line\">    &#125;;</div><div class=\"line\">    static defaultProps=&#123;</div><div class=\"line\">        //...</div><div class=\"line\">    &#125;;</div><div class=\"line\">    constructor(props)&#123;</div><div class=\"line\">        super(props);</div><div class=\"line\">        this.state=&#123;</div><div class=\"line\">            //...</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentWillMount()&#123;</div><div class=\"line\">        //...</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentDidMount()&#123;</div><div class=\"line\">    //...</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        return &lt;div&gt;This is a demo.&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>两个生命周期方法</p>\n<ul>\n<li>componentWillMount，在render方法之前执行。（渲染前）</li>\n<li>componentDidMount，在render方法之后执行。（渲染后）</li>\n</ul>\n</li>\n<li>执行setState方法<ul>\n<li>在componentWillMount中，组件会更新state，但组件只渲染一次。无意义的执行</li>\n<li>在componentDidMount中，组件会再次更新，在初始化过程中就渲染了两次。</li>\n</ul>\n</li>\n<li>组件的卸载<ul>\n<li>只有componentWillMount这一个卸载前状态。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"数据更新过程\"><a href=\"#数据更新过程\" class=\"headerlink\" title=\"数据更新过程\"></a>数据更新过程</h6><ul>\n<li><p>指的是父组件向下传递props或组件自身执行setState方法时发生的一系列更新动作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React,&#123;Component,PropTypes&#125; from &apos;react&apos;;</div><div class=\"line\">class App extends Component&#123;</div><div class=\"line\">    componentWillReceiveProps(nextProps)&#123;</div><div class=\"line\">        //this.setState(&#123;&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    shouldComponentUpdate(nextProps,nextState)&#123;</div><div class=\"line\">        //...</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentWillUpdate(nextProps,nextState)&#123;</div><div class=\"line\">        //...</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentDidUpdate(prevProps,prevState)&#123;</div><div class=\"line\">        //...</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        return &lt;div&gt;This is a demo.&lt;/div&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>组件自身的state更新，会依次执行shouldComponentUpdate、componentWillUpdate、rebder和componentDidUpdate。</p>\n</li>\n<li>shouldComponentUpdate 接收需要更新的props和state。开发者加入必要的条件判断，当方法返回false，组件不再向下执行生命周期方法。</li>\n<li>componentWillUpdate方法提供需要更新的props和state，代表更新过程中渲染前时刻；componentDidUpdate方法提供更新前的props和state，代表更新过程中渲染后时刻。</li>\n<li>如果组件是由父组件更新props而更新的，那么在shouldComponentUpdate之前会先执行componentWillReceiveProps方法。在此方法中调用setState不会有二次渲染。</li>\n</ul>\n<h5 id=\"React与DOM\"><a href=\"#React与DOM\" class=\"headerlink\" title=\"React与DOM\"></a>React与DOM</h5><ul>\n<li>在组件开实现中，不会用到ReactDOM，只有在顶层组件以及由于React模型所限而不得不操作DOM的时候，才会用。</li>\n</ul>\n<h6 id=\"ReactDOM\"><a href=\"#ReactDOM\" class=\"headerlink\" title=\"ReactDOM\"></a>ReactDOM</h6><ul>\n<li><p>findDOMNode</p>\n<ul>\n<li><p>React提供的获取DOM元素的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DOMElement findDOMNode(ReactComponent component)</div></pre></td></tr></table></figure>\n</li>\n<li><p>当组件被渲染到DOM中之后，findDOMNode返回该React组件实例相应的DOM节点。它可以用于获取表单的value以及用于DOM的测量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//当前组件加载完时获取当前DOM</div><div class=\"line\">import React,&#123;Component&#125; from &apos;react&apos;;</div><div class=\"line\">import ReactDOM from &apos;react-dom&apos;;</div><div class=\"line\">class App extends Component&#123;</div><div class=\"line\">    componentDidMount()&#123;</div><div class=\"line\">        //this为当前组件实例</div><div class=\"line\">        const dom = ReactDOM.findDOMNode(this);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>findDOMNode只对已经挂载的组件有效。</p>\n</li>\n</ul>\n</li>\n<li><p>render</p>\n<ul>\n<li><p>用于把React渲染的Virtual DOM渲染到浏览器的DOM当中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReactComponent render(</div><div class=\"line\">    ReactElement element,</div><div class=\"line\">    DOMElement container,</div><div class=\"line\">    [function callback]</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n</li>\n<li><p>该方法把元素挂载到container中，并返回element实例（refs引用）。如果是无状态组件，render会返回null，当组件装载完毕时，callback就会被调用。</p>\n</li>\n<li>再次更新时，React不会把组件重新渲染，而是用DOM diff算法做局部更新。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"ReactDOM的不稳定方法\"><a href=\"#ReactDOM的不稳定方法\" class=\"headerlink\" title=\"ReactDOM的不稳定方法\"></a>ReactDOM的不稳定方法</h6><ul>\n<li>有两种不稳定方法</li>\n</ul>\n<h6 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h6><ul>\n<li>组件中特殊的prop，可以附加到任何一个组件上。组件被调用时会指向一个实例，而refs会指向这个实例。</li>\n<li>可以是一个回调函数，这个回调函数会在组件挂载之后立即执行。</li>\n<li>refs同样支持字符串，对于DOM操作，不仅可以使用findDOMNode获得该组件DOM，还可以使用refs获得组件内部的DOM。</li>\n</ul>\n<h6 id=\"React之外的DOM操作\"><a href=\"#React之外的DOM操作\" class=\"headerlink\" title=\"React之外的DOM操作\"></a>React之外的DOM操作</h6><ul>\n<li>React的 声明式渲染机制把复杂的DOM操作抽象为简单的state和props的操作，因此避免了很多直接的DOM操作。不过，仍有一些DOM操作是React无法避免的。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"第一章（Raact数据流、React生命周期、React与DOM）\"><a href=\"#第一章（Raact数据流、React生命周期、React与DOM）\" class=\"headerlink\" title=\"第一章（Raact数据流、React生命周期、React与DOM）\"></a>第一章（Raact数据流、React生命周期、React与DOM）</h4><h5 id=\"React数据流\"><a href=\"#React数据流\" class=\"headerlink\" title=\"React数据流\"></a>React数据流</h5><p>在React中，数据是自项向下单向流动的。即从父组件到子组件。</p>\n<ul>\n<li>如果顶层组件初始化props，那么React会向下遍历整棵组件树，重新尝试渲染所有相关的子组件。而state只关心每个组件自己的内部的状态，这些状态只能在组件内改变。","more":"<h6 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h6></li>\n<li>当组件内部使用库内置的setState方法时，最大的表现行为就是该组合会尝试重新渲染。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React,&#123;Component&#125; form &apos;react&apos;;</div><div class=\"line\">class Counter extends Component&#123;</div><div class=\"line\">    constructor(pros)&#123;</div><div class=\"line\">        super(props);</div><div class=\"line\">        this.state = &#123;</div><div class=\"line\">            count:0,</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    handleClick(e)&#123;</div><div class=\"line\">        e.preventDefault();</div><div class=\"line\">        this.setState(&#123;</div><div class=\"line\">            count : this.state.count + 1,</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        renturn(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;p&gt;&#123;this.state.count&#125;&lt;/p&gt;</div><div class=\"line\">                &lt;a href=&quot;#&quot; onClick=&#123;this.handleClick&#125;&gt;更新&lt;/a&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上述例子是通过点击“更新”按钮不断的更新内部值。把组件内状态封装在现实中。</p>\n<ul>\n<li>setState 是一个异步方法。一个生命周期内所有的setState方法会合并操作。</li>\n</ul>\n<h6 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h6><ul>\n<li>是react用来让组件之间相互联系的一种机制。</li>\n<li>react的单向数据流，主要的流动管道是props。其本身不可变的，组件的props一定来自默认属性或者通过父组件传递而来。</li>\n<li>组件的部分props<ul>\n<li>className：根节点的class。</li>\n<li>classPrefix：class的统一前缀。有助于对样式与交互分离。</li>\n<li>defaultActiveIndex和activeIndex：默认的激活索引。</li>\n<li>onChange：回调函数。一般与activeIndex搭配使用。</li>\n</ul>\n</li>\n<li><p>react为props提供了默认配置，可通过defaultProps静态变量的方式定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">static defaultProps =&#123;</div><div class=\"line\">    classPrefix:&apos;&apos;,</div><div class=\"line\">    onChange:()=&gt;&#123;&#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>子组件prop</p>\n<ul>\n<li>在react中有一个重要且内置的prop——children，代表组件的子组件集合。</li>\n<li>React.Children是React官方提供的一系列操作children的方法。提供诸如map、forEach、count等实用函数。</li>\n</ul>\n</li>\n<li>组件props</li>\n<li>用function prop与父组件通信<ul>\n<li>对于state，它的通信集中在组件内部。对于props，它的通信是父组件向子组件的传播。</li>\n</ul>\n</li>\n<li>propType<ul>\n<li>用于规范props的类型与必需的状态。若组件定义了propType，那么在开发环境下，就会对组件的props值的类型作检查。  </li>\n</ul>\n</li>\n</ul>\n<h5 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h5><p> react组件的生命周期分为挂载、渲染和卸载。</p>\n<h6 id=\"挂载或卸载过程\"><a href=\"#挂载或卸载过程\" class=\"headerlink\" title=\"挂载或卸载过程\"></a>挂载或卸载过程</h6><ul>\n<li><p>组件的挂载</p>\n<ul>\n<li>主要做组件状态的初始化<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React,&#123;Component,PropTypes&#125; form &apos;react&apos;;</div><div class=\"line\">class App extends Component&#123;</div><div class=\"line\">    static propTypes=&#123;</div><div class=\"line\">        //...</div><div class=\"line\">    &#125;;</div><div class=\"line\">    static defaultProps=&#123;</div><div class=\"line\">        //...</div><div class=\"line\">    &#125;;</div><div class=\"line\">    constructor(props)&#123;</div><div class=\"line\">        super(props);</div><div class=\"line\">        this.state=&#123;</div><div class=\"line\">            //...</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentWillMount()&#123;</div><div class=\"line\">        //...</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentDidMount()&#123;</div><div class=\"line\">    //...</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        return &lt;div&gt;This is a demo.&lt;/div&gt;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>两个生命周期方法</p>\n<ul>\n<li>componentWillMount，在render方法之前执行。（渲染前）</li>\n<li>componentDidMount，在render方法之后执行。（渲染后）</li>\n</ul>\n</li>\n<li>执行setState方法<ul>\n<li>在componentWillMount中，组件会更新state，但组件只渲染一次。无意义的执行</li>\n<li>在componentDidMount中，组件会再次更新，在初始化过程中就渲染了两次。</li>\n</ul>\n</li>\n<li>组件的卸载<ul>\n<li>只有componentWillMount这一个卸载前状态。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"数据更新过程\"><a href=\"#数据更新过程\" class=\"headerlink\" title=\"数据更新过程\"></a>数据更新过程</h6><ul>\n<li><p>指的是父组件向下传递props或组件自身执行setState方法时发生的一系列更新动作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React,&#123;Component,PropTypes&#125; from &apos;react&apos;;</div><div class=\"line\">class App extends Component&#123;</div><div class=\"line\">    componentWillReceiveProps(nextProps)&#123;</div><div class=\"line\">        //this.setState(&#123;&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    shouldComponentUpdate(nextProps,nextState)&#123;</div><div class=\"line\">        //...</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentWillUpdate(nextProps,nextState)&#123;</div><div class=\"line\">        //...</div><div class=\"line\">    &#125;</div><div class=\"line\">    componentDidUpdate(prevProps,prevState)&#123;</div><div class=\"line\">        //...</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        return &lt;div&gt;This is a demo.&lt;/div&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>组件自身的state更新，会依次执行shouldComponentUpdate、componentWillUpdate、rebder和componentDidUpdate。</p>\n</li>\n<li>shouldComponentUpdate 接收需要更新的props和state。开发者加入必要的条件判断，当方法返回false，组件不再向下执行生命周期方法。</li>\n<li>componentWillUpdate方法提供需要更新的props和state，代表更新过程中渲染前时刻；componentDidUpdate方法提供更新前的props和state，代表更新过程中渲染后时刻。</li>\n<li>如果组件是由父组件更新props而更新的，那么在shouldComponentUpdate之前会先执行componentWillReceiveProps方法。在此方法中调用setState不会有二次渲染。</li>\n</ul>\n<h5 id=\"React与DOM\"><a href=\"#React与DOM\" class=\"headerlink\" title=\"React与DOM\"></a>React与DOM</h5><ul>\n<li>在组件开实现中，不会用到ReactDOM，只有在顶层组件以及由于React模型所限而不得不操作DOM的时候，才会用。</li>\n</ul>\n<h6 id=\"ReactDOM\"><a href=\"#ReactDOM\" class=\"headerlink\" title=\"ReactDOM\"></a>ReactDOM</h6><ul>\n<li><p>findDOMNode</p>\n<ul>\n<li><p>React提供的获取DOM元素的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DOMElement findDOMNode(ReactComponent component)</div></pre></td></tr></table></figure>\n</li>\n<li><p>当组件被渲染到DOM中之后，findDOMNode返回该React组件实例相应的DOM节点。它可以用于获取表单的value以及用于DOM的测量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//当前组件加载完时获取当前DOM</div><div class=\"line\">import React,&#123;Component&#125; from &apos;react&apos;;</div><div class=\"line\">import ReactDOM from &apos;react-dom&apos;;</div><div class=\"line\">class App extends Component&#123;</div><div class=\"line\">    componentDidMount()&#123;</div><div class=\"line\">        //this为当前组件实例</div><div class=\"line\">        const dom = ReactDOM.findDOMNode(this);</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>findDOMNode只对已经挂载的组件有效。</p>\n</li>\n</ul>\n</li>\n<li><p>render</p>\n<ul>\n<li><p>用于把React渲染的Virtual DOM渲染到浏览器的DOM当中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReactComponent render(</div><div class=\"line\">    ReactElement element,</div><div class=\"line\">    DOMElement container,</div><div class=\"line\">    [function callback]</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n</li>\n<li><p>该方法把元素挂载到container中，并返回element实例（refs引用）。如果是无状态组件，render会返回null，当组件装载完毕时，callback就会被调用。</p>\n</li>\n<li>再次更新时，React不会把组件重新渲染，而是用DOM diff算法做局部更新。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"ReactDOM的不稳定方法\"><a href=\"#ReactDOM的不稳定方法\" class=\"headerlink\" title=\"ReactDOM的不稳定方法\"></a>ReactDOM的不稳定方法</h6><ul>\n<li>有两种不稳定方法</li>\n</ul>\n<h6 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h6><ul>\n<li>组件中特殊的prop，可以附加到任何一个组件上。组件被调用时会指向一个实例，而refs会指向这个实例。</li>\n<li>可以是一个回调函数，这个回调函数会在组件挂载之后立即执行。</li>\n<li>refs同样支持字符串，对于DOM操作，不仅可以使用findDOMNode获得该组件DOM，还可以使用refs获得组件内部的DOM。</li>\n</ul>\n<h6 id=\"React之外的DOM操作\"><a href=\"#React之外的DOM操作\" class=\"headerlink\" title=\"React之外的DOM操作\"></a>React之外的DOM操作</h6><ul>\n<li>React的 声明式渲染机制把复杂的DOM操作抽象为简单的state和props的操作，因此避免了很多直接的DOM操作。不过，仍有一些DOM操作是React无法避免的。</li>\n</ul>"},{"title":"第一次讨论","date":"2016-10-15T11:17:03.000Z","_content":"** 这篇博客写于 2016-10-15 **\n** 这个主要是我们前端小组第一次讨论的内容，行内与块级、浮动与清除浮动、定位、兼容性处理。其中大多内容都是我从网上收集来的。还是需要有自己的想法。感觉这次讨论还是挺有一定的效果的。至少我把有一些内容更加完整跟清晰化了。 **\n<!--more-->\n##### 【行内元素和块级元素】\n块级元素：div , p , form, ul, li , ol, dl， address, fieldset, hr, menu, table \n行内元素：span, strong, em, br, img , input, label, select, textarea, cite\n可变元素（根据上下文语境而定）：\nbutton，applet，del，ifram，ins，map，object，script\n** 区别：**\n1. 块级元素会独占一行，其宽度自动填满其父元素宽度\n　行内元素不会独占一行，相邻的行内元素会排列在同一行里，知道一行排不下，才会换行，其宽度随元素的内容 而变化\n2. 块级元素可以设置 width, height属性，行内元素设置width, height无效\n【注意：块级元素即使设置了宽度，仍然是独占一行的】\n3. 块级元素可以设置margin 和 padding. 行内元素的水平方向的都产生边距效果，但是竖直方向的都不会产生边距效果。（水平方向有效，竖直方向无效）。\n将display设为block，可以让行内元素表现像块级元素。  \nline-block在IE6下有问题。  \n\n##### 【浮动和清除浮动（闭合浮动）】\n高度塌陷：元素含有浮动元素—破坏inline box—破坏line box—没有高度—塌陷。\n当标签里面的元素只要样子没有实际高度时就会塌陷。\n* 若浮动对象有负边界，浮动对象可能会浮到其所在父对象外边。\n* 若较宽的子盒子有一个较窄的父盒子中拥有浮动属性，不会影响父盒子宽度，子盒子越到父盒子外，父盒子不会有文本流浮动，而子盒子会覆盖在上。\n* 父盒子为自动高度或不设，子盒子拥有浮动，并高度超过了父盒子（解决方法：加入clear:both）\n** 清除浮动 **\nIE下：使元素haslayout。\n非IE下：通常使用overflow:hidden。\n** 方法：**\n1. 直接添加clear:both（不推荐）；\n2. overflow+zoom：有局限性，margin为负定位或是负的绝对定位。.fix{overflow:hidden;zoom:1;}。\n3. after+zoom：.fix{zoom:1;} .fix:after{display:block;content:\".\";clear:both;line-height:0;visibility:hidden;}\n* 方法：\n    - 让容器也浮动。  \n    - 设置容器overflow为auto或hidden（有副作用）。\n\n##### 【定位】\n基本方式：static（默认定位方式）、relative、absolute。\nrelative：相对定位，相对于原来的位置，但是原来的位置仍然保留。\nabsolute：绝对定位，相对于最近的非标准流定位，原来的位置消失，被最后边的位置所顶替。\nfixed：固定定位。\n定位机制是由普通流、浮动、绝对定位三种组成。\n只要父级元素设置了position并且不是static，那么设定了absolute的子元素，即以此为包含块（最近的）。\n绝对定位元素定位的参照物使其包含块，即相对于包含块进行定位，不一定是其父元素。\n\n##### 【兼容性处理】\nCSS hack：为了页面统一，针对不同浏览器或不同版本写出可解析的css样式，把这个针对不同浏览器/版本写的css过程叫做css hack。\n** 问题：**\n* DOCTYPE 影响 CSS 处理 ；\n* FF: 设置 padding 后， div 会增加 height 和 width， 但 IE 不会， 故需要用 !important 多设一个 height 和 width 。FF: 支持 !important， IE 则忽略,可用 !important 为 FF 特别设置样式\n* 在mozilla firefox和IE中的BOX模型解释不一致导致相差2px解决方法：\n    - div{margin:30px!important;margin:28px;} 注意这两个margin的顺序一定不能写反，!important这个属性IE不能识别，但别的浏览器可以识别。\n\n** 浏览器差异：**\n1. ul和ol列表缩进问题\n* 消除ul、ol等列表的缩进时，样式应写成：{list-style:none;margin:0px;padding:0px; }\n* 其中margin属性对IE有效，padding属性对FireFox有效。  \n2. css透明度 \n* IE：filter:progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=60)。 \n* FF：opacity:0.6。  \n最好两个都写，并将opacity属性放在下面。\n3. css圆角问题\n* IE：IE6及以下不支持圆角。\n* FF：支持border-radius。  \n4. firefox不支持hand，但ie支持pointer ，两者都是手形指示。 最好统一使用pointer。\n** 浏览器bug：**\n* IE的双边距：设置为float的div在IE下设置margin会加倍。\n    - 解决方法：在div面加上display:inline;   \n* IE选择器空格bug：在IE中，处理伪类时，如果伪类的名称中带有连字符“-”，伪类名称后面就得跟一个空格，不然定义无效。在FF中无影响。\n##### 【其他】\n** display:none和visiblity:hidden的区别：**\ndisplay:none，不占位，相当于完全消失。而visiblity:hidden，占位，相当于只是把它给隐藏掉。","source":"_posts/第一次讨论.md","raw":"---\ntitle: 第一次讨论\ndate: 2016-10-15 19:17:03\ntags: css\ncategories: 前端\n---\n** 这篇博客写于 2016-10-15 **\n** 这个主要是我们前端小组第一次讨论的内容，行内与块级、浮动与清除浮动、定位、兼容性处理。其中大多内容都是我从网上收集来的。还是需要有自己的想法。感觉这次讨论还是挺有一定的效果的。至少我把有一些内容更加完整跟清晰化了。 **\n<!--more-->\n##### 【行内元素和块级元素】\n块级元素：div , p , form, ul, li , ol, dl， address, fieldset, hr, menu, table \n行内元素：span, strong, em, br, img , input, label, select, textarea, cite\n可变元素（根据上下文语境而定）：\nbutton，applet，del，ifram，ins，map，object，script\n** 区别：**\n1. 块级元素会独占一行，其宽度自动填满其父元素宽度\n　行内元素不会独占一行，相邻的行内元素会排列在同一行里，知道一行排不下，才会换行，其宽度随元素的内容 而变化\n2. 块级元素可以设置 width, height属性，行内元素设置width, height无效\n【注意：块级元素即使设置了宽度，仍然是独占一行的】\n3. 块级元素可以设置margin 和 padding. 行内元素的水平方向的都产生边距效果，但是竖直方向的都不会产生边距效果。（水平方向有效，竖直方向无效）。\n将display设为block，可以让行内元素表现像块级元素。  \nline-block在IE6下有问题。  \n\n##### 【浮动和清除浮动（闭合浮动）】\n高度塌陷：元素含有浮动元素—破坏inline box—破坏line box—没有高度—塌陷。\n当标签里面的元素只要样子没有实际高度时就会塌陷。\n* 若浮动对象有负边界，浮动对象可能会浮到其所在父对象外边。\n* 若较宽的子盒子有一个较窄的父盒子中拥有浮动属性，不会影响父盒子宽度，子盒子越到父盒子外，父盒子不会有文本流浮动，而子盒子会覆盖在上。\n* 父盒子为自动高度或不设，子盒子拥有浮动，并高度超过了父盒子（解决方法：加入clear:both）\n** 清除浮动 **\nIE下：使元素haslayout。\n非IE下：通常使用overflow:hidden。\n** 方法：**\n1. 直接添加clear:both（不推荐）；\n2. overflow+zoom：有局限性，margin为负定位或是负的绝对定位。.fix{overflow:hidden;zoom:1;}。\n3. after+zoom：.fix{zoom:1;} .fix:after{display:block;content:\".\";clear:both;line-height:0;visibility:hidden;}\n* 方法：\n    - 让容器也浮动。  \n    - 设置容器overflow为auto或hidden（有副作用）。\n\n##### 【定位】\n基本方式：static（默认定位方式）、relative、absolute。\nrelative：相对定位，相对于原来的位置，但是原来的位置仍然保留。\nabsolute：绝对定位，相对于最近的非标准流定位，原来的位置消失，被最后边的位置所顶替。\nfixed：固定定位。\n定位机制是由普通流、浮动、绝对定位三种组成。\n只要父级元素设置了position并且不是static，那么设定了absolute的子元素，即以此为包含块（最近的）。\n绝对定位元素定位的参照物使其包含块，即相对于包含块进行定位，不一定是其父元素。\n\n##### 【兼容性处理】\nCSS hack：为了页面统一，针对不同浏览器或不同版本写出可解析的css样式，把这个针对不同浏览器/版本写的css过程叫做css hack。\n** 问题：**\n* DOCTYPE 影响 CSS 处理 ；\n* FF: 设置 padding 后， div 会增加 height 和 width， 但 IE 不会， 故需要用 !important 多设一个 height 和 width 。FF: 支持 !important， IE 则忽略,可用 !important 为 FF 特别设置样式\n* 在mozilla firefox和IE中的BOX模型解释不一致导致相差2px解决方法：\n    - div{margin:30px!important;margin:28px;} 注意这两个margin的顺序一定不能写反，!important这个属性IE不能识别，但别的浏览器可以识别。\n\n** 浏览器差异：**\n1. ul和ol列表缩进问题\n* 消除ul、ol等列表的缩进时，样式应写成：{list-style:none;margin:0px;padding:0px; }\n* 其中margin属性对IE有效，padding属性对FireFox有效。  \n2. css透明度 \n* IE：filter:progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=60)。 \n* FF：opacity:0.6。  \n最好两个都写，并将opacity属性放在下面。\n3. css圆角问题\n* IE：IE6及以下不支持圆角。\n* FF：支持border-radius。  \n4. firefox不支持hand，但ie支持pointer ，两者都是手形指示。 最好统一使用pointer。\n** 浏览器bug：**\n* IE的双边距：设置为float的div在IE下设置margin会加倍。\n    - 解决方法：在div面加上display:inline;   \n* IE选择器空格bug：在IE中，处理伪类时，如果伪类的名称中带有连字符“-”，伪类名称后面就得跟一个空格，不然定义无效。在FF中无影响。\n##### 【其他】\n** display:none和visiblity:hidden的区别：**\ndisplay:none，不占位，相当于完全消失。而visiblity:hidden，占位，相当于只是把它给隐藏掉。","slug":"第一次讨论","published":1,"updated":"2017-08-15T12:51:49.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8ct000wlso0f5kg2nva","content":"<p><strong> 这篇博客写于 2016-10-15 </strong><br><strong> 这个主要是我们前端小组第一次讨论的内容，行内与块级、浮动与清除浮动、定位、兼容性处理。其中大多内容都是我从网上收集来的。还是需要有自己的想法。感觉这次讨论还是挺有一定的效果的。至少我把有一些内容更加完整跟清晰化了。 </strong><br><a id=\"more\"></a></p>\n<h5 id=\"【行内元素和块级元素】\"><a href=\"#【行内元素和块级元素】\" class=\"headerlink\" title=\"【行内元素和块级元素】\"></a>【行内元素和块级元素】</h5><p>块级元素：div , p , form, ul, li , ol, dl， address, fieldset, hr, menu, table<br>行内元素：span, strong, em, br, img , input, label, select, textarea, cite<br>可变元素（根据上下文语境而定）：<br>button，applet，del，ifram，ins，map，object，script<br><strong> 区别：</strong></p>\n<ol>\n<li>块级元素会独占一行，其宽度自动填满其父元素宽度<br>　行内元素不会独占一行，相邻的行内元素会排列在同一行里，知道一行排不下，才会换行，其宽度随元素的内容 而变化</li>\n<li>块级元素可以设置 width, height属性，行内元素设置width, height无效<br>【注意：块级元素即使设置了宽度，仍然是独占一行的】</li>\n<li>块级元素可以设置margin 和 padding. 行内元素的水平方向的都产生边距效果，但是竖直方向的都不会产生边距效果。（水平方向有效，竖直方向无效）。<br>将display设为block，可以让行内元素表现像块级元素。<br>line-block在IE6下有问题。  </li>\n</ol>\n<h5 id=\"【浮动和清除浮动（闭合浮动）】\"><a href=\"#【浮动和清除浮动（闭合浮动）】\" class=\"headerlink\" title=\"【浮动和清除浮动（闭合浮动）】\"></a>【浮动和清除浮动（闭合浮动）】</h5><p>高度塌陷：元素含有浮动元素—破坏inline box—破坏line box—没有高度—塌陷。<br>当标签里面的元素只要样子没有实际高度时就会塌陷。</p>\n<ul>\n<li>若浮动对象有负边界，浮动对象可能会浮到其所在父对象外边。</li>\n<li>若较宽的子盒子有一个较窄的父盒子中拥有浮动属性，不会影响父盒子宽度，子盒子越到父盒子外，父盒子不会有文本流浮动，而子盒子会覆盖在上。</li>\n<li>父盒子为自动高度或不设，子盒子拥有浮动，并高度超过了父盒子（解决方法：加入clear:both）<br><strong> 清除浮动 </strong><br>IE下：使元素haslayout。<br>非IE下：通常使用overflow:hidden。<br><strong> 方法：</strong></li>\n</ul>\n<ol>\n<li>直接添加clear:both（不推荐）；</li>\n<li>overflow+zoom：有局限性，margin为负定位或是负的绝对定位。.fix{overflow:hidden;zoom:1;}。</li>\n<li>after+zoom：.fix{zoom:1;} .fix:after{display:block;content:”.”;clear:both;line-height:0;visibility:hidden;}</li>\n</ol>\n<ul>\n<li>方法：<ul>\n<li>让容器也浮动。  </li>\n<li>设置容器overflow为auto或hidden（有副作用）。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"【定位】\"><a href=\"#【定位】\" class=\"headerlink\" title=\"【定位】\"></a>【定位】</h5><p>基本方式：static（默认定位方式）、relative、absolute。<br>relative：相对定位，相对于原来的位置，但是原来的位置仍然保留。<br>absolute：绝对定位，相对于最近的非标准流定位，原来的位置消失，被最后边的位置所顶替。<br>fixed：固定定位。<br>定位机制是由普通流、浮动、绝对定位三种组成。<br>只要父级元素设置了position并且不是static，那么设定了absolute的子元素，即以此为包含块（最近的）。<br>绝对定位元素定位的参照物使其包含块，即相对于包含块进行定位，不一定是其父元素。</p>\n<h5 id=\"【兼容性处理】\"><a href=\"#【兼容性处理】\" class=\"headerlink\" title=\"【兼容性处理】\"></a>【兼容性处理】</h5><p>CSS hack：为了页面统一，针对不同浏览器或不同版本写出可解析的css样式，把这个针对不同浏览器/版本写的css过程叫做css hack。<br><strong> 问题：</strong></p>\n<ul>\n<li>DOCTYPE 影响 CSS 处理 ；</li>\n<li>FF: 设置 padding 后， div 会增加 height 和 width， 但 IE 不会， 故需要用 !important 多设一个 height 和 width 。FF: 支持 !important， IE 则忽略,可用 !important 为 FF 特别设置样式</li>\n<li>在mozilla firefox和IE中的BOX模型解释不一致导致相差2px解决方法：<ul>\n<li>div{margin:30px!important;margin:28px;} 注意这两个margin的顺序一定不能写反，!important这个属性IE不能识别，但别的浏览器可以识别。</li>\n</ul>\n</li>\n</ul>\n<p><strong> 浏览器差异：</strong></p>\n<ol>\n<li>ul和ol列表缩进问题</li>\n</ol>\n<ul>\n<li>消除ul、ol等列表的缩进时，样式应写成：{list-style:none;margin:0px;padding:0px; }</li>\n<li>其中margin属性对IE有效，padding属性对FireFox有效。  </li>\n</ul>\n<ol>\n<li>css透明度 </li>\n</ol>\n<ul>\n<li>IE：filter:progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=60)。 </li>\n<li>FF：opacity:0.6。<br>最好两个都写，并将opacity属性放在下面。</li>\n</ul>\n<ol>\n<li>css圆角问题</li>\n</ol>\n<ul>\n<li>IE：IE6及以下不支持圆角。</li>\n<li>FF：支持border-radius。  </li>\n</ul>\n<ol>\n<li>firefox不支持hand，但ie支持pointer ，两者都是手形指示。 最好统一使用pointer。<br><strong> 浏览器bug：</strong></li>\n</ol>\n<ul>\n<li>IE的双边距：设置为float的div在IE下设置margin会加倍。<ul>\n<li>解决方法：在div面加上display:inline;   </li>\n</ul>\n</li>\n<li>IE选择器空格bug：在IE中，处理伪类时，如果伪类的名称中带有连字符“-”，伪类名称后面就得跟一个空格，不然定义无效。在FF中无影响。<h5 id=\"【其他】\"><a href=\"#【其他】\" class=\"headerlink\" title=\"【其他】\"></a>【其他】</h5><strong> display:none和visiblity:hidden的区别：</strong><br>display:none，不占位，相当于完全消失。而visiblity:hidden，占位，相当于只是把它给隐藏掉。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><strong> 这篇博客写于 2016-10-15 </strong><br><strong> 这个主要是我们前端小组第一次讨论的内容，行内与块级、浮动与清除浮动、定位、兼容性处理。其中大多内容都是我从网上收集来的。还是需要有自己的想法。感觉这次讨论还是挺有一定的效果的。至少我把有一些内容更加完整跟清晰化了。 </strong><br>","more":"</p>\n<h5 id=\"【行内元素和块级元素】\"><a href=\"#【行内元素和块级元素】\" class=\"headerlink\" title=\"【行内元素和块级元素】\"></a>【行内元素和块级元素】</h5><p>块级元素：div , p , form, ul, li , ol, dl， address, fieldset, hr, menu, table<br>行内元素：span, strong, em, br, img , input, label, select, textarea, cite<br>可变元素（根据上下文语境而定）：<br>button，applet，del，ifram，ins，map，object，script<br><strong> 区别：</strong></p>\n<ol>\n<li>块级元素会独占一行，其宽度自动填满其父元素宽度<br>　行内元素不会独占一行，相邻的行内元素会排列在同一行里，知道一行排不下，才会换行，其宽度随元素的内容 而变化</li>\n<li>块级元素可以设置 width, height属性，行内元素设置width, height无效<br>【注意：块级元素即使设置了宽度，仍然是独占一行的】</li>\n<li>块级元素可以设置margin 和 padding. 行内元素的水平方向的都产生边距效果，但是竖直方向的都不会产生边距效果。（水平方向有效，竖直方向无效）。<br>将display设为block，可以让行内元素表现像块级元素。<br>line-block在IE6下有问题。  </li>\n</ol>\n<h5 id=\"【浮动和清除浮动（闭合浮动）】\"><a href=\"#【浮动和清除浮动（闭合浮动）】\" class=\"headerlink\" title=\"【浮动和清除浮动（闭合浮动）】\"></a>【浮动和清除浮动（闭合浮动）】</h5><p>高度塌陷：元素含有浮动元素—破坏inline box—破坏line box—没有高度—塌陷。<br>当标签里面的元素只要样子没有实际高度时就会塌陷。</p>\n<ul>\n<li>若浮动对象有负边界，浮动对象可能会浮到其所在父对象外边。</li>\n<li>若较宽的子盒子有一个较窄的父盒子中拥有浮动属性，不会影响父盒子宽度，子盒子越到父盒子外，父盒子不会有文本流浮动，而子盒子会覆盖在上。</li>\n<li>父盒子为自动高度或不设，子盒子拥有浮动，并高度超过了父盒子（解决方法：加入clear:both）<br><strong> 清除浮动 </strong><br>IE下：使元素haslayout。<br>非IE下：通常使用overflow:hidden。<br><strong> 方法：</strong></li>\n</ul>\n<ol>\n<li>直接添加clear:both（不推荐）；</li>\n<li>overflow+zoom：有局限性，margin为负定位或是负的绝对定位。.fix{overflow:hidden;zoom:1;}。</li>\n<li>after+zoom：.fix{zoom:1;} .fix:after{display:block;content:”.”;clear:both;line-height:0;visibility:hidden;}</li>\n</ol>\n<ul>\n<li>方法：<ul>\n<li>让容器也浮动。  </li>\n<li>设置容器overflow为auto或hidden（有副作用）。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"【定位】\"><a href=\"#【定位】\" class=\"headerlink\" title=\"【定位】\"></a>【定位】</h5><p>基本方式：static（默认定位方式）、relative、absolute。<br>relative：相对定位，相对于原来的位置，但是原来的位置仍然保留。<br>absolute：绝对定位，相对于最近的非标准流定位，原来的位置消失，被最后边的位置所顶替。<br>fixed：固定定位。<br>定位机制是由普通流、浮动、绝对定位三种组成。<br>只要父级元素设置了position并且不是static，那么设定了absolute的子元素，即以此为包含块（最近的）。<br>绝对定位元素定位的参照物使其包含块，即相对于包含块进行定位，不一定是其父元素。</p>\n<h5 id=\"【兼容性处理】\"><a href=\"#【兼容性处理】\" class=\"headerlink\" title=\"【兼容性处理】\"></a>【兼容性处理】</h5><p>CSS hack：为了页面统一，针对不同浏览器或不同版本写出可解析的css样式，把这个针对不同浏览器/版本写的css过程叫做css hack。<br><strong> 问题：</strong></p>\n<ul>\n<li>DOCTYPE 影响 CSS 处理 ；</li>\n<li>FF: 设置 padding 后， div 会增加 height 和 width， 但 IE 不会， 故需要用 !important 多设一个 height 和 width 。FF: 支持 !important， IE 则忽略,可用 !important 为 FF 特别设置样式</li>\n<li>在mozilla firefox和IE中的BOX模型解释不一致导致相差2px解决方法：<ul>\n<li>div{margin:30px!important;margin:28px;} 注意这两个margin的顺序一定不能写反，!important这个属性IE不能识别，但别的浏览器可以识别。</li>\n</ul>\n</li>\n</ul>\n<p><strong> 浏览器差异：</strong></p>\n<ol>\n<li>ul和ol列表缩进问题</li>\n</ol>\n<ul>\n<li>消除ul、ol等列表的缩进时，样式应写成：{list-style:none;margin:0px;padding:0px; }</li>\n<li>其中margin属性对IE有效，padding属性对FireFox有效。  </li>\n</ul>\n<ol>\n<li>css透明度 </li>\n</ol>\n<ul>\n<li>IE：filter:progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=60)。 </li>\n<li>FF：opacity:0.6。<br>最好两个都写，并将opacity属性放在下面。</li>\n</ul>\n<ol>\n<li>css圆角问题</li>\n</ol>\n<ul>\n<li>IE：IE6及以下不支持圆角。</li>\n<li>FF：支持border-radius。  </li>\n</ul>\n<ol>\n<li>firefox不支持hand，但ie支持pointer ，两者都是手形指示。 最好统一使用pointer。<br><strong> 浏览器bug：</strong></li>\n</ol>\n<ul>\n<li>IE的双边距：设置为float的div在IE下设置margin会加倍。<ul>\n<li>解决方法：在div面加上display:inline;   </li>\n</ul>\n</li>\n<li>IE选择器空格bug：在IE中，处理伪类时，如果伪类的名称中带有连字符“-”，伪类名称后面就得跟一个空格，不然定义无效。在FF中无影响。<h5 id=\"【其他】\"><a href=\"#【其他】\" class=\"headerlink\" title=\"【其他】\"></a>【其他】</h5><strong> display:none和visiblity:hidden的区别：</strong><br>display:none，不占位，相当于完全消失。而visiblity:hidden，占位，相当于只是把它给隐藏掉。</li>\n</ul>"},{"title":"第二次讨论","date":"2016-10-27T11:38:13.000Z","_content":"** 这些是小组第二次讨论，主要讨论了响应式设计、布局、css性能优化、css预处理 **\n<!--more-->\n##### 【响应式设计】\n\n集中创建页面的图片排版大小，可以智能地根据用户行为以及使用的设备环境（系统平台、屏幕尺寸、屏幕定向等）进行相对应的布局。\n响应式布局：\nmeta标签的实用：设置布局宽度等于设备宽度，布局viewport等于度量viewport\n`<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">`\n##### 【【布局】】\n##### 【水平居中】\n** text-align和inline-block的联合使用：**\ntext-align属性：通过指定行框与哪个点对齐，从而设置\u001f块级元素内文本的水平对齐方式。（从而child为文本行内元素，parent为块状元素，可以通过display来设置）。  \n\n    .parent{text-align: center;} //父元素\n    .child{display: inline-block;}//子元素  \n不过此方法兼容性比较好，IE浏览器接收。不过代码较多，同时要设置父元素和子元素。\n** 使用margin：0 auto设置 **  \n\n    .child{width:100px;margin:0 auto;}//必须要有宽度\nmargin设置的是块级元素的居中。兼容性好，不过需要设置宽度。\n** display：table设置 **\n\n    .child{display:table;margin:0 auto;}\n此方法只需对自身进行设置，代码简短。不过在IE6、7上，需要进行调整。\n** 使用绝对定位 **\n\n    .parent{position:relative;}\n    /*或者实用margin-left的负值为盒子宽度的一半也可以实现，不过这样就必须知道盒子的宽度，但兼容性好*/\n    .child{position:absolute;left:50%;transform:translate(-50%);}\ntransform：translate。移动transform在translation的方向和距离。简单的说，向某方向移动物体多少距离。\n不过这个方法兼容性不好，要IE9 以上。\n##### 【垂直居中】\n** vertical-align方法 **\n\n    /*第一种方法*/ \n    .parent{display:table-cell;vertical-align:middle;height:20px;} \n    /*第二种方法*/ \n    .parent{display:inline-block;vertical-align:middle;line-height:20px;}\n在使用vertical-align的时候，由于对齐的基线是用行高的基线作为标记，故需要设置line-height或设置display:table-cell。\n** 使用绝对定位 **\n\n    .parent{position:relative;} \n    .child{positon:absolute;top:50%;transform:translate(0,-50%);}\n注意与水平居中的区别\n##### 【水平垂直居中】\n** 利用vertical-align,text-align,inline-block实现 **\n\n    .parent{display:table-cell;vertical-align:middle;text-align:center;} \n    .child{display:inline-block;}\n** 使用绝对定位 **\n\n    .parent{position:relative;} \n    .child{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);}\n由上可知，绝对定位可以实现任何方式的居中，不过还要考虑兼容性问题。\n##### 【多列布局】\n** 左列定宽，右列自适应： **\n使用float+margin  \n\n    .left{float:left;width:100px;}\n    .right{margin-left:100px;}\n经试验，如果不用margin的话，必须设置高度。IE6会有3px的bug\n使用table实现\n\n    .parent{display:table;table-layout:fixed;width:100%;} \n    .left{display:table-cell;} \n    .right{width:100px;display:table-cell;}\n** 两列定宽，一列自适应 **\n使用margin+float\n利用float+overflow实现\n\n    .left,.center{float:left:width:200px;} \n    .right{overflow:hidden;}\n利用table实现\n** 两侧自适应，中间定宽（网页布局常用） **\n使用margin+float \n \n    .left{width：100px;float:left;}\n    .center{float:left;width:100%;margin-right:-200px;} \n    .right{width:100px;float:right;}\n利用table实现\n** 一列不定宽，一列自适应 **\n利用float+overflow实现\n\n    .left{float:left;background-color: red;height: 100px;}\n    .right{background-color: blue;overflow: hidden;height: 100px;}\n不需要设定高度。会自适应。\n\n** 多列式分布 **\n* div+float\n\n** 九宫格布局 **\n* div+table\n\n##### 【css性能优化】\n\n** 模块化：**\n让代码高度重用，提高开发效率。\n模块与模块之间尽量不要包含相同的部分，如果有，提取出来，拆分成一个独立的模块。\n\n** css命名：**\n用英文。大小驼峰、下划线等。驼峰表示区别不同单词，下划线表示从属关系。\n避免重复命名，自己的代码前加上属于自己的前缀。\n** class的使用：多组合，少继承。 **\n\n** 上下margin处理：**\n如果不确定模块的上下margin特别稳定，最好不要将它写在模块的类里，而是使用类的组合，单独为上下margin挂用于边距的原子类（如mt10、mb20）。模块最好不要混用margin-top和margin-bottom，统一使用某一个。\n\n** 低权重原则：**\n避免滥用自选择器。当不同选择符的样式设置有冲突时，会采用权重高的选择符设置样式。选择符权重相同，为就近原则。\n\n** 权重原则：**\nHTML标签为1（如p），class为10，id为100。css选择符保证权重尽可能低。\n使用子选择器，会增加css选择符的权重。新添class更利于维护。\n\n** css sprite技术：**\n将网站的多张背景图片合并到一张大图上。利用background-position属性来展示我们需要的部分,图片加载会发出HTTP请求，而使用css sprite就减少了HTTP请求次数。减轻服务器压力。只能合并背景图片。对于横向和纵向都平铺的图片，不能使用css sprite，只能或横向，或纵向。排版要尽量紧凑。\n缺点：降低开发效率和增大维护难度，是否使用取决于网站流量。\n\n** css常见问题：** \n* 编码风格：\n   - 多行式可读性强，不过会增大css文件大小，一行式可读性较差，不过利于提高开发速度，减小css文件大小。推荐一行式。\n* id和class：\n    -同一网页，相同id只能出现一次，但是class无限制。id的权重大于class。不过原生JS提供getElementId()方法，不支持class。使用id会限制网页的扩展性。一般情况下，建议尽量使用class，少用id。\n* css hack：\n    - IE条件注释法（兼容性最好，增加了开发和维护成本）\n    - 选择符前缀法（增强了可维护性，不过兼容性欠佳，不能用于内联样式）\n    - 样式属性前缀法（集合度更高，代码更加精简，可维护性更强，但存在兼容风险，可用于内联样式）  \n* 解决超链接访问后hover样式不出现的问题：\n    - a标签四种状态的排 序问题，love hate原则 ，即l(link)ov(visited)e h(hover)a(active)te。\n* haslayout：\n   -IE浏览器的专有属性，用于css的解析引擎。很多bug都因为haslayout没有被自动触发。最好的解决方法：zoom。\n* 块级元素和行内元素：\n    - 使用display转换。\n* IE6、7不支持display：inline-block。\n* relative、absolute和float：不要滥用。\n##### 【css预处理】\n用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。","source":"_posts/第二次讨论.md","raw":"---\ntitle: 第二次讨论\ndate: 2016-10-27 19:38:13\ntags: css\ncategories: 前端\n---\n** 这些是小组第二次讨论，主要讨论了响应式设计、布局、css性能优化、css预处理 **\n<!--more-->\n##### 【响应式设计】\n\n集中创建页面的图片排版大小，可以智能地根据用户行为以及使用的设备环境（系统平台、屏幕尺寸、屏幕定向等）进行相对应的布局。\n响应式布局：\nmeta标签的实用：设置布局宽度等于设备宽度，布局viewport等于度量viewport\n`<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">`\n##### 【【布局】】\n##### 【水平居中】\n** text-align和inline-block的联合使用：**\ntext-align属性：通过指定行框与哪个点对齐，从而设置\u001f块级元素内文本的水平对齐方式。（从而child为文本行内元素，parent为块状元素，可以通过display来设置）。  \n\n    .parent{text-align: center;} //父元素\n    .child{display: inline-block;}//子元素  \n不过此方法兼容性比较好，IE浏览器接收。不过代码较多，同时要设置父元素和子元素。\n** 使用margin：0 auto设置 **  \n\n    .child{width:100px;margin:0 auto;}//必须要有宽度\nmargin设置的是块级元素的居中。兼容性好，不过需要设置宽度。\n** display：table设置 **\n\n    .child{display:table;margin:0 auto;}\n此方法只需对自身进行设置，代码简短。不过在IE6、7上，需要进行调整。\n** 使用绝对定位 **\n\n    .parent{position:relative;}\n    /*或者实用margin-left的负值为盒子宽度的一半也可以实现，不过这样就必须知道盒子的宽度，但兼容性好*/\n    .child{position:absolute;left:50%;transform:translate(-50%);}\ntransform：translate。移动transform在translation的方向和距离。简单的说，向某方向移动物体多少距离。\n不过这个方法兼容性不好，要IE9 以上。\n##### 【垂直居中】\n** vertical-align方法 **\n\n    /*第一种方法*/ \n    .parent{display:table-cell;vertical-align:middle;height:20px;} \n    /*第二种方法*/ \n    .parent{display:inline-block;vertical-align:middle;line-height:20px;}\n在使用vertical-align的时候，由于对齐的基线是用行高的基线作为标记，故需要设置line-height或设置display:table-cell。\n** 使用绝对定位 **\n\n    .parent{position:relative;} \n    .child{positon:absolute;top:50%;transform:translate(0,-50%);}\n注意与水平居中的区别\n##### 【水平垂直居中】\n** 利用vertical-align,text-align,inline-block实现 **\n\n    .parent{display:table-cell;vertical-align:middle;text-align:center;} \n    .child{display:inline-block;}\n** 使用绝对定位 **\n\n    .parent{position:relative;} \n    .child{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);}\n由上可知，绝对定位可以实现任何方式的居中，不过还要考虑兼容性问题。\n##### 【多列布局】\n** 左列定宽，右列自适应： **\n使用float+margin  \n\n    .left{float:left;width:100px;}\n    .right{margin-left:100px;}\n经试验，如果不用margin的话，必须设置高度。IE6会有3px的bug\n使用table实现\n\n    .parent{display:table;table-layout:fixed;width:100%;} \n    .left{display:table-cell;} \n    .right{width:100px;display:table-cell;}\n** 两列定宽，一列自适应 **\n使用margin+float\n利用float+overflow实现\n\n    .left,.center{float:left:width:200px;} \n    .right{overflow:hidden;}\n利用table实现\n** 两侧自适应，中间定宽（网页布局常用） **\n使用margin+float \n \n    .left{width：100px;float:left;}\n    .center{float:left;width:100%;margin-right:-200px;} \n    .right{width:100px;float:right;}\n利用table实现\n** 一列不定宽，一列自适应 **\n利用float+overflow实现\n\n    .left{float:left;background-color: red;height: 100px;}\n    .right{background-color: blue;overflow: hidden;height: 100px;}\n不需要设定高度。会自适应。\n\n** 多列式分布 **\n* div+float\n\n** 九宫格布局 **\n* div+table\n\n##### 【css性能优化】\n\n** 模块化：**\n让代码高度重用，提高开发效率。\n模块与模块之间尽量不要包含相同的部分，如果有，提取出来，拆分成一个独立的模块。\n\n** css命名：**\n用英文。大小驼峰、下划线等。驼峰表示区别不同单词，下划线表示从属关系。\n避免重复命名，自己的代码前加上属于自己的前缀。\n** class的使用：多组合，少继承。 **\n\n** 上下margin处理：**\n如果不确定模块的上下margin特别稳定，最好不要将它写在模块的类里，而是使用类的组合，单独为上下margin挂用于边距的原子类（如mt10、mb20）。模块最好不要混用margin-top和margin-bottom，统一使用某一个。\n\n** 低权重原则：**\n避免滥用自选择器。当不同选择符的样式设置有冲突时，会采用权重高的选择符设置样式。选择符权重相同，为就近原则。\n\n** 权重原则：**\nHTML标签为1（如p），class为10，id为100。css选择符保证权重尽可能低。\n使用子选择器，会增加css选择符的权重。新添class更利于维护。\n\n** css sprite技术：**\n将网站的多张背景图片合并到一张大图上。利用background-position属性来展示我们需要的部分,图片加载会发出HTTP请求，而使用css sprite就减少了HTTP请求次数。减轻服务器压力。只能合并背景图片。对于横向和纵向都平铺的图片，不能使用css sprite，只能或横向，或纵向。排版要尽量紧凑。\n缺点：降低开发效率和增大维护难度，是否使用取决于网站流量。\n\n** css常见问题：** \n* 编码风格：\n   - 多行式可读性强，不过会增大css文件大小，一行式可读性较差，不过利于提高开发速度，减小css文件大小。推荐一行式。\n* id和class：\n    -同一网页，相同id只能出现一次，但是class无限制。id的权重大于class。不过原生JS提供getElementId()方法，不支持class。使用id会限制网页的扩展性。一般情况下，建议尽量使用class，少用id。\n* css hack：\n    - IE条件注释法（兼容性最好，增加了开发和维护成本）\n    - 选择符前缀法（增强了可维护性，不过兼容性欠佳，不能用于内联样式）\n    - 样式属性前缀法（集合度更高，代码更加精简，可维护性更强，但存在兼容风险，可用于内联样式）  \n* 解决超链接访问后hover样式不出现的问题：\n    - a标签四种状态的排 序问题，love hate原则 ，即l(link)ov(visited)e h(hover)a(active)te。\n* haslayout：\n   -IE浏览器的专有属性，用于css的解析引擎。很多bug都因为haslayout没有被自动触发。最好的解决方法：zoom。\n* 块级元素和行内元素：\n    - 使用display转换。\n* IE6、7不支持display：inline-block。\n* relative、absolute和float：不要滥用。\n##### 【css预处理】\n用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。","slug":"第二次讨论","published":1,"updated":"2017-08-15T12:51:49.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8d5000zlso053m0e5jz","content":"<p><strong> 这些是小组第二次讨论，主要讨论了响应式设计、布局、css性能优化、css预处理 </strong><br><a id=\"more\"></a></p>\n<h5 id=\"【响应式设计】\"><a href=\"#【响应式设计】\" class=\"headerlink\" title=\"【响应式设计】\"></a>【响应式设计】</h5><p>集中创建页面的图片排版大小，可以智能地根据用户行为以及使用的设备环境（系统平台、屏幕尺寸、屏幕定向等）进行相对应的布局。<br>响应式布局：<br>meta标签的实用：设置布局宽度等于设备宽度，布局viewport等于度量viewport<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</code></p>\n<h5 id=\"【【布局】】\"><a href=\"#【【布局】】\" class=\"headerlink\" title=\"【【布局】】\"></a>【【布局】】</h5><h5 id=\"【水平居中】\"><a href=\"#【水平居中】\" class=\"headerlink\" title=\"【水平居中】\"></a>【水平居中】</h5><p><strong> text-align和inline-block的联合使用：</strong><br>text-align属性：通过指定行框与哪个点对齐，从而设置\u001f块级元素内文本的水平对齐方式。（从而child为文本行内元素，parent为块状元素，可以通过display来设置）。  </p>\n<pre><code>.parent{text-align: center;} //父元素\n.child{display: inline-block;}//子元素  \n</code></pre><p>不过此方法兼容性比较好，IE浏览器接收。不过代码较多，同时要设置父元素和子元素。<br><strong> 使用margin：0 auto设置 </strong>  </p>\n<pre><code>.child{width:100px;margin:0 auto;}//必须要有宽度\n</code></pre><p>margin设置的是块级元素的居中。兼容性好，不过需要设置宽度。<br><strong> display：table设置 </strong></p>\n<pre><code>.child{display:table;margin:0 auto;}\n</code></pre><p>此方法只需对自身进行设置，代码简短。不过在IE6、7上，需要进行调整。<br><strong> 使用绝对定位 </strong></p>\n<pre><code>.parent{position:relative;}\n/*或者实用margin-left的负值为盒子宽度的一半也可以实现，不过这样就必须知道盒子的宽度，但兼容性好*/\n.child{position:absolute;left:50%;transform:translate(-50%);}\n</code></pre><p>transform：translate。移动transform在translation的方向和距离。简单的说，向某方向移动物体多少距离。<br>不过这个方法兼容性不好，要IE9 以上。</p>\n<h5 id=\"【垂直居中】\"><a href=\"#【垂直居中】\" class=\"headerlink\" title=\"【垂直居中】\"></a>【垂直居中】</h5><p><strong> vertical-align方法 </strong></p>\n<pre><code>/*第一种方法*/ \n.parent{display:table-cell;vertical-align:middle;height:20px;} \n/*第二种方法*/ \n.parent{display:inline-block;vertical-align:middle;line-height:20px;}\n</code></pre><p>在使用vertical-align的时候，由于对齐的基线是用行高的基线作为标记，故需要设置line-height或设置display:table-cell。<br><strong> 使用绝对定位 </strong></p>\n<pre><code>.parent{position:relative;} \n.child{positon:absolute;top:50%;transform:translate(0,-50%);}\n</code></pre><p>注意与水平居中的区别</p>\n<h5 id=\"【水平垂直居中】\"><a href=\"#【水平垂直居中】\" class=\"headerlink\" title=\"【水平垂直居中】\"></a>【水平垂直居中】</h5><p><strong> 利用vertical-align,text-align,inline-block实现 </strong></p>\n<pre><code>.parent{display:table-cell;vertical-align:middle;text-align:center;} \n.child{display:inline-block;}\n</code></pre><p><strong> 使用绝对定位 </strong></p>\n<pre><code>.parent{position:relative;} \n.child{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);}\n</code></pre><p>由上可知，绝对定位可以实现任何方式的居中，不过还要考虑兼容性问题。</p>\n<h5 id=\"【多列布局】\"><a href=\"#【多列布局】\" class=\"headerlink\" title=\"【多列布局】\"></a>【多列布局】</h5><p><strong> 左列定宽，右列自适应： </strong><br>使用float+margin  </p>\n<pre><code>.left{float:left;width:100px;}\n.right{margin-left:100px;}\n</code></pre><p>经试验，如果不用margin的话，必须设置高度。IE6会有3px的bug<br>使用table实现</p>\n<pre><code>.parent{display:table;table-layout:fixed;width:100%;} \n.left{display:table-cell;} \n.right{width:100px;display:table-cell;}\n</code></pre><p><strong> 两列定宽，一列自适应 </strong><br>使用margin+float<br>利用float+overflow实现</p>\n<pre><code>.left,.center{float:left:width:200px;} \n.right{overflow:hidden;}\n</code></pre><p>利用table实现<br><strong> 两侧自适应，中间定宽（网页布局常用） </strong><br>使用margin+float </p>\n<pre><code>.left{width：100px;float:left;}\n.center{float:left;width:100%;margin-right:-200px;} \n.right{width:100px;float:right;}\n</code></pre><p>利用table实现<br><strong> 一列不定宽，一列自适应 </strong><br>利用float+overflow实现</p>\n<pre><code>.left{float:left;background-color: red;height: 100px;}\n.right{background-color: blue;overflow: hidden;height: 100px;}\n</code></pre><p>不需要设定高度。会自适应。</p>\n<p><strong> 多列式分布 </strong></p>\n<ul>\n<li>div+float</li>\n</ul>\n<p><strong> 九宫格布局 </strong></p>\n<ul>\n<li>div+table</li>\n</ul>\n<h5 id=\"【css性能优化】\"><a href=\"#【css性能优化】\" class=\"headerlink\" title=\"【css性能优化】\"></a>【css性能优化】</h5><p><strong> 模块化：</strong><br>让代码高度重用，提高开发效率。<br>模块与模块之间尽量不要包含相同的部分，如果有，提取出来，拆分成一个独立的模块。</p>\n<p><strong> css命名：</strong><br>用英文。大小驼峰、下划线等。驼峰表示区别不同单词，下划线表示从属关系。<br>避免重复命名，自己的代码前加上属于自己的前缀。<br><strong> class的使用：多组合，少继承。 </strong></p>\n<p><strong> 上下margin处理：</strong><br>如果不确定模块的上下margin特别稳定，最好不要将它写在模块的类里，而是使用类的组合，单独为上下margin挂用于边距的原子类（如mt10、mb20）。模块最好不要混用margin-top和margin-bottom，统一使用某一个。</p>\n<p><strong> 低权重原则：</strong><br>避免滥用自选择器。当不同选择符的样式设置有冲突时，会采用权重高的选择符设置样式。选择符权重相同，为就近原则。</p>\n<p><strong> 权重原则：</strong><br>HTML标签为1（如p），class为10，id为100。css选择符保证权重尽可能低。<br>使用子选择器，会增加css选择符的权重。新添class更利于维护。</p>\n<p><strong> css sprite技术：</strong><br>将网站的多张背景图片合并到一张大图上。利用background-position属性来展示我们需要的部分,图片加载会发出HTTP请求，而使用css sprite就减少了HTTP请求次数。减轻服务器压力。只能合并背景图片。对于横向和纵向都平铺的图片，不能使用css sprite，只能或横向，或纵向。排版要尽量紧凑。<br>缺点：降低开发效率和增大维护难度，是否使用取决于网站流量。</p>\n<p><strong> css常见问题：</strong> </p>\n<ul>\n<li>编码风格：<ul>\n<li>多行式可读性强，不过会增大css文件大小，一行式可读性较差，不过利于提高开发速度，减小css文件大小。推荐一行式。</li>\n</ul>\n</li>\n<li>id和class：<br>  -同一网页，相同id只能出现一次，但是class无限制。id的权重大于class。不过原生JS提供getElementId()方法，不支持class。使用id会限制网页的扩展性。一般情况下，建议尽量使用class，少用id。</li>\n<li>css hack：<ul>\n<li>IE条件注释法（兼容性最好，增加了开发和维护成本）</li>\n<li>选择符前缀法（增强了可维护性，不过兼容性欠佳，不能用于内联样式）</li>\n<li>样式属性前缀法（集合度更高，代码更加精简，可维护性更强，但存在兼容风险，可用于内联样式）  </li>\n</ul>\n</li>\n<li>解决超链接访问后hover样式不出现的问题：<ul>\n<li>a标签四种状态的排 序问题，love hate原则 ，即l(link)ov(visited)e h(hover)a(active)te。</li>\n</ul>\n</li>\n<li>haslayout：<br> -IE浏览器的专有属性，用于css的解析引擎。很多bug都因为haslayout没有被自动触发。最好的解决方法：zoom。</li>\n<li>块级元素和行内元素：<ul>\n<li>使用display转换。</li>\n</ul>\n</li>\n<li>IE6、7不支持display：inline-block。</li>\n<li>relative、absolute和float：不要滥用。<h5 id=\"【css预处理】\"><a href=\"#【css预处理】\" class=\"headerlink\" title=\"【css预处理】\"></a>【css预处理】</h5>用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><strong> 这些是小组第二次讨论，主要讨论了响应式设计、布局、css性能优化、css预处理 </strong><br>","more":"</p>\n<h5 id=\"【响应式设计】\"><a href=\"#【响应式设计】\" class=\"headerlink\" title=\"【响应式设计】\"></a>【响应式设计】</h5><p>集中创建页面的图片排版大小，可以智能地根据用户行为以及使用的设备环境（系统平台、屏幕尺寸、屏幕定向等）进行相对应的布局。<br>响应式布局：<br>meta标签的实用：设置布局宽度等于设备宽度，布局viewport等于度量viewport<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</code></p>\n<h5 id=\"【【布局】】\"><a href=\"#【【布局】】\" class=\"headerlink\" title=\"【【布局】】\"></a>【【布局】】</h5><h5 id=\"【水平居中】\"><a href=\"#【水平居中】\" class=\"headerlink\" title=\"【水平居中】\"></a>【水平居中】</h5><p><strong> text-align和inline-block的联合使用：</strong><br>text-align属性：通过指定行框与哪个点对齐，从而设置\u001f块级元素内文本的水平对齐方式。（从而child为文本行内元素，parent为块状元素，可以通过display来设置）。  </p>\n<pre><code>.parent{text-align: center;} //父元素\n.child{display: inline-block;}//子元素  \n</code></pre><p>不过此方法兼容性比较好，IE浏览器接收。不过代码较多，同时要设置父元素和子元素。<br><strong> 使用margin：0 auto设置 </strong>  </p>\n<pre><code>.child{width:100px;margin:0 auto;}//必须要有宽度\n</code></pre><p>margin设置的是块级元素的居中。兼容性好，不过需要设置宽度。<br><strong> display：table设置 </strong></p>\n<pre><code>.child{display:table;margin:0 auto;}\n</code></pre><p>此方法只需对自身进行设置，代码简短。不过在IE6、7上，需要进行调整。<br><strong> 使用绝对定位 </strong></p>\n<pre><code>.parent{position:relative;}\n/*或者实用margin-left的负值为盒子宽度的一半也可以实现，不过这样就必须知道盒子的宽度，但兼容性好*/\n.child{position:absolute;left:50%;transform:translate(-50%);}\n</code></pre><p>transform：translate。移动transform在translation的方向和距离。简单的说，向某方向移动物体多少距离。<br>不过这个方法兼容性不好，要IE9 以上。</p>\n<h5 id=\"【垂直居中】\"><a href=\"#【垂直居中】\" class=\"headerlink\" title=\"【垂直居中】\"></a>【垂直居中】</h5><p><strong> vertical-align方法 </strong></p>\n<pre><code>/*第一种方法*/ \n.parent{display:table-cell;vertical-align:middle;height:20px;} \n/*第二种方法*/ \n.parent{display:inline-block;vertical-align:middle;line-height:20px;}\n</code></pre><p>在使用vertical-align的时候，由于对齐的基线是用行高的基线作为标记，故需要设置line-height或设置display:table-cell。<br><strong> 使用绝对定位 </strong></p>\n<pre><code>.parent{position:relative;} \n.child{positon:absolute;top:50%;transform:translate(0,-50%);}\n</code></pre><p>注意与水平居中的区别</p>\n<h5 id=\"【水平垂直居中】\"><a href=\"#【水平垂直居中】\" class=\"headerlink\" title=\"【水平垂直居中】\"></a>【水平垂直居中】</h5><p><strong> 利用vertical-align,text-align,inline-block实现 </strong></p>\n<pre><code>.parent{display:table-cell;vertical-align:middle;text-align:center;} \n.child{display:inline-block;}\n</code></pre><p><strong> 使用绝对定位 </strong></p>\n<pre><code>.parent{position:relative;} \n.child{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);}\n</code></pre><p>由上可知，绝对定位可以实现任何方式的居中，不过还要考虑兼容性问题。</p>\n<h5 id=\"【多列布局】\"><a href=\"#【多列布局】\" class=\"headerlink\" title=\"【多列布局】\"></a>【多列布局】</h5><p><strong> 左列定宽，右列自适应： </strong><br>使用float+margin  </p>\n<pre><code>.left{float:left;width:100px;}\n.right{margin-left:100px;}\n</code></pre><p>经试验，如果不用margin的话，必须设置高度。IE6会有3px的bug<br>使用table实现</p>\n<pre><code>.parent{display:table;table-layout:fixed;width:100%;} \n.left{display:table-cell;} \n.right{width:100px;display:table-cell;}\n</code></pre><p><strong> 两列定宽，一列自适应 </strong><br>使用margin+float<br>利用float+overflow实现</p>\n<pre><code>.left,.center{float:left:width:200px;} \n.right{overflow:hidden;}\n</code></pre><p>利用table实现<br><strong> 两侧自适应，中间定宽（网页布局常用） </strong><br>使用margin+float </p>\n<pre><code>.left{width：100px;float:left;}\n.center{float:left;width:100%;margin-right:-200px;} \n.right{width:100px;float:right;}\n</code></pre><p>利用table实现<br><strong> 一列不定宽，一列自适应 </strong><br>利用float+overflow实现</p>\n<pre><code>.left{float:left;background-color: red;height: 100px;}\n.right{background-color: blue;overflow: hidden;height: 100px;}\n</code></pre><p>不需要设定高度。会自适应。</p>\n<p><strong> 多列式分布 </strong></p>\n<ul>\n<li>div+float</li>\n</ul>\n<p><strong> 九宫格布局 </strong></p>\n<ul>\n<li>div+table</li>\n</ul>\n<h5 id=\"【css性能优化】\"><a href=\"#【css性能优化】\" class=\"headerlink\" title=\"【css性能优化】\"></a>【css性能优化】</h5><p><strong> 模块化：</strong><br>让代码高度重用，提高开发效率。<br>模块与模块之间尽量不要包含相同的部分，如果有，提取出来，拆分成一个独立的模块。</p>\n<p><strong> css命名：</strong><br>用英文。大小驼峰、下划线等。驼峰表示区别不同单词，下划线表示从属关系。<br>避免重复命名，自己的代码前加上属于自己的前缀。<br><strong> class的使用：多组合，少继承。 </strong></p>\n<p><strong> 上下margin处理：</strong><br>如果不确定模块的上下margin特别稳定，最好不要将它写在模块的类里，而是使用类的组合，单独为上下margin挂用于边距的原子类（如mt10、mb20）。模块最好不要混用margin-top和margin-bottom，统一使用某一个。</p>\n<p><strong> 低权重原则：</strong><br>避免滥用自选择器。当不同选择符的样式设置有冲突时，会采用权重高的选择符设置样式。选择符权重相同，为就近原则。</p>\n<p><strong> 权重原则：</strong><br>HTML标签为1（如p），class为10，id为100。css选择符保证权重尽可能低。<br>使用子选择器，会增加css选择符的权重。新添class更利于维护。</p>\n<p><strong> css sprite技术：</strong><br>将网站的多张背景图片合并到一张大图上。利用background-position属性来展示我们需要的部分,图片加载会发出HTTP请求，而使用css sprite就减少了HTTP请求次数。减轻服务器压力。只能合并背景图片。对于横向和纵向都平铺的图片，不能使用css sprite，只能或横向，或纵向。排版要尽量紧凑。<br>缺点：降低开发效率和增大维护难度，是否使用取决于网站流量。</p>\n<p><strong> css常见问题：</strong> </p>\n<ul>\n<li>编码风格：<ul>\n<li>多行式可读性强，不过会增大css文件大小，一行式可读性较差，不过利于提高开发速度，减小css文件大小。推荐一行式。</li>\n</ul>\n</li>\n<li>id和class：<br>  -同一网页，相同id只能出现一次，但是class无限制。id的权重大于class。不过原生JS提供getElementId()方法，不支持class。使用id会限制网页的扩展性。一般情况下，建议尽量使用class，少用id。</li>\n<li>css hack：<ul>\n<li>IE条件注释法（兼容性最好，增加了开发和维护成本）</li>\n<li>选择符前缀法（增强了可维护性，不过兼容性欠佳，不能用于内联样式）</li>\n<li>样式属性前缀法（集合度更高，代码更加精简，可维护性更强，但存在兼容风险，可用于内联样式）  </li>\n</ul>\n</li>\n<li>解决超链接访问后hover样式不出现的问题：<ul>\n<li>a标签四种状态的排 序问题，love hate原则 ，即l(link)ov(visited)e h(hover)a(active)te。</li>\n</ul>\n</li>\n<li>haslayout：<br> -IE浏览器的专有属性，用于css的解析引擎。很多bug都因为haslayout没有被自动触发。最好的解决方法：zoom。</li>\n<li>块级元素和行内元素：<ul>\n<li>使用display转换。</li>\n</ul>\n</li>\n<li>IE6、7不支持display：inline-block。</li>\n<li>relative、absolute和float：不要滥用。<h5 id=\"【css预处理】\"><a href=\"#【css预处理】\" class=\"headerlink\" title=\"【css预处理】\"></a>【css预处理】</h5>用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。</li>\n</ul>"},{"title":"纪念一下做程序员这半年","date":"2017-01-15T16:06:36.000Z","_content":"** 这篇文章只是仅仅为了纪念一下我做程序员的半周年 **\n什么时候开始决定做程序员呢，具体的心理变化可能没有那么清楚，不过大概的事件变化还是知道的。 \n<!--more--> \n##### 2016-07-16\n\n <img src=\"http://upload-images.jianshu.io/upload_images/3326189-f0d15de6ddab9247.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width = \"500\" height = \"800\" alt=\"1.jpg\" align=center />\n\n2016年的夏天，刚好结束了大一的懵懂迷茫的日子，从七月初开始的军训也进入尾声，这一天的太阳对于一个已经经历过半个多月的被太阳暴晒的我而言，貌似没有那么狠毒。今天是军训结束的那一天，也是我踏进极客网的第一天。今天开始了所谓的宣讲会，我也不知道我是抱着什么样的心态踏进这里的。可能是为了不让自己的大学变得那么碌碌无为，无所事事，或许也是为了所谓了以后的毕业后的社会生活。可是不管怎样，我来了，也从未想主动离开。模模糊糊记得那时候大二大三的学姐学长们的话，模模糊糊的记得刘老师的只言片语，模模糊糊的记得我坐在第二排右边的第二个位置。那时候的我还对程序员的一切感到陌生但并未恐惧。\n\n##### 2016-7-17——2016-9(HTML和CSS和初步了解JavaScript)\n\n<img src=\"http://upload-images.jianshu.io/upload_images/3326189-81bd808c5b5fd5c4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width = \"500\" height = \"800\" alt=\"2.jpg\" align=center/>\n\n这是大学的第一个暑假，因为所谓的心中抱负，所谓的程序员的理想，留在了学校。这也是我开始代码生活的第一个假期。第一次做网页做的是叫一个“恭贺新春”的网页，现在看来完全小菜一碟，可是当时我的内心可是崩溃的好么。对于一个小白的不能再小白的我而言，一个网页对于我而言也是很痛苦的。完全懵逼。不过好在我通过我不知道是什么的毅力给他做出来了，那时候没有讲究所谓的代码规范，命名规范，不要用表格布局什么的，连编辑器都没有讲究。反正就是我现在都忘了我是怎么把它做好的。现在那个成品在我的电脑里面，我都不忍心去打开它，总觉得那么的那啥。后来又陆陆续续的做了一个页面跟五个组件，就完全适应了某种模式。而且，也跟工作室的大家混熟了。  \n现在想起来，在那个暑假最好的就是在工作室占据了自己的一席之地，慢慢的把自己的生活用品拿到了工作室，慢慢的，这里变成了我大学除了寝室之外最熟悉最有我生活气息的地方了。而最熟悉的话，莫过于室长大人每天说的代码规范和看那两本他所“代言”的两本书，虽然我在暑假结束都没有看那两本书，而是在暑假结束之后看的。\n##### 2016-9——2016-11(JavaScript和JQuery)\n<img src=\"http://upload-images.jianshu.io/upload_images/3326189-996c0d38325535a9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width = \"500\" height = \"877\" alt=\"3.jpg\" align=center />\n这两个月主要是学习了JavaScript和jQuery。主要是看了《JavaScript高级程序设计》和《锋利的jQuery》这两本书，对于JavaScript高程就是看了一遍，做了十几篇类似于笔记的博客。而对于jQuery，做过几篇笔记，也用jQuery写了一个比较复杂的优设网。\n这一段时间也是学习的一个缓慢期。主要都是通过看书来学习，可能是我毅力不够，看书对于我而言也是比较懵逼的，特别是看完一遍高程之后的一脸懵逼，想想还真好笑。\n##### 2016-10\n<img src=\"http://upload-images.jianshu.io/upload_images/3326189-c27d2884c2972145.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width = \"500\" height = \"667\" alt=\"4.jpg\" align=center />\n\n这个月要单独列出来说一下咯。哈哈哈，这个月工作室联盟，开始了对大一的 新生招新，想想他们真好，可以大一就开始接触技术。而自己确是大二了才开始。而且也开始那第一次的培训，由室长大大亲自操刀。\n##### 2016-11——2016-12(校园博览会项目制作)\n<img src=\"http://upload-images.jianshu.io/upload_images/3326189-a455193b4ec9ce03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width = \"500\" height = \"375\" alt=\"4.jpg\" align=center />\n\n这一个多月，是我这学期最忙也是最充实的一个月。即使中间有那么一点的不开心与不理解，不过最后的结果还是挺好的。这一个月也让我成长了很多，也许也在工作室某些人的心里突然变得比较厉害起来，但是也只有自己知道自己是几斤几两，其实心理压力还是蛮大的。\n这个项目本来一开始并不是我在参与，可是由于种种原因，我也是在小半路上加进去了。学到的最多的可能就是交互的功能的使用。一开始其实我没有主动去接这个项目，更多的是因为害怕，我怕自己的能力太弱，不敢去接。后来我也懂了，有些东西，真的要靠自己去争取的，不然真的很难去获得这个机会并去成长，也不要害怕自己能力不够，能力，就是在实践中获取的。\n##### 2016-12——2017-1\n 这一个月貌似对代码的感染力没有那么大了，基本上都是被四级考试、期末考试这两样东西所占据，不过在期末考试之前，我开始入门看了一部分的ES6，不够可惜的是，没有总结的博客。而且，看的也不多，看过的一些东西，在期末完了之后，发现自己也忘记了，只有从头开始了。\n<img src=\"http://upload-images.jianshu.io/upload_images/3326189-975c2c5d48aeb4ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width = \"313\" height = \"340\" alt=\"5.jpg\" align=center />\n##### 2017-1——2017-1-16\n好了，也就是到今天了，刚刚好半年。做程序员的这半年，也许，从某种角度而言，这半年，我也不算真正的程序员，只是从一个职业小白变成了半黑半白的我，还多亏学姐学长们的帮助。未来的路还很长，当然，我会坚持做程序员。毕竟，这是我上大学了，坚持了那么久的事情。在很多人眼中变成了一个刻苦认真，为自己目标好好奋斗的励志青年。未来。我更要好好的加油。\n加油吧，自己！\n##### 最后总结一下这半年的成果\n* 三个网页\n  * 恭贺新春\n  * 卓一企管\n  * 优设网\n* 五个组件\n  * 表单验证\n  * Tab选项卡\n  * 轮播\n  * 弹出登录框\n  * json分页\n* 两个项目\n  * 校园博览会\n  * 极客网官网（还在进行中）\n* 工具使用\n  * github\n  * 博客园写了22篇博客\n  * coding\n  * sublime\n  * 谷歌调试器\n  * coding\n  * 用Hexo搭建了自己的博客\n  * 简书\n  * RAP\n* 阅读书籍\n  * 《精通CSS》\n  * 《编写高质量代码》\n  * 《JavaScript高级程序设计》\n  * 《锋利的jQuery》\n  * 《ES6》  \n\n看的书籍可能不是很多。在这个寒假我还会再看，会比较偏向学习node，夯实JavaScript的知识，还有完成工作室官网。加油吧，向未来跨进。","source":"_posts/纪念一下做程序员这半年.md","raw":"---\ntitle: 纪念一下做程序员这半年\ndate: 2017-01-16 00:06:36\ntags: 纪念\ncategories: 日常\n---\n** 这篇文章只是仅仅为了纪念一下我做程序员的半周年 **\n什么时候开始决定做程序员呢，具体的心理变化可能没有那么清楚，不过大概的事件变化还是知道的。 \n<!--more--> \n##### 2016-07-16\n\n <img src=\"http://upload-images.jianshu.io/upload_images/3326189-f0d15de6ddab9247.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width = \"500\" height = \"800\" alt=\"1.jpg\" align=center />\n\n2016年的夏天，刚好结束了大一的懵懂迷茫的日子，从七月初开始的军训也进入尾声，这一天的太阳对于一个已经经历过半个多月的被太阳暴晒的我而言，貌似没有那么狠毒。今天是军训结束的那一天，也是我踏进极客网的第一天。今天开始了所谓的宣讲会，我也不知道我是抱着什么样的心态踏进这里的。可能是为了不让自己的大学变得那么碌碌无为，无所事事，或许也是为了所谓了以后的毕业后的社会生活。可是不管怎样，我来了，也从未想主动离开。模模糊糊记得那时候大二大三的学姐学长们的话，模模糊糊的记得刘老师的只言片语，模模糊糊的记得我坐在第二排右边的第二个位置。那时候的我还对程序员的一切感到陌生但并未恐惧。\n\n##### 2016-7-17——2016-9(HTML和CSS和初步了解JavaScript)\n\n<img src=\"http://upload-images.jianshu.io/upload_images/3326189-81bd808c5b5fd5c4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width = \"500\" height = \"800\" alt=\"2.jpg\" align=center/>\n\n这是大学的第一个暑假，因为所谓的心中抱负，所谓的程序员的理想，留在了学校。这也是我开始代码生活的第一个假期。第一次做网页做的是叫一个“恭贺新春”的网页，现在看来完全小菜一碟，可是当时我的内心可是崩溃的好么。对于一个小白的不能再小白的我而言，一个网页对于我而言也是很痛苦的。完全懵逼。不过好在我通过我不知道是什么的毅力给他做出来了，那时候没有讲究所谓的代码规范，命名规范，不要用表格布局什么的，连编辑器都没有讲究。反正就是我现在都忘了我是怎么把它做好的。现在那个成品在我的电脑里面，我都不忍心去打开它，总觉得那么的那啥。后来又陆陆续续的做了一个页面跟五个组件，就完全适应了某种模式。而且，也跟工作室的大家混熟了。  \n现在想起来，在那个暑假最好的就是在工作室占据了自己的一席之地，慢慢的把自己的生活用品拿到了工作室，慢慢的，这里变成了我大学除了寝室之外最熟悉最有我生活气息的地方了。而最熟悉的话，莫过于室长大人每天说的代码规范和看那两本他所“代言”的两本书，虽然我在暑假结束都没有看那两本书，而是在暑假结束之后看的。\n##### 2016-9——2016-11(JavaScript和JQuery)\n<img src=\"http://upload-images.jianshu.io/upload_images/3326189-996c0d38325535a9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width = \"500\" height = \"877\" alt=\"3.jpg\" align=center />\n这两个月主要是学习了JavaScript和jQuery。主要是看了《JavaScript高级程序设计》和《锋利的jQuery》这两本书，对于JavaScript高程就是看了一遍，做了十几篇类似于笔记的博客。而对于jQuery，做过几篇笔记，也用jQuery写了一个比较复杂的优设网。\n这一段时间也是学习的一个缓慢期。主要都是通过看书来学习，可能是我毅力不够，看书对于我而言也是比较懵逼的，特别是看完一遍高程之后的一脸懵逼，想想还真好笑。\n##### 2016-10\n<img src=\"http://upload-images.jianshu.io/upload_images/3326189-c27d2884c2972145.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width = \"500\" height = \"667\" alt=\"4.jpg\" align=center />\n\n这个月要单独列出来说一下咯。哈哈哈，这个月工作室联盟，开始了对大一的 新生招新，想想他们真好，可以大一就开始接触技术。而自己确是大二了才开始。而且也开始那第一次的培训，由室长大大亲自操刀。\n##### 2016-11——2016-12(校园博览会项目制作)\n<img src=\"http://upload-images.jianshu.io/upload_images/3326189-a455193b4ec9ce03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width = \"500\" height = \"375\" alt=\"4.jpg\" align=center />\n\n这一个多月，是我这学期最忙也是最充实的一个月。即使中间有那么一点的不开心与不理解，不过最后的结果还是挺好的。这一个月也让我成长了很多，也许也在工作室某些人的心里突然变得比较厉害起来，但是也只有自己知道自己是几斤几两，其实心理压力还是蛮大的。\n这个项目本来一开始并不是我在参与，可是由于种种原因，我也是在小半路上加进去了。学到的最多的可能就是交互的功能的使用。一开始其实我没有主动去接这个项目，更多的是因为害怕，我怕自己的能力太弱，不敢去接。后来我也懂了，有些东西，真的要靠自己去争取的，不然真的很难去获得这个机会并去成长，也不要害怕自己能力不够，能力，就是在实践中获取的。\n##### 2016-12——2017-1\n 这一个月貌似对代码的感染力没有那么大了，基本上都是被四级考试、期末考试这两样东西所占据，不过在期末考试之前，我开始入门看了一部分的ES6，不够可惜的是，没有总结的博客。而且，看的也不多，看过的一些东西，在期末完了之后，发现自己也忘记了，只有从头开始了。\n<img src=\"http://upload-images.jianshu.io/upload_images/3326189-975c2c5d48aeb4ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width = \"313\" height = \"340\" alt=\"5.jpg\" align=center />\n##### 2017-1——2017-1-16\n好了，也就是到今天了，刚刚好半年。做程序员的这半年，也许，从某种角度而言，这半年，我也不算真正的程序员，只是从一个职业小白变成了半黑半白的我，还多亏学姐学长们的帮助。未来的路还很长，当然，我会坚持做程序员。毕竟，这是我上大学了，坚持了那么久的事情。在很多人眼中变成了一个刻苦认真，为自己目标好好奋斗的励志青年。未来。我更要好好的加油。\n加油吧，自己！\n##### 最后总结一下这半年的成果\n* 三个网页\n  * 恭贺新春\n  * 卓一企管\n  * 优设网\n* 五个组件\n  * 表单验证\n  * Tab选项卡\n  * 轮播\n  * 弹出登录框\n  * json分页\n* 两个项目\n  * 校园博览会\n  * 极客网官网（还在进行中）\n* 工具使用\n  * github\n  * 博客园写了22篇博客\n  * coding\n  * sublime\n  * 谷歌调试器\n  * coding\n  * 用Hexo搭建了自己的博客\n  * 简书\n  * RAP\n* 阅读书籍\n  * 《精通CSS》\n  * 《编写高质量代码》\n  * 《JavaScript高级程序设计》\n  * 《锋利的jQuery》\n  * 《ES6》  \n\n看的书籍可能不是很多。在这个寒假我还会再看，会比较偏向学习node，夯实JavaScript的知识，还有完成工作室官网。加油吧，向未来跨进。","slug":"纪念一下做程序员这半年","published":1,"updated":"2017-08-15T12:51:49.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6f2j8dc0011lso07nwh2i3v","content":"<p><strong> 这篇文章只是仅仅为了纪念一下我做程序员的半周年 </strong><br>什么时候开始决定做程序员呢，具体的心理变化可能没有那么清楚，不过大概的事件变化还是知道的。<br><a id=\"more\"></a> </p>\n<h5 id=\"2016-07-16\"><a href=\"#2016-07-16\" class=\"headerlink\" title=\"2016-07-16\"></a>2016-07-16</h5><p> <img src=\"http://upload-images.jianshu.io/upload_images/3326189-f0d15de6ddab9247.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width=\"500\" height=\"800\" alt=\"1.jpg\" align=\"center\"></p>\n<p>2016年的夏天，刚好结束了大一的懵懂迷茫的日子，从七月初开始的军训也进入尾声，这一天的太阳对于一个已经经历过半个多月的被太阳暴晒的我而言，貌似没有那么狠毒。今天是军训结束的那一天，也是我踏进极客网的第一天。今天开始了所谓的宣讲会，我也不知道我是抱着什么样的心态踏进这里的。可能是为了不让自己的大学变得那么碌碌无为，无所事事，或许也是为了所谓了以后的毕业后的社会生活。可是不管怎样，我来了，也从未想主动离开。模模糊糊记得那时候大二大三的学姐学长们的话，模模糊糊的记得刘老师的只言片语，模模糊糊的记得我坐在第二排右边的第二个位置。那时候的我还对程序员的一切感到陌生但并未恐惧。</p>\n<h5 id=\"2016-7-17——2016-9-HTML和CSS和初步了解JavaScript\"><a href=\"#2016-7-17——2016-9-HTML和CSS和初步了解JavaScript\" class=\"headerlink\" title=\"2016-7-17——2016-9(HTML和CSS和初步了解JavaScript)\"></a>2016-7-17——2016-9(HTML和CSS和初步了解JavaScript)</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/3326189-81bd808c5b5fd5c4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width=\"500\" height=\"800\" alt=\"2.jpg\" align=\"center/\"></p>\n<p>这是大学的第一个暑假，因为所谓的心中抱负，所谓的程序员的理想，留在了学校。这也是我开始代码生活的第一个假期。第一次做网页做的是叫一个“恭贺新春”的网页，现在看来完全小菜一碟，可是当时我的内心可是崩溃的好么。对于一个小白的不能再小白的我而言，一个网页对于我而言也是很痛苦的。完全懵逼。不过好在我通过我不知道是什么的毅力给他做出来了，那时候没有讲究所谓的代码规范，命名规范，不要用表格布局什么的，连编辑器都没有讲究。反正就是我现在都忘了我是怎么把它做好的。现在那个成品在我的电脑里面，我都不忍心去打开它，总觉得那么的那啥。后来又陆陆续续的做了一个页面跟五个组件，就完全适应了某种模式。而且，也跟工作室的大家混熟了。<br>现在想起来，在那个暑假最好的就是在工作室占据了自己的一席之地，慢慢的把自己的生活用品拿到了工作室，慢慢的，这里变成了我大学除了寝室之外最熟悉最有我生活气息的地方了。而最熟悉的话，莫过于室长大人每天说的代码规范和看那两本他所“代言”的两本书，虽然我在暑假结束都没有看那两本书，而是在暑假结束之后看的。</p>\n<h5 id=\"2016-9——2016-11-JavaScript和JQuery\"><a href=\"#2016-9——2016-11-JavaScript和JQuery\" class=\"headerlink\" title=\"2016-9——2016-11(JavaScript和JQuery)\"></a>2016-9——2016-11(JavaScript和JQuery)</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/3326189-996c0d38325535a9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width=\"500\" height=\"877\" alt=\"3.jpg\" align=\"center\"><br>这两个月主要是学习了JavaScript和jQuery。主要是看了《JavaScript高级程序设计》和《锋利的jQuery》这两本书，对于JavaScript高程就是看了一遍，做了十几篇类似于笔记的博客。而对于jQuery，做过几篇笔记，也用jQuery写了一个比较复杂的优设网。<br>这一段时间也是学习的一个缓慢期。主要都是通过看书来学习，可能是我毅力不够，看书对于我而言也是比较懵逼的，特别是看完一遍高程之后的一脸懵逼，想想还真好笑。</p>\n<h5 id=\"2016-10\"><a href=\"#2016-10\" class=\"headerlink\" title=\"2016-10\"></a>2016-10</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/3326189-c27d2884c2972145.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width=\"500\" height=\"667\" alt=\"4.jpg\" align=\"center\"></p>\n<p>这个月要单独列出来说一下咯。哈哈哈，这个月工作室联盟，开始了对大一的 新生招新，想想他们真好，可以大一就开始接触技术。而自己确是大二了才开始。而且也开始那第一次的培训，由室长大大亲自操刀。</p>\n<h5 id=\"2016-11——2016-12-校园博览会项目制作\"><a href=\"#2016-11——2016-12-校园博览会项目制作\" class=\"headerlink\" title=\"2016-11——2016-12(校园博览会项目制作)\"></a>2016-11——2016-12(校园博览会项目制作)</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/3326189-a455193b4ec9ce03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width=\"500\" height=\"375\" alt=\"4.jpg\" align=\"center\"></p>\n<p>这一个多月，是我这学期最忙也是最充实的一个月。即使中间有那么一点的不开心与不理解，不过最后的结果还是挺好的。这一个月也让我成长了很多，也许也在工作室某些人的心里突然变得比较厉害起来，但是也只有自己知道自己是几斤几两，其实心理压力还是蛮大的。<br>这个项目本来一开始并不是我在参与，可是由于种种原因，我也是在小半路上加进去了。学到的最多的可能就是交互的功能的使用。一开始其实我没有主动去接这个项目，更多的是因为害怕，我怕自己的能力太弱，不敢去接。后来我也懂了，有些东西，真的要靠自己去争取的，不然真的很难去获得这个机会并去成长，也不要害怕自己能力不够，能力，就是在实践中获取的。</p>\n<h5 id=\"2016-12——2017-1\"><a href=\"#2016-12——2017-1\" class=\"headerlink\" title=\"2016-12——2017-1\"></a>2016-12——2017-1</h5><p> 这一个月貌似对代码的感染力没有那么大了，基本上都是被四级考试、期末考试这两样东西所占据，不过在期末考试之前，我开始入门看了一部分的ES6，不够可惜的是，没有总结的博客。而且，看的也不多，看过的一些东西，在期末完了之后，发现自己也忘记了，只有从头开始了。<br><img src=\"http://upload-images.jianshu.io/upload_images/3326189-975c2c5d48aeb4ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width=\"313\" height=\"340\" alt=\"5.jpg\" align=\"center\"></p>\n<h5 id=\"2017-1——2017-1-16\"><a href=\"#2017-1——2017-1-16\" class=\"headerlink\" title=\"2017-1——2017-1-16\"></a>2017-1——2017-1-16</h5><p>好了，也就是到今天了，刚刚好半年。做程序员的这半年，也许，从某种角度而言，这半年，我也不算真正的程序员，只是从一个职业小白变成了半黑半白的我，还多亏学姐学长们的帮助。未来的路还很长，当然，我会坚持做程序员。毕竟，这是我上大学了，坚持了那么久的事情。在很多人眼中变成了一个刻苦认真，为自己目标好好奋斗的励志青年。未来。我更要好好的加油。<br>加油吧，自己！</p>\n<h5 id=\"最后总结一下这半年的成果\"><a href=\"#最后总结一下这半年的成果\" class=\"headerlink\" title=\"最后总结一下这半年的成果\"></a>最后总结一下这半年的成果</h5><ul>\n<li>三个网页<ul>\n<li>恭贺新春</li>\n<li>卓一企管</li>\n<li>优设网</li>\n</ul>\n</li>\n<li>五个组件<ul>\n<li>表单验证</li>\n<li>Tab选项卡</li>\n<li>轮播</li>\n<li>弹出登录框</li>\n<li>json分页</li>\n</ul>\n</li>\n<li>两个项目<ul>\n<li>校园博览会</li>\n<li>极客网官网（还在进行中）</li>\n</ul>\n</li>\n<li>工具使用<ul>\n<li>github</li>\n<li>博客园写了22篇博客</li>\n<li>coding</li>\n<li>sublime</li>\n<li>谷歌调试器</li>\n<li>coding</li>\n<li>用Hexo搭建了自己的博客</li>\n<li>简书</li>\n<li>RAP</li>\n</ul>\n</li>\n<li>阅读书籍<ul>\n<li>《精通CSS》</li>\n<li>《编写高质量代码》</li>\n<li>《JavaScript高级程序设计》</li>\n<li>《锋利的jQuery》</li>\n<li>《ES6》  </li>\n</ul>\n</li>\n</ul>\n<p>看的书籍可能不是很多。在这个寒假我还会再看，会比较偏向学习node，夯实JavaScript的知识，还有完成工作室官网。加油吧，向未来跨进。</p>\n","site":{"data":{}},"excerpt":"<p><strong> 这篇文章只是仅仅为了纪念一下我做程序员的半周年 </strong><br>什么时候开始决定做程序员呢，具体的心理变化可能没有那么清楚，不过大概的事件变化还是知道的。<br>","more":"</p>\n<h5 id=\"2016-07-16\"><a href=\"#2016-07-16\" class=\"headerlink\" title=\"2016-07-16\"></a>2016-07-16</h5><p> <img src=\"http://upload-images.jianshu.io/upload_images/3326189-f0d15de6ddab9247.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width=\"500\" height=\"800\" alt=\"1.jpg\" align=\"center\"></p>\n<p>2016年的夏天，刚好结束了大一的懵懂迷茫的日子，从七月初开始的军训也进入尾声，这一天的太阳对于一个已经经历过半个多月的被太阳暴晒的我而言，貌似没有那么狠毒。今天是军训结束的那一天，也是我踏进极客网的第一天。今天开始了所谓的宣讲会，我也不知道我是抱着什么样的心态踏进这里的。可能是为了不让自己的大学变得那么碌碌无为，无所事事，或许也是为了所谓了以后的毕业后的社会生活。可是不管怎样，我来了，也从未想主动离开。模模糊糊记得那时候大二大三的学姐学长们的话，模模糊糊的记得刘老师的只言片语，模模糊糊的记得我坐在第二排右边的第二个位置。那时候的我还对程序员的一切感到陌生但并未恐惧。</p>\n<h5 id=\"2016-7-17——2016-9-HTML和CSS和初步了解JavaScript\"><a href=\"#2016-7-17——2016-9-HTML和CSS和初步了解JavaScript\" class=\"headerlink\" title=\"2016-7-17——2016-9(HTML和CSS和初步了解JavaScript)\"></a>2016-7-17——2016-9(HTML和CSS和初步了解JavaScript)</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/3326189-81bd808c5b5fd5c4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width=\"500\" height=\"800\" alt=\"2.jpg\" align=\"center/\"></p>\n<p>这是大学的第一个暑假，因为所谓的心中抱负，所谓的程序员的理想，留在了学校。这也是我开始代码生活的第一个假期。第一次做网页做的是叫一个“恭贺新春”的网页，现在看来完全小菜一碟，可是当时我的内心可是崩溃的好么。对于一个小白的不能再小白的我而言，一个网页对于我而言也是很痛苦的。完全懵逼。不过好在我通过我不知道是什么的毅力给他做出来了，那时候没有讲究所谓的代码规范，命名规范，不要用表格布局什么的，连编辑器都没有讲究。反正就是我现在都忘了我是怎么把它做好的。现在那个成品在我的电脑里面，我都不忍心去打开它，总觉得那么的那啥。后来又陆陆续续的做了一个页面跟五个组件，就完全适应了某种模式。而且，也跟工作室的大家混熟了。<br>现在想起来，在那个暑假最好的就是在工作室占据了自己的一席之地，慢慢的把自己的生活用品拿到了工作室，慢慢的，这里变成了我大学除了寝室之外最熟悉最有我生活气息的地方了。而最熟悉的话，莫过于室长大人每天说的代码规范和看那两本他所“代言”的两本书，虽然我在暑假结束都没有看那两本书，而是在暑假结束之后看的。</p>\n<h5 id=\"2016-9——2016-11-JavaScript和JQuery\"><a href=\"#2016-9——2016-11-JavaScript和JQuery\" class=\"headerlink\" title=\"2016-9——2016-11(JavaScript和JQuery)\"></a>2016-9——2016-11(JavaScript和JQuery)</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/3326189-996c0d38325535a9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width=\"500\" height=\"877\" alt=\"3.jpg\" align=\"center\"><br>这两个月主要是学习了JavaScript和jQuery。主要是看了《JavaScript高级程序设计》和《锋利的jQuery》这两本书，对于JavaScript高程就是看了一遍，做了十几篇类似于笔记的博客。而对于jQuery，做过几篇笔记，也用jQuery写了一个比较复杂的优设网。<br>这一段时间也是学习的一个缓慢期。主要都是通过看书来学习，可能是我毅力不够，看书对于我而言也是比较懵逼的，特别是看完一遍高程之后的一脸懵逼，想想还真好笑。</p>\n<h5 id=\"2016-10\"><a href=\"#2016-10\" class=\"headerlink\" title=\"2016-10\"></a>2016-10</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/3326189-c27d2884c2972145.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width=\"500\" height=\"667\" alt=\"4.jpg\" align=\"center\"></p>\n<p>这个月要单独列出来说一下咯。哈哈哈，这个月工作室联盟，开始了对大一的 新生招新，想想他们真好，可以大一就开始接触技术。而自己确是大二了才开始。而且也开始那第一次的培训，由室长大大亲自操刀。</p>\n<h5 id=\"2016-11——2016-12-校园博览会项目制作\"><a href=\"#2016-11——2016-12-校园博览会项目制作\" class=\"headerlink\" title=\"2016-11——2016-12(校园博览会项目制作)\"></a>2016-11——2016-12(校园博览会项目制作)</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/3326189-a455193b4ec9ce03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width=\"500\" height=\"375\" alt=\"4.jpg\" align=\"center\"></p>\n<p>这一个多月，是我这学期最忙也是最充实的一个月。即使中间有那么一点的不开心与不理解，不过最后的结果还是挺好的。这一个月也让我成长了很多，也许也在工作室某些人的心里突然变得比较厉害起来，但是也只有自己知道自己是几斤几两，其实心理压力还是蛮大的。<br>这个项目本来一开始并不是我在参与，可是由于种种原因，我也是在小半路上加进去了。学到的最多的可能就是交互的功能的使用。一开始其实我没有主动去接这个项目，更多的是因为害怕，我怕自己的能力太弱，不敢去接。后来我也懂了，有些东西，真的要靠自己去争取的，不然真的很难去获得这个机会并去成长，也不要害怕自己能力不够，能力，就是在实践中获取的。</p>\n<h5 id=\"2016-12——2017-1\"><a href=\"#2016-12——2017-1\" class=\"headerlink\" title=\"2016-12——2017-1\"></a>2016-12——2017-1</h5><p> 这一个月貌似对代码的感染力没有那么大了，基本上都是被四级考试、期末考试这两样东西所占据，不过在期末考试之前，我开始入门看了一部分的ES6，不够可惜的是，没有总结的博客。而且，看的也不多，看过的一些东西，在期末完了之后，发现自己也忘记了，只有从头开始了。<br><img src=\"http://upload-images.jianshu.io/upload_images/3326189-975c2c5d48aeb4ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" width=\"313\" height=\"340\" alt=\"5.jpg\" align=\"center\"></p>\n<h5 id=\"2017-1——2017-1-16\"><a href=\"#2017-1——2017-1-16\" class=\"headerlink\" title=\"2017-1——2017-1-16\"></a>2017-1——2017-1-16</h5><p>好了，也就是到今天了，刚刚好半年。做程序员的这半年，也许，从某种角度而言，这半年，我也不算真正的程序员，只是从一个职业小白变成了半黑半白的我，还多亏学姐学长们的帮助。未来的路还很长，当然，我会坚持做程序员。毕竟，这是我上大学了，坚持了那么久的事情。在很多人眼中变成了一个刻苦认真，为自己目标好好奋斗的励志青年。未来。我更要好好的加油。<br>加油吧，自己！</p>\n<h5 id=\"最后总结一下这半年的成果\"><a href=\"#最后总结一下这半年的成果\" class=\"headerlink\" title=\"最后总结一下这半年的成果\"></a>最后总结一下这半年的成果</h5><ul>\n<li>三个网页<ul>\n<li>恭贺新春</li>\n<li>卓一企管</li>\n<li>优设网</li>\n</ul>\n</li>\n<li>五个组件<ul>\n<li>表单验证</li>\n<li>Tab选项卡</li>\n<li>轮播</li>\n<li>弹出登录框</li>\n<li>json分页</li>\n</ul>\n</li>\n<li>两个项目<ul>\n<li>校园博览会</li>\n<li>极客网官网（还在进行中）</li>\n</ul>\n</li>\n<li>工具使用<ul>\n<li>github</li>\n<li>博客园写了22篇博客</li>\n<li>coding</li>\n<li>sublime</li>\n<li>谷歌调试器</li>\n<li>coding</li>\n<li>用Hexo搭建了自己的博客</li>\n<li>简书</li>\n<li>RAP</li>\n</ul>\n</li>\n<li>阅读书籍<ul>\n<li>《精通CSS》</li>\n<li>《编写高质量代码》</li>\n<li>《JavaScript高级程序设计》</li>\n<li>《锋利的jQuery》</li>\n<li>《ES6》  </li>\n</ul>\n</li>\n</ul>\n<p>看的书籍可能不是很多。在这个寒假我还会再看，会比较偏向学习node，夯实JavaScript的知识，还有完成工作室官网。加油吧，向未来跨进。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj6f2j89q0000lso0ubq7vz5i","category_id":"cj6f2j8ap0004lso00oznyst1","_id":"cj6f2j8bu000dlso0pk8cnwrg"},{"post_id":"cj6f2j8bq000clso0tlr1uhj1","category_id":"cj6f2j8ap0004lso00oznyst1","_id":"cj6f2j8c5000jlso0ycrp4tq7"},{"post_id":"cj6f2j8ae0002lso0nhden9rp","category_id":"cj6f2j8bo000also0513r7eee","_id":"cj6f2j8ch000olso0lnajeuiv"},{"post_id":"cj6f2j8c2000hlso0gxzpztdp","category_id":"cj6f2j8bz000flso05ownuuq0","_id":"cj6f2j8cm000rlso0fdf3867q"},{"post_id":"cj6f2j8bi0008lso02h8wir1u","category_id":"cj6f2j8bz000flso05ownuuq0","_id":"cj6f2j8cs000tlso0caowcqmq"},{"post_id":"cj6f2j8c6000klso09ng4571d","category_id":"cj6f2j8bz000flso05ownuuq0","_id":"cj6f2j8d3000ylso0hwkpouu8"},{"post_id":"cj6f2j8ci000plso0ufm1cefi","category_id":"cj6f2j8bz000flso05ownuuq0","_id":"cj6f2j8db0010lso0tpklzgqu"},{"post_id":"cj6f2j8bm0009lso03ufkxgj9","category_id":"cj6f2j8cg000mlso0t5yugo0q","_id":"cj6f2j8df0013lso0w71vkuuz"},{"post_id":"cj6f2j8co000slso01v9zkdfl","category_id":"cj6f2j8bz000flso05ownuuq0","_id":"cj6f2j8dh0016lso0evdi50qy"},{"post_id":"cj6f2j8ct000wlso0f5kg2nva","category_id":"cj6f2j8bz000flso05ownuuq0","_id":"cj6f2j8dk0018lso0cfxmjwvd"},{"post_id":"cj6f2j8bw000elso0pd6azte5","category_id":"cj6f2j8bz000flso05ownuuq0","_id":"cj6f2j8dl001also0eub1nj81"},{"post_id":"cj6f2j8d5000zlso053m0e5jz","category_id":"cj6f2j8bz000flso05ownuuq0","_id":"cj6f2j8do001dlso0yrtwlwrs"},{"post_id":"cj6f2j8dc0011lso07nwh2i3v","category_id":"cj6f2j8dg0015lso05c67pkir","_id":"cj6f2j8dr001flso0xv85oe20"}],"PostTag":[{"post_id":"cj6f2j89q0000lso0ubq7vz5i","tag_id":"cj6f2j8b00005lso0ff8bmee9","_id":"cj6f2j8c3000ilso052j84xbw"},{"post_id":"cj6f2j89q0000lso0ubq7vz5i","tag_id":"cj6f2j8bp000blso04bytyvdg","_id":"cj6f2j8cb000llso0fjrqmpuu"},{"post_id":"cj6f2j8ae0002lso0nhden9rp","tag_id":"cj6f2j8c0000glso042i5b6fc","_id":"cj6f2j8cl000qlso0q3xng7dh"},{"post_id":"cj6f2j8bi0008lso02h8wir1u","tag_id":"cj6f2j8cg000nlso0e79jctss","_id":"cj6f2j8d2000xlso0s0iepuzx"},{"post_id":"cj6f2j8bm0009lso03ufkxgj9","tag_id":"cj6f2j8ct000vlso0hazkxn9u","_id":"cj6f2j8dg0014lso084cdj5np"},{"post_id":"cj6f2j8bq000clso0tlr1uhj1","tag_id":"cj6f2j8de0012lso07due01nn","_id":"cj6f2j8dk0019lso0su2lgrst"},{"post_id":"cj6f2j8bq000clso0tlr1uhj1","tag_id":"cj6f2j8b00005lso0ff8bmee9","_id":"cj6f2j8dm001blso033inn2nk"},{"post_id":"cj6f2j8bw000elso0pd6azte5","tag_id":"cj6f2j8dh0017lso0oznbwcvw","_id":"cj6f2j8dq001elso09bq230kr"},{"post_id":"cj6f2j8c2000hlso0gxzpztdp","tag_id":"cj6f2j8dh0017lso0oznbwcvw","_id":"cj6f2j8dt001hlso0ut26iq2x"},{"post_id":"cj6f2j8c6000klso09ng4571d","tag_id":"cj6f2j8ds001glso0lp8752kg","_id":"cj6f2j8du001jlso0j9b5nnw5"},{"post_id":"cj6f2j8ci000plso0ufm1cefi","tag_id":"cj6f2j8dt001ilso0wb0o6g4u","_id":"cj6f2j8dw001llso0eihnr5bi"},{"post_id":"cj6f2j8co000slso01v9zkdfl","tag_id":"cj6f2j8dt001ilso0wb0o6g4u","_id":"cj6f2j8dy001nlso0e5x0zyvf"},{"post_id":"cj6f2j8ct000wlso0f5kg2nva","tag_id":"cj6f2j8dx001mlso0w621ck0z","_id":"cj6f2j8e5001plso04hwv1lre"},{"post_id":"cj6f2j8d5000zlso053m0e5jz","tag_id":"cj6f2j8dx001mlso0w621ck0z","_id":"cj6f2j8e8001rlso0j29eznw2"},{"post_id":"cj6f2j8dc0011lso07nwh2i3v","tag_id":"cj6f2j8e6001qlso0tdz0pjg4","_id":"cj6f2j8ec001slso0m33kxkti"}],"Tag":[{"name":"express","_id":"cj6f2j8b00005lso0ff8bmee9"},{"name":"session","_id":"cj6f2j8bp000blso04bytyvdg"},{"name":"hexo","_id":"cj6f2j8c0000glso042i5b6fc"},{"name":"markdown","_id":"cj6f2j8cg000nlso0e79jctss"},{"name":"redux","_id":"cj6f2j8ct000vlso0hazkxn9u"},{"name":"node.js","_id":"cj6f2j8de0012lso07due01nn"},{"name":"JavaScript","_id":"cj6f2j8dh0017lso0oznbwcvw"},{"name":"技术总结","_id":"cj6f2j8ds001glso0lp8752kg"},{"name":"react","_id":"cj6f2j8dt001ilso0wb0o6g4u"},{"name":"css","_id":"cj6f2j8dx001mlso0w621ck0z"},{"name":"纪念","_id":"cj6f2j8e6001qlso0tdz0pjg4"}]}}