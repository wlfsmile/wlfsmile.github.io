<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wlfsmile的博客</title>
  <subtitle>水满则溢，月盈则亏</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wlfsmile.win/"/>
  <updated>2017-10-20T12:01:14.969Z</updated>
  <id>http://wlfsmile.win/</id>
  
  <author>
    <name>wlfsmile</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈Nginx前后端分离</title>
    <link href="http://wlfsmile.win/2017/10/19/%E6%B5%85%E8%B0%88Nginx%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    <id>http://wlfsmile.win/2017/10/19/浅谈Nginx前后端分离/</id>
    <published>2017-10-19T11:52:43.000Z</published>
    <updated>2017-10-20T12:01:14.969Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/2017-10-19/1.jpg" align="center"><br><a id="more"></a></p>
<h4 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h4><blockquote>
<p>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。特点是占有内存小，并发能力强。</p>
</blockquote>
<h4 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h4><ul>
<li>正向代理：一般默认为正向代理，用户访问不了一个资源，通过代理服务器去访问这个资源，将响应头待回给用户，用户知道自己访问的是其他服务器的资源，代理服务器不会掩饰URL</li>
<li>反向代理：代理服务器是在中间层，但是用户不知道自己访问的资源是其他服务器的资源，代理服务器会掩饰URL</li>
</ul>
<h4 id="使用Nginx反向代理tomcat"><a href="#使用Nginx反向代理tomcat" class="headerlink" title="使用Nginx反向代理tomcat"></a>使用Nginx反向代理tomcat</h4><h5 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h5><ul>
<li>直接点击Nginx.exe</li>
<li>使用命令行，cd 到Nginx目录下，start nginx<br><img src="/img/2017-10-19/2.JPG" align="center"></li>
<li>若成功，打开浏览器输入localhost，会到Nginx欢迎页面</li>
</ul>
<h4 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h4><ul>
<li>打开Nginx目录下的conf/nginx.conf文件，到35行左右的代码，主要修改location属性<br><img src="/img/2017-10-19/3.JPG" align="center"></li>
<li>listen:监听端口，用户访问Nginx服务器的端口</li>
<li>server_name：服务名，无影响</li>
<li>location：<blockquote>
<p>义资源类型与服务器中资源地址url的映射关系，可在/后面定义资源类型，可设置多个location<br>其中proxy_pass代表要反向代理的服务器资源url，只要资源类型匹配，在这个url下的子路径资源都可以访问到，<br>其中root代表本地的资源路径，同样只要资源类型匹配，这个路径下的子目录资源都可以被访问到，<br>一个location中只能配置一个root或proxy_pass。</p>
</blockquote>
</li>
<li>修改文件保存后,cmd在Nginx目录下。使用<code>nginx -s reload</code>命令，重启Nginx，无报错即可</li>
</ul>
<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><ul>
<li>在url输入请求，仍然是Nginx的端口。但是却是转到了tomcat的8080端口<br><img src="/img/2017-10-19/4.JPG" align="center"><br><img src="/img/2017-10-19/5.JPG" align="center"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/2017-10-19/1.jpg&quot; align=&quot;center&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://wlfsmile.win/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://wlfsmile.win/tags/nginx/"/>
    
      <category term="前后分离" scheme="http://wlfsmile.win/tags/%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>Express+MongoDB实现简易登录注册</title>
    <link href="http://wlfsmile.win/2017/08/17/Express-MongoDB%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/"/>
    <id>http://wlfsmile.win/2017/08/17/Express-MongoDB实现简易登录注册/</id>
    <published>2017-08-17T14:14:58.000Z</published>
    <updated>2017-10-19T13:23:13.279Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/2017-8-17/1.JPG" align="center"></p>
<p>这是我在学习express过程中参照网上实例做的一个小demo，实现用express+mongodb的一个简单的登录注册，其中大部分参照<a href="http://blog.csdn.net/miss_ll/article/details/53927873" target="_blank" rel="external">实例博客</a></p>
<p><a href="https://github.com/wlfsmile/Node/tree/master/login" target="_blank" rel="external">完整代码地址</a></p>
<a id="more"></a>
<h4 id="前期准备（了解）"><a href="#前期准备（了解）" class="headerlink" title="前期准备（了解）"></a>前期准备（了解）</h4><ul>
<li>Node.js+Express</li>
<li>MongoDB</li>
<li>ejs引擎模板</li>
<li>bootstrap(可选,也可直接查资料)</li>
</ul>
<h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><ul>
<li>一个默认页（’/‘）</li>
<li>登录页（’/login’）</li>
<li>注册页（’/register’）</li>
<li>登录完成之后的一个显示页（’/home’）</li>
<li>注销的功能（’/logout’）</li>
</ul>
<p>基本是默认页一进来，有登录和注册两个按钮<br>点击不同按钮到不同的页面，登录页面点击登录，若信息正确，跳入/home<br>/home中点击注销，跳出登录</p>
<h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol>
<li><p>初始化项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">express -e login</div></pre></td></tr></table></figure>
</li>
<li><p>安装配置环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd login</div><div class="line">npm install</div></pre></td></tr></table></figure>
</li>
</ol>
<p>以上步骤跟我上一篇文章有些重复，有兴趣的可以看一下我的<a href="http://wlfsmile.win/2017/08/14/%E4%BD%BF%E7%94%A8Node.js-Express-%E7%AE%80%E6%98%93%E6%9D%A5%E5%8F%91%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E4%BE%8B/#more">上一篇博客</a></p>
<ol>
<li>创建剩下的ejs（views目录下）</li>
</ol>
<ul>
<li>login.ejs</li>
<li>register.ejs</li>
<li>home.ejs</li>
</ul>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ol>
<li><p>index.ejs(默认页)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</div><div class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</div><div class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;&lt;a href=&quot;/login&quot;&gt;登录&lt;/a&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;&lt;a href=&quot;/register&quot;&gt;注册&lt;/a&gt;&lt;/p&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>register.ejs</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</div><div class="line">    &lt;link rel=&apos;stylesheet&apos; href=&apos;/stylesheets/style.css&apos; /&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheets/bootstrap.min.css&quot;&gt;  </div><div class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;javascripts/jquery-3.1.0.min.js&quot;&gt;&lt;/script&gt;  </div><div class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;javascripts/bootstrap.min.js&quot;&gt;&lt;/script&gt; </div><div class="line">  &lt;body&gt;</div><div class="line">    //基本样式结构</div><div class="line">    //js操作</div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">      $(&apos;#login1&apos;).click(function()&#123;</div><div class="line">        location.href = &apos;/login&apos;;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      $(&apos;#register1&apos;).click(function()&#123;</div><div class="line">        var username = $(&apos;#name&apos;).val();</div><div class="line">        var password = $(&apos;#password&apos;).val();</div><div class="line">        var passwordAgin = $(&apos;#passwordAgin&apos;).val();</div><div class="line"></div><div class="line">        if(password !== passwordAgin)&#123;</div><div class="line">          $(&quot;#password&quot;).css(&quot;boder&quot;,&quot;1px solid red&quot;);  </div><div class="line">          $(&quot;#passwordAgin&quot;).css(&quot;boder&quot;,&quot;1px solid red&quot;);  </div><div class="line">        &#125;else&#123;</div><div class="line">          var data = &#123;</div><div class="line">            username : username,</div><div class="line">            password : password</div><div class="line">          &#125;;</div><div class="line">          $.ajax(&#123;</div><div class="line">            url : &apos;/register&apos;,</div><div class="line">            type : &apos;POST&apos;,</div><div class="line">            data : data,</div><div class="line">            success : function(data)&#123;</div><div class="line">              if (data.status == 1) &#123;</div><div class="line">                location.href = &apos;/login&apos;;</div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            error : function()&#123; </div><div class="line">              location.href = &apos;/sregister&apos;;</div><div class="line">            &#125;</div><div class="line">          &#125;);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>login.ejs(登录页)</p>
</li>
</ol>
<ul>
<li>与上述的注册页类似</li>
</ul>
<ol>
<li>home.ejs<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/2017-8-17/1.JPG&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是我在学习express过程中参照网上实例做的一个小demo，实现用express+mongodb的一个简单的登录注册，其中大部分参照&lt;a href=&quot;http://blog.csdn.net/miss_ll/article/details/53927873&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实例博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wlfsmile/Node/tree/master/login&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整代码地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="http://wlfsmile.win/categories/Node/"/>
    
    
      <category term="express" scheme="http://wlfsmile.win/tags/express/"/>
    
      <category term="MangoDB" scheme="http://wlfsmile.win/tags/MangoDB/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客分支教训</title>
    <link href="http://wlfsmile.win/2017/08/16/hexo%E5%8D%9A%E5%AE%A2%E5%88%86%E6%94%AF%E6%95%99%E8%AE%AD/"/>
    <id>http://wlfsmile.win/2017/08/16/hexo博客分支教训/</id>
    <published>2017-08-16T05:17:43.000Z</published>
    <updated>2017-10-19T13:23:13.302Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/2017-8-16/1.png" align="center"></p>
<p>最近在写博客的时候突然想把自己的hexo分支完善一下，可是却不小心踩了坑。弄了好几个小时才弄好。最大的原因还是自己对分支管理掌握不够，搞的自己出现问题的时候狼狈不堪。<br><a id="more"></a><br>如果想要进行hexo博客分支备份，推荐<a href="http://www.jianshu.com/p/57b5a384f234" target="_blank" rel="external">Hexo博客备份</a></p>
<h4 id="先说一下事情起因过程"><a href="#先说一下事情起因过程" class="headerlink" title="先说一下事情起因过程"></a>先说一下事情起因过程</h4><ul>
<li>我发现当我切换到hexo分支时，本地的目录是master分支里面的东西，而我切换到master分支时，本地目录是hexo分支里面的东西（可能是我记错了，也可能是我一时疏忽大意，没管那么多，没仔细看）</li>
<li>一不小心把master分支里面的东西传到了hexo分支</li>
<li>然后把本地分支删除了</li>
<li>后来索性把远程分支一起删了（就是这样，本地的东西也没了，还好我把博客的md文章全部备份了，不然哭死）</li>
<li>发现仓库不能用了<br>后来我才知道，进行单独的分支管理，最好本地是有一个单独分支文件夹（反正我是喜欢这样）</li>
</ul>
<h4 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h4><ul>
<li>再创建一个hexo分支，将hexo设为默认分支</li>
<li>把之前的博客文件夹弃用</li>
<li>将github的东西克隆下来（会有博客的基本结构）<br><img src="/img/2017-8-16/2.JPG" align="center"></li>
<li>将之前保留的_config.yml，themes/，source/，scaffolds/，package.json，.gitignore复制过来</li>
<li>执行<code>npm install</code>和<code>npm install hexo-deployer-git</code>（重要 在hexo分支）（一开始我没执行<code>hexo-deployer-git</code>，然后执行<code>hexo d</code> 的时候就会有<code>ERROR Deployer not found: git</code> 的错误）</li>
<li>执行<code>git add</code> .、<code>git commit -m &quot;&quot;</code>、<code>git push origin hexo</code>来提交hexo网站源文件</li>
<li>依次执行<code>hexo g</code>和<code>hexo d</code>生成静态网页部署至Github上</li>
</ul>
<p>这样一来，你的博客仓库就有master分支和hexo分支，分别保存静态网页和源文件。</p>
<h4 id="以后进行修改添加"><a href="#以后进行修改添加" class="headerlink" title="以后进行修改添加"></a>以后进行修改添加</h4><ul>
<li>执行<code>git add</code> .、<code>git commit -m &quot;&quot;</code>、<code>git push origin hexo</code>来提交hexo网站源文件</li>
<li>依次执行<code>hexo g</code>和<code>hexo d</code>生成静态网页部署至Github上</li>
</ul>
<h4 id="结尾语"><a href="#结尾语" class="headerlink" title="结尾语"></a>结尾语</h4><p>以后尽量不手痒，到处乱改。这次过程其实还是挺艰难的，因为自己脑子太乱了，所以做的时候半天抓不到思绪。所以其实耗费了很多时间，也是对自己的一个小考验。希望这次之后，自己能更加坦然去面对bug，也让自己更加独立思考和行动。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/2017-8-16/1.png&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在写博客的时候突然想把自己的hexo分支完善一下，可是却不小心踩了坑。弄了好几个小时才弄好。最大的原因还是自己对分支管理掌握不够，搞的自己出现问题的时候狼狈不堪。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://wlfsmile.win/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://wlfsmile.win/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>express-session介绍</title>
    <link href="http://wlfsmile.win/2017/08/15/express-session%E4%BB%8B%E7%BB%8D/"/>
    <id>http://wlfsmile.win/2017/08/15/express-session介绍/</id>
    <published>2017-08-15T14:15:39.000Z</published>
    <updated>2017-10-19T13:23:13.281Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Node" scheme="http://wlfsmile.win/categories/Node/"/>
    
    
      <category term="express" scheme="http://wlfsmile.win/tags/express/"/>
    
      <category term="session" scheme="http://wlfsmile.win/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>使用Node.js+Express 简易开发服务端实例</title>
    <link href="http://wlfsmile.win/2017/08/14/%E4%BD%BF%E7%94%A8Node.js-Express-%E7%AE%80%E6%98%93%E6%9D%A5%E5%8F%91%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E4%BE%8B/"/>
    <id>http://wlfsmile.win/2017/08/14/使用Node.js-Express-简易来发服务端实例/</id>
    <published>2017-08-14T06:48:29.000Z</published>
    <updated>2017-08-15T12:51:49.351Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要写的是用NodeJS+Express进行的一个服务端的建议开发</p>
</blockquote>
<p><img src="/img/2017-8-14/1.png" alt="1.png" align="center"><br><a id="more"></a><br>本文主要摘自<a href="http://www.jianshu.com/p/db4df1938eca" target="_blank" rel="external">使用 NodeJS+Express 开发服务端</a><br>github代码地址：<a href="">demo</a></p>
<h4 id="环境配置要求"><a href="#环境配置要求" class="headerlink" title="环境配置要求"></a>环境配置要求</h4><ol>
<li><p>安装Node.js环境，具体方法不做细说，可参考<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">阮一峰的官方网站</a></p>
</li>
<li><p>安装express(都为全局安装)，npm有时候太慢，可安装淘宝镜像<a href="https://npm.taobao.org/" target="_blank" rel="external">cnpm</a></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install express -g</div><div class="line">npm install express-generator -g</div></pre></td></tr></table></figure>
<ol>
<li>初始化项目</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd 你的文件目录</div><div class="line">express 项目名称（我设为APIServer）</div></pre></td></tr></table></figure>
<p><img src="/img/2017-8-14/2.JPG" alt="express" align="center"><br>得到的目录结构如下</p>
<p><img src="/img/2017-8-14/3.JPG" alt="express" align="center"> + /bin:用来启动应用（服务器）</p>
<ul>
<li>/public: 存放静态资源目录</li>
<li>/routes：路由用于确定应用程序如何响应对特定端点的客户机请求，包含一个URI（或路径）和一个特定的 HTTP 请求方法（GET、POST等）。每个路由可以具有一个或多个处理程序函数，这些函数在路由匹配时执行</li>
<li>/views: 模板文件所在目录 文件格式为.jade</li>
<li>目录app.js程序main文件 这个是服务器启动的入口</li>
</ul>
<h4 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h4><p>在终端最后的位置输出了如下两个命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">install dependencies:</div><div class="line"> $ cd APIServer &amp;&amp; npm install  //进入项目并安装环境</div><div class="line"></div><div class="line">run the app:</div><div class="line"> $ DEBUG=apiserver:* npm start //启动服务器</div></pre></td></tr></table></figure></p>
<ul>
<li>启动服务器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure>
<p><img src="/img/2017-8-14/4.JPG" alt="express" align="center"><br>+在浏览器中访问<a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a></p>
<p><img src="/img/2017-8-14/1.png" align="center"></p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul>
<li>app.js</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;);</div><div class="line">var path = require(&apos;path&apos;);</div><div class="line">var favicon = require(&apos;serve-favicon&apos;);</div><div class="line">var logger = require(&apos;morgan&apos;);</div><div class="line">var cookieParser = require(&apos;cookie-parser&apos;);</div><div class="line">var bodyParser = require(&apos;body-parser&apos;);</div><div class="line">var app = express();</div><div class="line">///=======路由信息 （接口地址）开始 存放在./routes目录下===========//</div><div class="line"></div><div class="line">var routes = require(&apos;./routes/index&apos;);//home page接口</div><div class="line">var users = require(&apos;./routes/users&apos;); //用户接口</div><div class="line"></div><div class="line">app.use(&apos;/&apos;, routes); //在app中注册routes该接口 </div><div class="line">app.use(&apos;/users&apos;, users);//在app中注册users接口</div><div class="line">///=======路由信息 （接口地址 介绍===========//</div><div class="line"></div><div class="line">///=======模板 开始===========//</div><div class="line">// view engine setup</div><div class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</div><div class="line">app.set(&apos;view engine&apos;, &apos;jade&apos;);</div><div class="line">///=======模板 结束===========//</div></pre></td></tr></table></figure>
<ul>
<li>index.js</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;);</div><div class="line">var router = express.Router();</div><div class="line"></div><div class="line"></div><div class="line">//定义一个get请求 path为根目录</div><div class="line">/* GET home page. */</div><div class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</div><div class="line">    res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = router;</div></pre></td></tr></table></figure>
<p>定义一个路由的基本格式为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.METHOD(PATH, HANDLER)</div></pre></td></tr></table></figure></p>
<p>其中</p>
<ul>
<li>app: express的实例</li>
<li>METHOD: HTTP 请求方法(get/post之类)。</li>
<li>PATH: 服务器上的路径。</li>
<li>HANDLER: 在路由匹配时执行的函数。</li>
</ul>
<h4 id="简单实现一个获取用户信息接口"><a href="#简单实现一个获取用户信息接口" class="headerlink" title="简单实现一个获取用户信息接口"></a>简单实现一个获取用户信息接口</h4><ul>
<li>创建一个user.js文件,/routes/user.js</li>
<li>定义一个User模型</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function User()&#123;</div><div class="line">    this.name;</div><div class="line">    this.city;</div><div class="line">    this.age;</div><div class="line">&#125;</div><div class="line">module.exports = User;</div></pre></td></tr></table></figure>
<ul>
<li>切换到users.js<br>头部添加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var URL = require(&apos;url&apos;); //请求url模块</div><div class="line">var User = require(&apos;./user&apos;); //引入user.js</div></pre></td></tr></table></figure>
<p>并继续添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">router.get(&apos;/getUserInfo&apos;,function(req,res,next)&#123;</div><div class="line">    var user = new User();</div><div class="line">    var params = URL.parse(req.url,true).query;</div><div class="line"></div><div class="line">    if(params.id == &apos;1&apos;)&#123;</div><div class="line">        user.name = &quot;ligh&quot;;</div><div class="line">        user.age = &quot;1&quot;;</div><div class="line">        user.city = &quot;北京市&quot;;</div><div class="line">    &#125;else&#123;</div><div class="line">        user.name = &quot;SPTING&quot;;</div><div class="line">        user.age = &quot;1&quot;;</div><div class="line">       user.city = &quot;杭州市&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var response = &#123;status:1,data:user&#125;;</div><div class="line">    res.send(JSON.stringify(response));</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>其中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">获取url参数 依赖于url模块 使用前需要使用  require(&apos;url&apos;)</div><div class="line">var params = URL.parse(req.url, true).query;</div></pre></td></tr></table></figure></p>
<p><img src="/img/2017-8-14/5.JPG" alt="express" align="center"><br>由于users.js路由信息已经在app.js注册<br>停止服务器 重新start服务器即可直接访问</p>
<ul>
<li>调用方式<br><a href="http://localhost:3000/users/getUserInfo?id=1" target="_blank" rel="external">http://localhost:3000/users/getUserInfo?id=1</a><br>或者<br><a href="http://localhost:3000/users/getUserInfo?id=2" target="_blank" rel="external">http://localhost:3000/users/getUserInfo?id=2</a></li>
</ul>
<p><img src="/img/2017-8-14/6.JPG" alt="express" align="center"> <img src="/img/2017-8-14/7.JPG" alt="express" align="center"><br>注意我们访问的方式为users/getUserInfo?id=1 而不是基于根<br>原因是我们在app.js注册方式为app.use(‘/users’, users);<br>我们可以利用这种方式 开发模块功能 比如 你有另外一个模块为msg<br>我们注册为：app.use(‘/msgs’, msgs);<br>调用方式为<br><a href="http://localhost:3000/msgs/getUserMsgs?id=1" target="_blank" rel="external">http://localhost:3000/msgs/getUserMsgs?id=1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要写的是用NodeJS+Express进行的一个服务端的建议开发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/2017-8-14/1.png&quot; alt=&quot;1.png&quot; align=&quot;center&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Node" scheme="http://wlfsmile.win/categories/Node/"/>
    
    
      <category term="node.js" scheme="http://wlfsmile.win/tags/node-js/"/>
    
      <category term="express" scheme="http://wlfsmile.win/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>redux学习笔记——简易开发步骤</title>
    <link href="http://wlfsmile.win/2017/07/10/redux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%AE%80%E6%98%93%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4/"/>
    <id>http://wlfsmile.win/2017/07/10/redux学习笔记——简易开发步骤/</id>
    <published>2017-07-10T07:18:40.000Z</published>
    <updated>2017-10-19T13:23:13.314Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是写我一开始学习redux的开发的步骤，比较适合刚刚入门的小白，不知道怎么开始下手代码,本篇文章以计数器为例。本篇文章参考<a href="http://www.cnblogs.com/yinluhui0229/p/6709782.html" target="_blank" rel="external">Redux学习笔记：Redux简易开发步骤</a><br>github代码地址<a href="https://github.com/wlfsmile/Redux/tree/master/counter" target="_blank" rel="external">react-redux-counter</a></p>
<a id="more"></a>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├─.babelrc                            // babel的配置</div><div class="line">├─.gitignore                          // git忽略上传的文件</div><div class="line">├─package.json                        // npm命令包</div><div class="line">├─readme.md                           // 项目介绍</div><div class="line">├─node_modules</div><div class="line">├─public                              // 展示页面html入口</div><div class="line">|  └index.html</div><div class="line">├─src                        </div><div class="line">|      ├─components                   // react component</div><div class="line">|      |    ├─Counter.js</div><div class="line">|      ├─reducers</div><div class="line">|      |    ├─index.js                // 操作信息并改变state</div><div class="line">|      └index.js                      // 主文件js</div></pre></td></tr></table></figure>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>index.js(主文件js)</li>
<li><p>定义render入口并调用Counter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const render = () =&gt; ReactDOM.render(</div><div class="line">    &lt;Counter </div><div class="line">    value=&#123;&#125;</div><div class="line">    onIncrement=&#123;&#125;</div><div class="line">    onDecrement=&#123;&#125;</div><div class="line">     /&gt;,</div><div class="line">    document.getElementById(&apos;root&apos;)</div><div class="line">)</div></pre></td></tr></table></figure>
</li>
<li><p>定义Counter，也就是React Component，生成DOM结构，render时触发。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">import React,&#123;Component&#125; from &apos;react&apos;;</div><div class="line">import &#123;render&#125; from &apos;react-dom&apos;;</div><div class="line"></div><div class="line">class Counter extends Component&#123;</div><div class="line"></div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line">    const &#123;value,onDecrement,onIncrement&#125; = this.props;</div><div class="line">    return(</div><div class="line">      &lt;p&gt;</div><div class="line">        Clicked: &#123;value&#125; times</div><div class="line">        &#123;&apos; &apos;&#125;</div><div class="line">        &lt;button onClick=&#123;onIncrement&#125;&gt;</div><div class="line">          +</div><div class="line">        &lt;/button&gt;</div><div class="line">        &#123;&apos; &apos;&#125;</div><div class="line">        &lt;button onClick=&#123;onDecrement&#125;&gt;</div><div class="line">          -</div><div class="line">        &lt;/button&gt;</div><div class="line">      &lt;/p&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Counter;</div></pre></td></tr></table></figure>
</li>
<li><p>初始化显示，手动调用render()，第一次初始化时定义，后续不在执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">render();</div></pre></td></tr></table></figure>
</li>
<li><p>创建store，并绑定reducer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const store = createStore(reducer); // createStore的第一个参数必须是个函数，store.dispatch()时执行，该函数就叫reducer</div></pre></td></tr></table></figure>
</li>
<li><p>定义Action，调用store.dispatch</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const render = () =&gt; ReactDOM.render(</div><div class="line">    &lt;Counter</div><div class="line">        value=&#123;store.getState()&#125;</div><div class="line">        onIncrement=&#123;() =&gt; store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;)&#125;</div><div class="line">        onDecrement=&#123;() =&gt; store.dispatch(&#123; type: &apos;DECREMENT&apos; &#125;)&#125;</div><div class="line">    /&gt;,</div><div class="line">    rootEl</div><div class="line">)</div><div class="line"></div><div class="line">render()</div></pre></td></tr></table></figure>
</li>
<li><p>定义Reducer，生成新的state(reducer/index.js)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">export default (state = 0, action) =&gt; &#123;</div><div class="line">  switch (action.type) &#123;</div><div class="line">    case &apos;INCREMENT&apos;:</div><div class="line">      return state + 1</div><div class="line">    case &apos;DECREMENT&apos;:</div><div class="line">      return state - 1</div><div class="line">    default:</div><div class="line">      return state</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义state变化监听(index.js主文件)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">store.subscribe(render)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要是写我一开始学习redux的开发的步骤，比较适合刚刚入门的小白，不知道怎么开始下手代码,本篇文章以计数器为例。本篇文章参考&lt;a href=&quot;http://www.cnblogs.com/yinluhui0229/p/6709782.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redux学习笔记：Redux简易开发步骤&lt;/a&gt;&lt;br&gt;github代码地址&lt;a href=&quot;https://github.com/wlfsmile/Redux/tree/master/counter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-redux-counter&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://wlfsmile.win/categories/react/"/>
    
    
      <category term="redux" scheme="http://wlfsmile.win/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>函数作用域和块作用域</title>
    <link href="http://wlfsmile.win/2017/04/27/%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://wlfsmile.win/2017/04/27/函数作用域和块作用域/</id>
    <published>2017-04-27T08:30:43.000Z</published>
    <updated>2017-08-15T12:51:49.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这篇总结主要摘自《你不知道的JavaScript》上卷。也是我对这一部分的总结<br>这部分的知识点我并未完全总结，主要是一些平时常用或者易错点</p>
</blockquote>
<a id="more"></a>
<h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><ul>
<li>每声明一个函数，都会为其自身创建一个气泡。</li>
</ul>
<h5 id="隐藏内部实现"><a href="#隐藏内部实现" class="headerlink" title="隐藏内部实现"></a>隐藏内部实现</h5><ul>
<li>我们可以将函数理解为先声明一个函数，再为其添加代码。也可以理解为先写代码，再用函数声明进行包装。后者就是所谓的“隐藏”，将变量隐藏在函数声明里面</li>
<li>最小授权/暴露原则：在软件设计中，最小限度地暴露必要内容，而将其他内容都隐藏起来。</li>
<li>作用<ul>
<li>避免同名标识符之间的冲突</li>
</ul>
</li>
</ul>
<h5 id="匿名和具名"><a href="#匿名和具名" class="headerlink" title="匿名和具名"></a>匿名和具名</h5><ul>
<li>如果function是声明中的第一个词，那么就是一个函数声明。否则就是一个函数表达式。</li>
<li>函数表达式可以是匿名的，函数声明不可以省略函数名。</li>
<li>匿名函数的弊端<ul>
<li>在栈追踪中不会显示出有意义的函数名，使得调试困难</li>
<li>函数引用自身时不方便，只能使用过期的argument.callee引用</li>
<li>降低代码的可读性和可理解性</li>
</ul>
</li>
<li>解决方法：行内函数表达式<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setTimeout(function()&#123;</div><div class="line">    console.log(&quot;111&quot;);</div><div class="line">&#125;,1000);</div><div class="line">//改为行内函数表达式</div><div class="line">setTimeout(function timeoutHandler()&#123;</div><div class="line">    console.log(&quot;111&quot;);</div><div class="line">&#125;,1000);</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = 2;</div><div class="line">(function foo()&#123;</div><div class="line">    var a = 3;</div><div class="line">    console.log(a); //3</div><div class="line">&#125;)();</div><div class="line">console.log(a); //2</div></pre></td></tr></table></figure>
<ul>
<li>(function foo(){…})()，第一个()将函数变成表达式，第二个()执行了这个函数</li>
<li>IIFE：代表立即执行函数表达式</li>
<li>另一种用法：(function(){}())。两种形式功能一样</li>
</ul>
<h6 id="IIFE的一些用法"><a href="#IIFE的一些用法" class="headerlink" title="IIFE的一些用法"></a>IIFE的一些用法</h6><ul>
<li><p>把他们当做函数调用并传递参数进去</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = 2;</div><div class="line">(function IIFE(global)&#123;</div><div class="line">    var a = 3;</div><div class="line">    console.log(a);  //3</div><div class="line">    console.log(global.a);  //2</div><div class="line">&#125;)(window);</div><div class="line">console.log(a); //2</div></pre></td></tr></table></figure>
</li>
<li><p>解决undefined标识符的默认值被错误覆盖引发的异常（少见）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">undefined = true; //bug</div><div class="line">(function IIFE(undefined)&#123;</div><div class="line">    var a;</div><div class="line">    if(a === undefined)&#123;</div><div class="line">        console.log(&quot;undefined is safe here!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
</li>
<li><p>倒置代码的运行顺序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var a = 2;</div><div class="line">(function IIFE(def)&#123;</div><div class="line">    def(window)l</div><div class="line">&#125;)(function def(global)&#123;</div><div class="line">    var a = 3;</div><div class="line">    console.log(a); //3</div><div class="line">    console.log(global.a); //2</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>将需要运行的函数放在第二位，在IIFE执行之后当做参数传递进去</p>
</li>
<li>先执行def,在将window当做参数传入def</li>
</ul>
<h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for(var i=0;i&lt;10;i++)&#123;</div><div class="line">    console.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>以上代码中的i会被绑定在外部作用域（函数或全局）中</li>
<li>块作用域是一个用来对最小授权原则进行扩展的工具，将代码从在函数中隐藏信息扩展为在块中隐藏信息<h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5><h6 id="with"><a href="#with" class="headerlink" title="with"></a>with</h6><h6 id="try-catch"><a href="#try-catch" class="headerlink" title="try/catch"></a>try/catch</h6></li>
<li>try/catch的catch分句会创建一个块作用域，其中声明的变量仅在catch内部有效<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">try&#123;</div><div class="line">    undefined();</div><div class="line">&#125;</div><div class="line">catch(err)&#123;</div><div class="line">    console.log(err); //正常运行</div><div class="line">&#125;</div><div class="line">console.log(err);  //RefrenceError : err not found</div></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="let"><a href="#let" class="headerlink" title="let"></a>let</h6><ul>
<li>ES6引入了新的let关键字。可以绑定到所在的任何作用域中。let为其声明的变量隐式的劫持了所在的块作用域</li>
<li>为块作用域显示创建块——在声明中的任意位置都可以使用{}来为let创建一个用于绑定的块</li>
<li>let进行的声明不会在块作用域中进行提升</li>
<li>垃圾收集<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function process(data)&#123;</div><div class="line">    //...</div><div class="line">&#125;    </div><div class="line">var someReallyBigData = &#123;...&#125;;</div><div class="line">process(someReallyBigData);</div><div class="line">var btn = document.getElementById(&quot;my_button&quot;);</div><div class="line">btn.addEventListener(&quot;click&quot;,function click(evt)&#123;</div><div class="line">    console.log(&quot;button clicked&quot;);</div><div class="line">&#125;,/**/false);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>click函数点击回调并不需要someReallyBigData变量。但是当process执行后，其并不一定被垃圾回收了。由于click函数形成了一个覆盖整个作用域的闭包，JavaScript引擎极可能保存着这个结构。</li>
<li><p>块作用域用来解决</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function process(data)&#123;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line">//这个块定义的内容完事可以销毁</div><div class="line">&#123;    </div><div class="line">    let someReallyBigData = &#123;...&#125;;</div><div class="line">    process(someReallyBigData);</div><div class="line">&#125;</div><div class="line">var btn = document.getElementById(&quot;my_button&quot;);</div><div class="line">btn.addEventListener(&quot;click&quot;,function click(evt)&#123;</div><div class="line">    console.log(&quot;button clicked&quot;);</div><div class="line">&#125;,/**/false);</div></pre></td></tr></table></figure>
</li>
<li><p>let循环</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for(let i=0;i&lt;10;i++)&#123;</div><div class="line">    console.log(i);</div><div class="line">&#125;</div><div class="line">console.log(i); //ReferenceError</div></pre></td></tr></table></figure>
</li>
<li><p>for循环头部的let将i绑定到了for循环的块中。也将其重新绑定到了循环的每一次迭代中，确保使用上一次循环迭代结束时的值重新进行赋值。</p>
</li>
</ul>
<h6 id="const"><a href="#const" class="headerlink" title="const"></a>const</h6><ul>
<li>const可以用来创建块作用域，但其值是固定的（常量）。不可修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var foo = true;</div><div class="line">if(foo)&#123;</div><div class="line">    var a = 2;</div><div class="line">    const b = 3; // 包含在if中的块作用域常量</div><div class="line">    a = 3; // 正常</div><div class="line">    b = 4; // 错误</div><div class="line">&#125;</div><div class="line">console.log(a); //3</div><div class="line">console.log(b); //ReferenceError</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h4><ul>
<li>引擎会在解释JavaScript代码之前首先对其进行编译，编译阶段会找到所有的声明，并用合适的作用域将他们关联起来。</li>
<li>所有声明（变量、函数）都会在任何代码被执行前首先被处理<h5 id="先声明后赋值"><a href="#先声明后赋值" class="headerlink" title="先声明后赋值"></a>先声明后赋值</h5></li>
<li>只有声明本身会被提升，赋值或其他运行逻辑会留在原地<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(a);</div><div class="line">var a = 2;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>会被解读为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a;</div><div class="line">console.log(a); //undefined</div><div class="line">a = 2;</div></pre></td></tr></table></figure></p>
<ul>
<li>函数声明会被提升，但是函数表达式却不会被提升</li>
<li>即使是具名的函数表达式，名称在标识符赋值之前也无法在所在作用域中使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">foo(); //TypError</div><div class="line">bar(); //ReferenceError</div><div class="line">var foo= funcion bar()&#123;</div><div class="line">    //...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>会被解读为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var foo;</div><div class="line">foo(); //TypError</div><div class="line">bar(); //ReferenceError</div><div class="line">foo= funcion bar()&#123;</div><div class="line">    //...</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h5 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h5><ul>
<li>函数声明和变量声明都会被提升，函数会首先被提升，然后才是变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">foo();  //1</div><div class="line">var foo;</div><div class="line">function foo()&#123;</div><div class="line">    console.log(1);</div><div class="line">&#125;</div><div class="line">foo = function()&#123;</div><div class="line">    console.log(2);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>会被引擎理解为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function foo()&#123;</div><div class="line">    console.log(1);</div><div class="line">&#125;</div><div class="line">foo();  //1</div><div class="line">foo = function()&#123;</div><div class="line">    console.log(2);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<ul>
<li>虽然var foo出现在function foo()的声明之前，但是他是重复声明，所以被忽略了。函数声明会被提升到普通变量之前。</li>
<li>后面的函数声明可以覆盖前面的函数声明。</li>
<li>一个普通块内部的函数声明通常会被提升到所在作用域顶部，避免在块内部声明函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">foo(); //b</div><div class="line">var a = true;</div><div class="line">if(a)&#123;</div><div class="line">    function foo()&#123;</div><div class="line">        console.log(&quot;a&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;else&#123;</div><div class="line">    console.log(&quot;b&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇总结主要摘自《你不知道的JavaScript》上卷。也是我对这一部分的总结&lt;br&gt;这部分的知识点我并未完全总结，主要是一些平时常用或者易错点&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://wlfsmile.win/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://wlfsmile.win/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《你不知道的JavaScript》——作用域1.0</title>
    <link href="http://wlfsmile.win/2017/04/25/%E3%80%8A%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%E3%80%8B%E2%80%94%E2%80%94%E4%BD%9C%E7%94%A8%E5%9F%9F1-0/"/>
    <id>http://wlfsmile.win/2017/04/25/《你不知道的JavaScript》——作用域1-0/</id>
    <published>2017-04-25T11:14:26.000Z</published>
    <updated>2017-08-15T12:51:49.350Z</updated>
    
    <content type="html"><![CDATA[<h5 id="作用域理解"><a href="#作用域理解" class="headerlink" title="作用域理解"></a>作用域理解</h5><h5 id="参与者"><a href="#参与者" class="headerlink" title="参与者"></a>参与者</h5><ul>
<li>引擎：负责整个JavaScript程序的编译和执行过程</li>
<li>编译器：负责语法分析以及代码生成</li>
<li>作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。</li>
</ul>
<a id="more"></a>
<h5 id="对于-var-a-2"><a href="#对于-var-a-2" class="headerlink" title="对于 var a = 2;"></a>对于 var a = 2;</h5><ul>
<li>会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明），然后再运行时引擎会在作用域中查找该变量，如果能找到就对其赋值。<h5 id="RHS和LHS"><a href="#RHS和LHS" class="headerlink" title="RHS和LHS"></a>RHS和LHS</h5></li>
<li>RHS查询：与简单的查询某个变量的值差不多。</li>
<li><p>LHS查询：会试图找到变量容器的本身。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function foo(a)&#123;</div><div class="line">    console.log(a); //2</div><div class="line">&#125;</div><div class="line">foo(2);</div></pre></td></tr></table></figure>
</li>
<li><p>对于最后一行的foo(…)函数的调用是对foo进行RHS引用，意味着“去找到foo的值，并把它给我”</p>
</li>
<li>代码中隐式的a=2操作， 这个操作发生在2被当做参数传递给foo(…)函数时，2会被分配给a。进行了一次LHS查询。</li>
</ul>
<h5 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function foo(a)&#123;</div><div class="line">     console.log(a+b);</div><div class="line">     b=a;</div><div class="line">&#125;</div><div class="line">foo(2);</div></pre></td></tr></table></figure>
<ul>
<li>第一次对b进行RHS查询是无法找到该变量的。如果RHS查询在所有嵌套作用域中都找不到所需的变量，引擎会抛出ReferenceError异常</li>
<li>当引擎进行LHS查询时，如果在全局作用域中也无法找到目标变量，全局作用域中会创建一个具有该名称的变量（非严格模式下）。严格模式下，LHS查询失败时，引擎会抛出与RHS查询失败时类似的ReferenceError异常。</li>
<li>如果RHS查询找到了一个变量，但如果对其的值进行不合理操作，引擎会抛出TypeError异常。</li>
</ul>
<h4 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h4><p>词法作用域是由你在写代码时将变量和块作用域写在哪决定的。</p>
<h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><ul>
<li>作用域查找会在找到第一个匹配的标识符时停止。作用域查找始终从运行时所处的最内部作用域开始，逐级往上进行，直到遇到第一个匹配的标识符。</li>
<li>词法作用域只会查找一级标识符，比如a、b和c。如果代码中引用了foo.bar.baz，词法作用域查找只会试图查找foo标识符，找到变量后，对象属性访问规则会分别接管对bar和baz属性的访问。</li>
</ul>
<h5 id="欺骗词法"><a href="#欺骗词法" class="headerlink" title="欺骗词法"></a>欺骗词法</h5><ul>
<li>词法作用域完全由写代码期间函数所声明的位置来定义，JavaScript可以有两种机制在运行时来欺骗词法作用域。</li>
<li>欺骗词法作用域会导致性能下降</li>
</ul>
<h6 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function foo(str,a)&#123;</div><div class="line">    eval(str); //欺骗</div><div class="line">    console.log(a,b);</div><div class="line">&#125;</div><div class="line">var b = 2;</div><div class="line">foo(&quot;var b = 3&quot;,1); //1,3</div></pre></td></tr></table></figure>
<ul>
<li>eval(…)调用中的“var b=3”会被当做本来就在那里一样处理。由于里面声明了一个新的变量b，因此它对已经存在的foo(…)的词法作用域进行修改。这段代码在foo()的内部创建了一个变量b，并遮蔽了外部作用域中的同名变量。</li>
<li>无论任何情况，eval()都可以在运行期修改书写期的词法作用域。</li>
<li>但在严格模式下，eval在运行时有其自己的词法作用域，意味着其中的声明无法修改所在作用域，在上面的代码上来看，会进行报错。</li>
</ul>
<h6 id="with"><a href="#with" class="headerlink" title="with"></a>with</h6><p>with可以不需要重复引用对象本身<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var obj=&#123;</div><div class="line">    a:1,</div><div class="line">    b:2,</div><div class="line">    c:3</div><div class="line">&#125;;</div><div class="line">obj.a=2;</div><div class="line">obj.b=3;</div><div class="line">obj.c=4;</div><div class="line">//with</div><div class="line">with(obj)&#123;</div><div class="line">    a=3;</div><div class="line">    b=4;</div><div class="line">    c=5;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function foo(obj)&#123;</div><div class="line">    with(obj)&#123;</div><div class="line">        a=2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var o1 = &#123;</div><div class="line">    a:3</div><div class="line">&#125;;</div><div class="line">var o2 = &#123;</div><div class="line">    b:3</div><div class="line">&#125;;</div><div class="line"></div><div class="line">foo(o1);</div><div class="line">console.log(o1.a); //2</div><div class="line"></div><div class="line">foo(o2);</div><div class="line">console.log(o2.a); //undefined</div><div class="line">console.log(a); //2  a被泄露到全局作用域上了</div></pre></td></tr></table></figure></p>
<ul>
<li>with可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。</li>
<li>尽管with块可以将一个对象处理为词法作用域，但是这个块内部正常的var声明并不会被限制在这个块的作用域中，而是被添加到with所处的函数作用域中。</li>
<li>o2的作用域，foo()的作用域和全局作用域中都没有找到标识符a,因此当a=2执行时，会自动创建一个全局变量（非严格）</li>
</ul>
<h6 id="eval和with"><a href="#eval和with" class="headerlink" title="eval和with"></a>eval和with</h6><ul>
<li>eval函数如果接受了含有一个或多个声明的代码，就会修改其所处的词法作用域，而with声明实际上是根据你传递给他的对象凭空创建一个全新的词法作用域。</li>
<li>eval和with都会被严格模式所影响</li>
<li>当引擎在代码中发现eval或with，它只能简单的假设关于标识符位置的判断都是无效的，无法在词法分析阶段明确知道eval会接收什么代码，也不知道传递给with的到底是什么。</li>
<li>如果代码中大量使用eval或with，运行会很慢。 </li>
<li>不使用这两个机制</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;作用域理解&quot;&gt;&lt;a href=&quot;#作用域理解&quot; class=&quot;headerlink&quot; title=&quot;作用域理解&quot;&gt;&lt;/a&gt;作用域理解&lt;/h5&gt;&lt;h5 id=&quot;参与者&quot;&gt;&lt;a href=&quot;#参与者&quot; class=&quot;headerlink&quot; title=&quot;参与者&quot;&gt;&lt;/a&gt;参与者&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;引擎：负责整个JavaScript程序的编译和执行过程&lt;/li&gt;
&lt;li&gt;编译器：负责语法分析以及代码生成&lt;/li&gt;
&lt;li&gt;作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="http://wlfsmile.win/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://wlfsmile.win/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>深入react技术栈-2</title>
    <link href="http://wlfsmile.win/2017/04/10/%E6%B7%B1%E5%85%A5react%E6%8A%80%E6%9C%AF%E6%A0%88-2/"/>
    <id>http://wlfsmile.win/2017/04/10/深入react技术栈-2/</id>
    <published>2017-04-10T12:31:30.000Z</published>
    <updated>2017-08-15T12:51:49.353Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一章（Raact数据流、React生命周期、React与DOM）"><a href="#第一章（Raact数据流、React生命周期、React与DOM）" class="headerlink" title="第一章（Raact数据流、React生命周期、React与DOM）"></a>第一章（Raact数据流、React生命周期、React与DOM）</h4><h5 id="React数据流"><a href="#React数据流" class="headerlink" title="React数据流"></a>React数据流</h5><p>在React中，数据是自项向下单向流动的。即从父组件到子组件。</p>
<ul>
<li>如果顶层组件初始化props，那么React会向下遍历整棵组件树，重新尝试渲染所有相关的子组件。而state只关心每个组件自己的内部的状态，这些状态只能在组件内改变。<a id="more"></a>
<h6 id="state"><a href="#state" class="headerlink" title="state"></a>state</h6></li>
<li>当组件内部使用库内置的setState方法时，最大的表现行为就是该组合会尝试重新渲染。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">import React,&#123;Component&#125; form &apos;react&apos;;</div><div class="line">class Counter extends Component&#123;</div><div class="line">    constructor(pros)&#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;</div><div class="line">            count:0,</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    handleClick(e)&#123;</div><div class="line">        e.preventDefault();</div><div class="line">        this.setState(&#123;</div><div class="line">            count : this.state.count + 1,</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        renturn(</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;p&gt;&#123;this.state.count&#125;&lt;/p&gt;</div><div class="line">                &lt;a href=&quot;#&quot; onClick=&#123;this.handleClick&#125;&gt;更新&lt;/a&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上述例子是通过点击“更新”按钮不断的更新内部值。把组件内状态封装在现实中。</p>
<ul>
<li>setState 是一个异步方法。一个生命周期内所有的setState方法会合并操作。</li>
</ul>
<h6 id="props"><a href="#props" class="headerlink" title="props"></a>props</h6><ul>
<li>是react用来让组件之间相互联系的一种机制。</li>
<li>react的单向数据流，主要的流动管道是props。其本身不可变的，组件的props一定来自默认属性或者通过父组件传递而来。</li>
<li>组件的部分props<ul>
<li>className：根节点的class。</li>
<li>classPrefix：class的统一前缀。有助于对样式与交互分离。</li>
<li>defaultActiveIndex和activeIndex：默认的激活索引。</li>
<li>onChange：回调函数。一般与activeIndex搭配使用。</li>
</ul>
</li>
<li><p>react为props提供了默认配置，可通过defaultProps静态变量的方式定义。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static defaultProps =&#123;</div><div class="line">    classPrefix:&apos;&apos;,</div><div class="line">    onChange:()=&gt;&#123;&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>子组件prop</p>
<ul>
<li>在react中有一个重要且内置的prop——children，代表组件的子组件集合。</li>
<li>React.Children是React官方提供的一系列操作children的方法。提供诸如map、forEach、count等实用函数。</li>
</ul>
</li>
<li>组件props</li>
<li>用function prop与父组件通信<ul>
<li>对于state，它的通信集中在组件内部。对于props，它的通信是父组件向子组件的传播。</li>
</ul>
</li>
<li>propType<ul>
<li>用于规范props的类型与必需的状态。若组件定义了propType，那么在开发环境下，就会对组件的props值的类型作检查。  </li>
</ul>
</li>
</ul>
<h5 id="React生命周期"><a href="#React生命周期" class="headerlink" title="React生命周期"></a>React生命周期</h5><p> react组件的生命周期分为挂载、渲染和卸载。</p>
<h6 id="挂载或卸载过程"><a href="#挂载或卸载过程" class="headerlink" title="挂载或卸载过程"></a>挂载或卸载过程</h6><ul>
<li><p>组件的挂载</p>
<ul>
<li>主要做组件状态的初始化<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import React,&#123;Component,PropTypes&#125; form &apos;react&apos;;</div><div class="line">class App extends Component&#123;</div><div class="line">    static propTypes=&#123;</div><div class="line">        //...</div><div class="line">    &#125;;</div><div class="line">    static defaultProps=&#123;</div><div class="line">        //...</div><div class="line">    &#125;;</div><div class="line">    constructor(props)&#123;</div><div class="line">        super(props);</div><div class="line">        this.state=&#123;</div><div class="line">            //...</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    componentWillMount()&#123;</div><div class="line">        //...</div><div class="line">    &#125;</div><div class="line">    componentDidMount()&#123;</div><div class="line">    //...</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        return &lt;div&gt;This is a demo.&lt;/div&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>两个生命周期方法</p>
<ul>
<li>componentWillMount，在render方法之前执行。（渲染前）</li>
<li>componentDidMount，在render方法之后执行。（渲染后）</li>
</ul>
</li>
<li>执行setState方法<ul>
<li>在componentWillMount中，组件会更新state，但组件只渲染一次。无意义的执行</li>
<li>在componentDidMount中，组件会再次更新，在初始化过程中就渲染了两次。</li>
</ul>
</li>
<li>组件的卸载<ul>
<li>只有componentWillMount这一个卸载前状态。</li>
</ul>
</li>
</ul>
<h6 id="数据更新过程"><a href="#数据更新过程" class="headerlink" title="数据更新过程"></a>数据更新过程</h6><ul>
<li><p>指的是父组件向下传递props或组件自身执行setState方法时发生的一系列更新动作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import React,&#123;Component,PropTypes&#125; from &apos;react&apos;;</div><div class="line">class App extends Component&#123;</div><div class="line">    componentWillReceiveProps(nextProps)&#123;</div><div class="line">        //this.setState(&#123;&#125;)</div><div class="line">    &#125;</div><div class="line">    shouldComponentUpdate(nextProps,nextState)&#123;</div><div class="line">        //...</div><div class="line">    &#125;</div><div class="line">    componentWillUpdate(nextProps,nextState)&#123;</div><div class="line">        //...</div><div class="line">    &#125;</div><div class="line">    componentDidUpdate(prevProps,prevState)&#123;</div><div class="line">        //...</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        return &lt;div&gt;This is a demo.&lt;/div&gt;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>组件自身的state更新，会依次执行shouldComponentUpdate、componentWillUpdate、rebder和componentDidUpdate。</p>
</li>
<li>shouldComponentUpdate 接收需要更新的props和state。开发者加入必要的条件判断，当方法返回false，组件不再向下执行生命周期方法。</li>
<li>componentWillUpdate方法提供需要更新的props和state，代表更新过程中渲染前时刻；componentDidUpdate方法提供更新前的props和state，代表更新过程中渲染后时刻。</li>
<li>如果组件是由父组件更新props而更新的，那么在shouldComponentUpdate之前会先执行componentWillReceiveProps方法。在此方法中调用setState不会有二次渲染。</li>
</ul>
<h5 id="React与DOM"><a href="#React与DOM" class="headerlink" title="React与DOM"></a>React与DOM</h5><ul>
<li>在组件开实现中，不会用到ReactDOM，只有在顶层组件以及由于React模型所限而不得不操作DOM的时候，才会用。</li>
</ul>
<h6 id="ReactDOM"><a href="#ReactDOM" class="headerlink" title="ReactDOM"></a>ReactDOM</h6><ul>
<li><p>findDOMNode</p>
<ul>
<li><p>React提供的获取DOM元素的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DOMElement findDOMNode(ReactComponent component)</div></pre></td></tr></table></figure>
</li>
<li><p>当组件被渲染到DOM中之后，findDOMNode返回该React组件实例相应的DOM节点。它可以用于获取表单的value以及用于DOM的测量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//当前组件加载完时获取当前DOM</div><div class="line">import React,&#123;Component&#125; from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line">class App extends Component&#123;</div><div class="line">    componentDidMount()&#123;</div><div class="line">        //this为当前组件实例</div><div class="line">        const dom = ReactDOM.findDOMNode(this);</div><div class="line">    &#125;</div><div class="line">    render()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>findDOMNode只对已经挂载的组件有效。</p>
</li>
</ul>
</li>
<li><p>render</p>
<ul>
<li><p>用于把React渲染的Virtual DOM渲染到浏览器的DOM当中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ReactComponent render(</div><div class="line">    ReactElement element,</div><div class="line">    DOMElement container,</div><div class="line">    [function callback]</div><div class="line">)</div></pre></td></tr></table></figure>
</li>
<li><p>该方法把元素挂载到container中，并返回element实例（refs引用）。如果是无状态组件，render会返回null，当组件装载完毕时，callback就会被调用。</p>
</li>
<li>再次更新时，React不会把组件重新渲染，而是用DOM diff算法做局部更新。</li>
</ul>
</li>
</ul>
<h6 id="ReactDOM的不稳定方法"><a href="#ReactDOM的不稳定方法" class="headerlink" title="ReactDOM的不稳定方法"></a>ReactDOM的不稳定方法</h6><ul>
<li>有两种不稳定方法</li>
</ul>
<h6 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h6><ul>
<li>组件中特殊的prop，可以附加到任何一个组件上。组件被调用时会指向一个实例，而refs会指向这个实例。</li>
<li>可以是一个回调函数，这个回调函数会在组件挂载之后立即执行。</li>
<li>refs同样支持字符串，对于DOM操作，不仅可以使用findDOMNode获得该组件DOM，还可以使用refs获得组件内部的DOM。</li>
</ul>
<h6 id="React之外的DOM操作"><a href="#React之外的DOM操作" class="headerlink" title="React之外的DOM操作"></a>React之外的DOM操作</h6><ul>
<li>React的 声明式渲染机制把复杂的DOM操作抽象为简单的state和props的操作，因此避免了很多直接的DOM操作。不过，仍有一些DOM操作是React无法避免的。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一章（Raact数据流、React生命周期、React与DOM）&quot;&gt;&lt;a href=&quot;#第一章（Raact数据流、React生命周期、React与DOM）&quot; class=&quot;headerlink&quot; title=&quot;第一章（Raact数据流、React生命周期、React与DOM）&quot;&gt;&lt;/a&gt;第一章（Raact数据流、React生命周期、React与DOM）&lt;/h4&gt;&lt;h5 id=&quot;React数据流&quot;&gt;&lt;a href=&quot;#React数据流&quot; class=&quot;headerlink&quot; title=&quot;React数据流&quot;&gt;&lt;/a&gt;React数据流&lt;/h5&gt;&lt;p&gt;在React中，数据是自项向下单向流动的。即从父组件到子组件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果顶层组件初始化props，那么React会向下遍历整棵组件树，重新尝试渲染所有相关的子组件。而state只关心每个组件自己的内部的状态，这些状态只能在组件内改变。
    
    </summary>
    
      <category term="前端" scheme="http://wlfsmile.win/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="react" scheme="http://wlfsmile.win/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>深入react技术栈-1</title>
    <link href="http://wlfsmile.win/2017/04/10/%E6%B7%B1%E5%85%A5react%E6%8A%80%E6%9C%AF%E6%A0%88-1/"/>
    <id>http://wlfsmile.win/2017/04/10/深入react技术栈-1/</id>
    <published>2017-04-10T12:24:24.000Z</published>
    <updated>2017-08-15T12:51:49.353Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一章（基本介绍、JSX、React组件）"><a href="#第一章（基本介绍、JSX、React组件）" class="headerlink" title="第一章（基本介绍、JSX、React组件）"></a>第一章（基本介绍、JSX、React组件）</h4><ul>
<li>react是Facebook开源在github上的JavaScript库。把用户界面抽象成一个个组件。引用了JSX语法<a id="more"></a>
</li>
</ul>
<h5 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h5><ul>
<li>react把真实DOM树转成JavaScript对象树（虚拟DOM）。</li>
<li>虚拟DOM提升了react的性能。还方便和其他平台集成。</li>
<li>react承载了构建HTML结构化页面的职责。是通过创建与更新虚拟元素来管理整个虚拟DOM。<h5 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h5></li>
<li>用意在于通过加入增强语法，使JavaScript更快、安全、简单。</li>
<li>虚拟元素的构建和更新都是在内存中完成的，并不会真正的渲染到DOM中去。</li>
<li>react创建的虚拟元素分为DOM元素和组件元素两种。分别对应着原生DOM元素与自定义元素。</li>
<li>因为元素有公共的表达方法，我们就可以让元素们彼此嵌套或混合。这种层层封装的组件元素就是所谓的react组件，最终可以用递归渲染的方式构建出完全的DOM元素树。</li>
<li>JXS是将HTML语法直接加入到JavaScript代码中，再通过翻译器转换到纯JavaScript后由浏览器执行。<h5 id="JSX基本语法"><a href="#JSX基本语法" class="headerlink" title="JSX基本语法"></a>JSX基本语法</h5></li>
<li>JSX是类XML语法的ECMAScript扩展，可以说，JSX基本语法被XML囊括，但也有些许不同 <h6 id="XML基本语法"><a href="#XML基本语法" class="headerlink" title="XML基本语法"></a>XML基本语法</h6>+标签可以任意嵌套。可以清晰地看到DOM树状结构及其属性。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const List = () =&gt;(</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;Title&gt;title&lt;/Title&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;list&lt;/li&gt;</div><div class="line">            &lt;li&gt;list&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<ul>
<li>注意<ul>
<li>定义标签时，只允许被一个标签包裹。</li>
<li>标签一定要闭合。<h6 id="元素类型"><a href="#元素类型" class="headerlink" title="元素类型"></a>元素类型</h6></li>
</ul>
</li>
<li>HTML标签首字母为小写，对应DOM元素；反之，则对应组件元素。</li>
<li>依赖的组件中元素不再出现组件元素，就可以将完整的DOM树构建出来。</li>
<li>JSX还可以通过命名空间的方法使用组件元素，可以解决组件命名冲突和对一组组件进行归类。</li>
<li>注释<ul>
<li>JSX中未定义注释的转换。不过在一个组件的子元素位置使用注释要用{}包起来。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const App=&#123;</div><div class="line">    &lt;Nav&gt;</div><div class="line">        &#123;/* 节点注释*/&#125;</div><div class="line">        &lt;Person</div><div class="line">        /* 多行</div><div class="line">        注释 */</div><div class="line">        name=&#123;window.name&#125;</div><div class="line">    &lt;/Nav&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h6 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h6><p>在JSX中，DOM和组件元素都有属性。</p>
<ul>
<li>DOM元素的属性是标准规范化属性，除了class和for。<ul>
<li>class——className</li>
<li>for——HTMLFor</li>
</ul>
</li>
<li>组件元素的属性是完全自定义的属性。</li>
<li>Boolean属性<ul>
<li>省略Boolean属性值会导致JSX任务bool值设为了true。</li>
</ul>
</li>
<li><p>展开属性</p>
<ul>
<li>如果事先不知道设置那些pros，最好不要设置。可以用ES6 rest/spread特性来提高效率<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//可以将</div><div class="line">const data = &#123;name:&apos;foo&apos;,value:&apos;bar&apos;&#125;;</div><div class="line">const component = &lt;Component name=&#123;data.name&#125; value=&#123;data.value&#125; /&gt;;</div><div class="line">//写为</div><div class="line">const data = &#123;name:&apos;foo&apos;,value:&apos;bar&apos;&#125;;</div><div class="line">const component = &lt;Component &#123;...data&#125;/&gt;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自定义HTML属性</p>
<pre><code>+ 如果在JSX中往DOM元素中传入自定义属性，react不会渲染。若要使用，要使用data-前缀。
+ 在自定义标签中任意属性都是被支持的。
+ 以aria-开头的网络无障碍属性同样可正常使用。
</code></pre><h6 id="JavaScript属性表达式"><a href="#JavaScript属性表达式" class="headerlink" title="JavaScript属性表达式"></a>JavaScript属性表达式</h6></li>
<li>属性值要使用表达式，只要用{}替换””即可。<h6 id="HTML转义"><a href="#HTML转义" class="headerlink" title="HTML转义"></a>HTML转义</h6></li>
</ul>
<h5 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h5><ul>
<li>组件封装的基本思路是面向对象思想。交互基本上以操作DOM为主，逻辑上是结构上需要改变哪里，我们就操作哪里。</li>
<li>规范化标准组件<ul>
<li>基本的封装性。</li>
<li>简单的生命周期呈现。</li>
<li>明确的数据流动。数据指的是调用组件的参数。<h6 id="React组件的构建"><a href="#React组件的构建" class="headerlink" title="React组件的构建"></a>React组件的构建</h6></li>
</ul>
</li>
<li>react组件由属性（pros）、状态（state）以及生命周期方法三个部分组成。</li>
<li>react自定义元素是库自己建成的</li>
<li>react渲染过程包含模板的概率，及JSX</li>
<li>react组件的实现均在方法与类中。所有可以相互隔离，但不包括样式</li>
<li>react引用方式遵循ES6 module标准<h6 id="React组件的构建方法"><a href="#React组件的构建方法" class="headerlink" title="React组件的构建方法"></a>React组件的构建方法</h6></li>
<li>React基本上由组件的构建方式、组件内的属性状态与生命周期方法组成。</li>
<li>React组件的构造方法：React.createClass、ES6 classes和无状态函数。</li>
<li>React.createClass<ul>
<li>是Reactz=最传统、兼容性最好的方法。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">const Button = React.createClass(&#123;</div><div class="line">    getDefaultProps()&#123;</div><div class="line">        return&#123;</div><div class="line">            color:&apos;blue&apos;,</div><div class="line">            text:&apos;Confirm&apos;,</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    render()&#123;</div><div class="line">        const &#123;color,text&#125; = this.props;</div><div class="line">        return(</div><div class="line">            &lt;button className=&#123;`btn btn-$&#123;color&#125;`&#125;&gt;</div><div class="line">                &lt;em&gt;&#123;text&#125;&lt;/em&gt;</div><div class="line">            &lt;/button&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>ES6 classes <ul>
<li>写法是通过ES6标准的类语法的方式来构建方法</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import React,&#123;Component&#125; form &apos;react&apos;;</div><div class="line">class Button extends Component&#123;</div><div class="line">    constructor(props)&#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line">    static defaultProps = &#123;</div><div class="line">        color:&apos;blue&apos;,</div><div class="line">        text:&apos;Confirm&apos;,</div><div class="line">    &#125;;</div><div class="line">    render()&#123;</div><div class="line">        const &#123;color,text&#125; = this.props;</div><div class="line">        return(</div><div class="line">            &lt;button className=&#123;`btn btn-$&#123;color&#125;`&#125;&gt;</div><div class="line">                &lt;em&gt;&#123;text&#125;&lt;/em&gt;</div><div class="line">            &lt;/button&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>无状态函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function Button(&#123;color=&apos;blue&apos;,text=&apos;Confirm&apos;&#125;)&#123;</div><div class="line">    return(</div><div class="line">        &lt;button className=&#123;`btn btn-$&#123;color&#125;`&#125;&gt;</div><div class="line">            &lt;em&gt;&#123;text&#125;&lt;/em&gt;</div><div class="line">        &lt;/button&gt;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一章（基本介绍、JSX、React组件）&quot;&gt;&lt;a href=&quot;#第一章（基本介绍、JSX、React组件）&quot; class=&quot;headerlink&quot; title=&quot;第一章（基本介绍、JSX、React组件）&quot;&gt;&lt;/a&gt;第一章（基本介绍、JSX、React组件）&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;react是Facebook开源在github上的JavaScript库。把用户界面抽象成一个个组件。引用了JSX语法
    
    </summary>
    
      <category term="前端" scheme="http://wlfsmile.win/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="react" scheme="http://wlfsmile.win/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>极客官网项目制作总结</title>
    <link href="http://wlfsmile.win/2017/02/27/%E6%9E%81%E5%AE%A2%E5%AE%98%E7%BD%91%E9%A1%B9%E7%9B%AE%E5%88%B6%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://wlfsmile.win/2017/02/27/极客官网项目制作总结/</id>
    <published>2017-02-27T12:15:20.000Z</published>
    <updated>2017-08-15T12:51:49.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这篇文章是为了总结了一下这个寒假的寒假作业——极客网工作室官网制作   </p>
</blockquote>
<a id="more"></a>
<h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><p>这个官网是主要制作我们工作室一个展示的官网。其中分为三个小组，有前端、后台。而我，也恰巧使我们小组的组长。这也是我在这个寒假做的唯一的一件大事情。  </p>
<p>首先，是小组进行了讨论，主要是针对需求文档，包括一些基本信息，基本功能实现、网页设计制作、人员分配等问题（因为我们只是寒假放假之后短暂的停留几天，都会各自回家，所以详细的讨论更分工就显得尤为重要）。  </p>
<blockquote>
<p>大致讨论内容</p>
</blockquote>
<ul>
<li><p>网页模式：长网 </p>
</li>
<li><p>本机服务器：MySQL</p>
</li>
<li><p>工具：coding、、RAP</p>
</li>
<li><p>规范：《百度前端代码规范》</p>
<p>写代码命名加上自己的首字母+下划线，如税小豪（S_）</p>
<p>长网页每个人负责的版块用一个整的\<div>括起来</div></p>
</li>
<li><p>实现技术：HTML、CSS、JavaScript/JQuery、Java、Spring MVC、Ajax</p>
</li>
<li><p>前后端版块实现</p>
<ul>
<li>前端展示页</li>
<li>后台数据库</li>
<li>后台管理界面</li>
</ul>
</li>
<li><p>功能：</p>
<ul>
<li>导航栏：首页、工作室简介、成员介绍、毕业去向、加入我们</li>
<li>主页：背景大图+logo+轮播</li>
<li>工作室简介</li>
<li>成员介绍(交互)<ul>
<li>交互数据：name(成员姓名)、 img(照片地址) 、grade(年级) 、direction(技术方向 )、motto(格言) </li>
</ul>
</li>
<li>毕业去向(交互)<ul>
<li>company(公司)</li>
</ul>
</li>
<li>加入我们(交互)<ul>
<li>传给后台：name(姓名) 、shoolName(学院) 、major(专业) 、studentId(学号) 、direction(技术方向)  </li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="前期准备的问题"><a href="#前期准备的问题" class="headerlink" title="前期准备的问题"></a>前期准备的问题</h4><ul>
<li>因为我们是在学校进行讨论，准备回家后做，可是这样就出现了严重的时间效率拖延问题，以至于是最后大家提前回学校进行制作的。</li>
<li>作为组长，我没有做好详细的分配，是我的失责  </li>
<li>还有就是网页样式制作的准备不够，造成了我们后期对样式修改的程度比较大</li>
<li>工具的使用没有正确。虽然用的是coding，可是前期框架没有搭好，在后期也造成了一定问题</li>
</ul>
<h4 id="正式制作"><a href="#正式制作" class="headerlink" title="正式制作"></a>正式制作</h4><p>正式制作，我主要负责了后台管理界面和前端界面的毕业去向这一块。  </p>
<blockquote>
<p>主要技术使用  </p>
</blockquote>
<p>这次我只是单独说一下我负责的那块的技术使用。  </p>
<ul>
<li>HTML、css 两样进行了基本样式的制作</li>
<li>用简单的css3 进行了一些动画效果的制作</li>
<li>用jQuery写的ajax进行交互</li>
<li>用ajax进行动态请求分页  </li>
</ul>
<p>这次我用的最多的就是ajax的交互使用，所以说，我更多的是增加了对ajax的一些熟悉度和他的基本原理。  </p>
<h5 id="制作中的问题"><a href="#制作中的问题" class="headerlink" title="制作中的问题"></a>制作中的问题</h5><ul>
<li>因为之前我几乎没有接触过css3，所以并未处理好css3动画效果的兼容性</li>
<li>ajax的代码量太大，没有做到很好的优化代码量，不过在后期的制作中，我注意到了这一点</li>
<li>ajax的异步请求问题。前期通过了一个ES6中的promise使其纵向加载。后期也可以通过写在ajax里面进行ajax来解决问题</li>
<li>代码比较乱，因为我们的代码展示都在同一个页面，虽然前期说了代码规范，不过后来还是出现了一些问题，而且也忘了JavaScript中将代码封装在立即执行函数中</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这次项目是一个不大不小的项目。作为组长的我在分配以及调节方面都有不可推卸的责任，这也是我之后制作项目的一个警戒。不过看到项目完工，其实也有一种莫名的自豪感，哈哈哈，还是觉得实实在在敲代码比较好。。<br>一个寒假，原本的学习计划都没有好好执行。QAQ，新学期，我要进行新学习咯，加油，好好学习！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇文章是为了总结了一下这个寒假的寒假作业——极客网工作室官网制作   &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://wlfsmile.win/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="技术总结" scheme="http://wlfsmile.win/tags/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>纪念一下做程序员这半年</title>
    <link href="http://wlfsmile.win/2017/01/16/%E7%BA%AA%E5%BF%B5%E4%B8%80%E4%B8%8B%E5%81%9A%E7%A8%8B%E5%BA%8F%E5%91%98%E8%BF%99%E5%8D%8A%E5%B9%B4/"/>
    <id>http://wlfsmile.win/2017/01/16/纪念一下做程序员这半年/</id>
    <published>2017-01-15T16:06:36.000Z</published>
    <updated>2017-08-15T12:51:49.356Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 这篇文章只是仅仅为了纪念一下我做程序员的半周年 </strong><br>什么时候开始决定做程序员呢，具体的心理变化可能没有那么清楚，不过大概的事件变化还是知道的。<br><a id="more"></a> </p>
<h5 id="2016-07-16"><a href="#2016-07-16" class="headerlink" title="2016-07-16"></a>2016-07-16</h5><p> <img src="http://upload-images.jianshu.io/upload_images/3326189-f0d15de6ddab9247.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" width="500" height="800" alt="1.jpg" align="center"></p>
<p>2016年的夏天，刚好结束了大一的懵懂迷茫的日子，从七月初开始的军训也进入尾声，这一天的太阳对于一个已经经历过半个多月的被太阳暴晒的我而言，貌似没有那么狠毒。今天是军训结束的那一天，也是我踏进极客网的第一天。今天开始了所谓的宣讲会，我也不知道我是抱着什么样的心态踏进这里的。可能是为了不让自己的大学变得那么碌碌无为，无所事事，或许也是为了所谓了以后的毕业后的社会生活。可是不管怎样，我来了，也从未想主动离开。模模糊糊记得那时候大二大三的学姐学长们的话，模模糊糊的记得刘老师的只言片语，模模糊糊的记得我坐在第二排右边的第二个位置。那时候的我还对程序员的一切感到陌生但并未恐惧。</p>
<h5 id="2016-7-17——2016-9-HTML和CSS和初步了解JavaScript"><a href="#2016-7-17——2016-9-HTML和CSS和初步了解JavaScript" class="headerlink" title="2016-7-17——2016-9(HTML和CSS和初步了解JavaScript)"></a>2016-7-17——2016-9(HTML和CSS和初步了解JavaScript)</h5><p><img src="http://upload-images.jianshu.io/upload_images/3326189-81bd808c5b5fd5c4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" width="500" height="800" alt="2.jpg" align="center/"></p>
<p>这是大学的第一个暑假，因为所谓的心中抱负，所谓的程序员的理想，留在了学校。这也是我开始代码生活的第一个假期。第一次做网页做的是叫一个“恭贺新春”的网页，现在看来完全小菜一碟，可是当时我的内心可是崩溃的好么。对于一个小白的不能再小白的我而言，一个网页对于我而言也是很痛苦的。完全懵逼。不过好在我通过我不知道是什么的毅力给他做出来了，那时候没有讲究所谓的代码规范，命名规范，不要用表格布局什么的，连编辑器都没有讲究。反正就是我现在都忘了我是怎么把它做好的。现在那个成品在我的电脑里面，我都不忍心去打开它，总觉得那么的那啥。后来又陆陆续续的做了一个页面跟五个组件，就完全适应了某种模式。而且，也跟工作室的大家混熟了。<br>现在想起来，在那个暑假最好的就是在工作室占据了自己的一席之地，慢慢的把自己的生活用品拿到了工作室，慢慢的，这里变成了我大学除了寝室之外最熟悉最有我生活气息的地方了。而最熟悉的话，莫过于室长大人每天说的代码规范和看那两本他所“代言”的两本书，虽然我在暑假结束都没有看那两本书，而是在暑假结束之后看的。</p>
<h5 id="2016-9——2016-11-JavaScript和JQuery"><a href="#2016-9——2016-11-JavaScript和JQuery" class="headerlink" title="2016-9——2016-11(JavaScript和JQuery)"></a>2016-9——2016-11(JavaScript和JQuery)</h5><p><img src="http://upload-images.jianshu.io/upload_images/3326189-996c0d38325535a9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" width="500" height="877" alt="3.jpg" align="center"><br>这两个月主要是学习了JavaScript和jQuery。主要是看了《JavaScript高级程序设计》和《锋利的jQuery》这两本书，对于JavaScript高程就是看了一遍，做了十几篇类似于笔记的博客。而对于jQuery，做过几篇笔记，也用jQuery写了一个比较复杂的优设网。<br>这一段时间也是学习的一个缓慢期。主要都是通过看书来学习，可能是我毅力不够，看书对于我而言也是比较懵逼的，特别是看完一遍高程之后的一脸懵逼，想想还真好笑。</p>
<h5 id="2016-10"><a href="#2016-10" class="headerlink" title="2016-10"></a>2016-10</h5><p><img src="http://upload-images.jianshu.io/upload_images/3326189-c27d2884c2972145.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" width="500" height="667" alt="4.jpg" align="center"></p>
<p>这个月要单独列出来说一下咯。哈哈哈，这个月工作室联盟，开始了对大一的 新生招新，想想他们真好，可以大一就开始接触技术。而自己确是大二了才开始。而且也开始那第一次的培训，由室长大大亲自操刀。</p>
<h5 id="2016-11——2016-12-校园博览会项目制作"><a href="#2016-11——2016-12-校园博览会项目制作" class="headerlink" title="2016-11——2016-12(校园博览会项目制作)"></a>2016-11——2016-12(校园博览会项目制作)</h5><p><img src="http://upload-images.jianshu.io/upload_images/3326189-a455193b4ec9ce03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" width="500" height="375" alt="4.jpg" align="center"></p>
<p>这一个多月，是我这学期最忙也是最充实的一个月。即使中间有那么一点的不开心与不理解，不过最后的结果还是挺好的。这一个月也让我成长了很多，也许也在工作室某些人的心里突然变得比较厉害起来，但是也只有自己知道自己是几斤几两，其实心理压力还是蛮大的。<br>这个项目本来一开始并不是我在参与，可是由于种种原因，我也是在小半路上加进去了。学到的最多的可能就是交互的功能的使用。一开始其实我没有主动去接这个项目，更多的是因为害怕，我怕自己的能力太弱，不敢去接。后来我也懂了，有些东西，真的要靠自己去争取的，不然真的很难去获得这个机会并去成长，也不要害怕自己能力不够，能力，就是在实践中获取的。</p>
<h5 id="2016-12——2017-1"><a href="#2016-12——2017-1" class="headerlink" title="2016-12——2017-1"></a>2016-12——2017-1</h5><p> 这一个月貌似对代码的感染力没有那么大了，基本上都是被四级考试、期末考试这两样东西所占据，不过在期末考试之前，我开始入门看了一部分的ES6，不够可惜的是，没有总结的博客。而且，看的也不多，看过的一些东西，在期末完了之后，发现自己也忘记了，只有从头开始了。<br><img src="http://upload-images.jianshu.io/upload_images/3326189-975c2c5d48aeb4ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" width="313" height="340" alt="5.jpg" align="center"></p>
<h5 id="2017-1——2017-1-16"><a href="#2017-1——2017-1-16" class="headerlink" title="2017-1——2017-1-16"></a>2017-1——2017-1-16</h5><p>好了，也就是到今天了，刚刚好半年。做程序员的这半年，也许，从某种角度而言，这半年，我也不算真正的程序员，只是从一个职业小白变成了半黑半白的我，还多亏学姐学长们的帮助。未来的路还很长，当然，我会坚持做程序员。毕竟，这是我上大学了，坚持了那么久的事情。在很多人眼中变成了一个刻苦认真，为自己目标好好奋斗的励志青年。未来。我更要好好的加油。<br>加油吧，自己！</p>
<h5 id="最后总结一下这半年的成果"><a href="#最后总结一下这半年的成果" class="headerlink" title="最后总结一下这半年的成果"></a>最后总结一下这半年的成果</h5><ul>
<li>三个网页<ul>
<li>恭贺新春</li>
<li>卓一企管</li>
<li>优设网</li>
</ul>
</li>
<li>五个组件<ul>
<li>表单验证</li>
<li>Tab选项卡</li>
<li>轮播</li>
<li>弹出登录框</li>
<li>json分页</li>
</ul>
</li>
<li>两个项目<ul>
<li>校园博览会</li>
<li>极客网官网（还在进行中）</li>
</ul>
</li>
<li>工具使用<ul>
<li>github</li>
<li>博客园写了22篇博客</li>
<li>coding</li>
<li>sublime</li>
<li>谷歌调试器</li>
<li>coding</li>
<li>用Hexo搭建了自己的博客</li>
<li>简书</li>
<li>RAP</li>
</ul>
</li>
<li>阅读书籍<ul>
<li>《精通CSS》</li>
<li>《编写高质量代码》</li>
<li>《JavaScript高级程序设计》</li>
<li>《锋利的jQuery》</li>
<li>《ES6》  </li>
</ul>
</li>
</ul>
<p>看的书籍可能不是很多。在这个寒假我还会再看，会比较偏向学习node，夯实JavaScript的知识，还有完成工作室官网。加油吧，向未来跨进。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 这篇文章只是仅仅为了纪念一下我做程序员的半周年 &lt;/strong&gt;&lt;br&gt;什么时候开始决定做程序员呢，具体的心理变化可能没有那么清楚，不过大概的事件变化还是知道的。&lt;br&gt;
    
    </summary>
    
      <category term="日常" scheme="http://wlfsmile.win/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="纪念" scheme="http://wlfsmile.win/tags/%E7%BA%AA%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wlfsmile.win/2017/01/15/hello-world/"/>
    <id>http://wlfsmile.win/2017/01/15/hello-world/</id>
    <published>2017-01-15T14:15:39.000Z</published>
    <updated>2017-10-19T13:23:13.282Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>markdowm语法总结</title>
    <link href="http://wlfsmile.win/2017/01/14/markdowm%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://wlfsmile.win/2017/01/14/markdowm语法总结/</id>
    <published>2017-01-14T06:23:59.000Z</published>
    <updated>2017-08-15T12:51:49.349Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对一些简单markdown的语法理解"><a href="#对一些简单markdown的语法理解" class="headerlink" title="对一些简单markdown的语法理解"></a>对一些简单markdown的语法理解</h3><p><img src="/img/markdown.jpg" alt="markdown"></p>
<h5 id="这也是我第一次用markdown语法写的文章，还是有很多不足"><a href="#这也是我第一次用markdown语法写的文章，还是有很多不足" class="headerlink" title="这也是我第一次用markdown语法写的文章，还是有很多不足"></a>这也是我第一次用markdown语法写的文章，还是有很多不足</h5><a id="more"></a>
<h5 id="【前提概要】"><a href="#【前提概要】" class="headerlink" title="【前提概要】"></a>【前提概要】</h5><p>对于一个markdown小白来总结这篇文章，我理解的最深刻的就是，HTML与markdown语法之间的联系。简而言之，HTML不能使用markdown的语法，但是markdown中支持在HTML中的语法使用。所有我一开始用的HTML语法来写的github的README.md文档达到了我想要的效果 ，比如\&lt; p&gt;或者\&lt; img&gt;标签，也可以用来作为markdown中的行段落和插入图片。  </p>
<h5 id="【段落和换行】"><a href="#【段落和换行】" class="headerlink" title="【段落和换行】"></a>【段落和换行】</h5><p>要写一篇文章的话，对于段落感跟换行是必须的，可以用HTML中的\&lt; br&gt;标签进行换行， 但在markdown中，也可以用两个或两个以上的空格加回车键，就可以换好行了。  </p>
<h5 id="【标题】"><a href="#【标题】" class="headerlink" title="【标题】"></a>【标题】</h5><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。<br>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）。<br>相比于类Setext形式，我更喜欢用类atx形式，相比也比较简单，直接在标题前面加上#即可，几号标题加几个#即可（1到6个）。  </p>
<h5 id="【区块引用-Blockquotes】"><a href="#【区块引用-Blockquotes】" class="headerlink" title="【区块引用 Blockquotes】"></a>【区块引用 Blockquotes】</h5><p>在文字开头添加“&gt;”表示区块引用（块注释）  </p>
<h5 id="【斜体和粗体】"><a href="#【斜体和粗体】" class="headerlink" title="【斜体和粗体】"></a>【斜体和粗体】</h5><p>在需要斜体的文字两端用”*“或者”_“夹起来，而如要粗体，则用两个”*“或者”_“夹起来。  </p>
<h5 id="【无序与有序列表】"><a href="#【无序与有序列表】" class="headerlink" title="【无序与有序列表】"></a>【无序与有序列表】</h5><p>在文字开头添加(*, +, and -)实现无序列表。但是要注意在(*, +, and -)和文字之间需要添加空格。(一个文档中最好只是用一种无序列表的表示方式)，而有序列表在使用数字后面加上句号和空格即可。  </p>
<h5 id="【链接】"><a href="#【链接】" class="headerlink" title="【链接】"></a>【链接】</h5><p>实现链接一共有两种基本方式：内联和引用方式。<br>内联：在链接的文字外加上[],而在[]外加上(里面是链接的地址)，如：这篇文章主要来自<a href="http://www.appinn.com/markdown/" target="_blank" rel="external">markdown语法</a>。<br>引用：这篇文章主要来自[markdown语法][1]，[第二个][2]<br>[1]: <a href="http://www.appinn.com/markdown/" target="_blank" rel="external">http://www.appinn.com/markdown/</a>  “markdown”<br>[2]: <a href="http://www.appinn.com/markdown/" target="_blank" rel="external">http://www.appinn.com/markdown/</a>  “markdown”<br>其中”markdown”表示鼠标移到链接的文字上去，会显示出来的内容，如：<br>引用：这篇文章主要来自<a href="http://www.appinn.com/markdown/" title="markdown" target="_blank" rel="external">markdown语法</a>，<a href="http://www.appinn.com/markdown/" title="markdown" target="_blank" rel="external">第二个</a>  </p>
<h5 id="【插入图片】"><a href="#【插入图片】" class="headerlink" title="【插入图片】"></a>【插入图片】</h5><p>插入图片的方式跟链接的方式类似。<br>内联方式：![alt text](/path/to/img.jpg “Title”)<br>引用方式：<br>![alt text][id]<br>[id]: /path/to/img.jpg “Title”  </p>
<h5 id="【代码框】"><a href="#【代码框】" class="headerlink" title="【代码框】"></a>【代码框】</h5><p>有两种方式，第一种是在一些比较简单的代码中，可以直接使用` &lt; blockquote&gt;`来实现。第二种是大片文字需要实现代码框。使用Tab或四个空格。  </p>
<h5 id="【脚注】"><a href="#【脚注】" class="headerlink" title="【脚注】"></a>【脚注】</h5><p>hello[^hello]<br>[^hello]: hi<br>效果为：<br>hello<a href="hi">^hello</a></p>
<h5 id="【下划线】"><a href="#【下划线】" class="headerlink" title="【下划线】"></a>【下划线】</h5><p>在空白行下方添加三条“-”横线。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;对一些简单markdown的语法理解&quot;&gt;&lt;a href=&quot;#对一些简单markdown的语法理解&quot; class=&quot;headerlink&quot; title=&quot;对一些简单markdown的语法理解&quot;&gt;&lt;/a&gt;对一些简单markdown的语法理解&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/img/markdown.jpg&quot; alt=&quot;markdown&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;这也是我第一次用markdown语法写的文章，还是有很多不足&quot;&gt;&lt;a href=&quot;#这也是我第一次用markdown语法写的文章，还是有很多不足&quot; class=&quot;headerlink&quot; title=&quot;这也是我第一次用markdown语法写的文章，还是有很多不足&quot;&gt;&lt;/a&gt;这也是我第一次用markdown语法写的文章，还是有很多不足&lt;/h5&gt;
    
    </summary>
    
      <category term="前端" scheme="http://wlfsmile.win/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="markdown" scheme="http://wlfsmile.win/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>第二次讨论</title>
    <link href="http://wlfsmile.win/2016/10/27/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E8%AE%A8%E8%AE%BA/"/>
    <id>http://wlfsmile.win/2016/10/27/第二次讨论/</id>
    <published>2016-10-27T11:38:13.000Z</published>
    <updated>2017-08-15T12:51:49.355Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 这些是小组第二次讨论，主要讨论了响应式设计、布局、css性能优化、css预处理 </strong><br><a id="more"></a></p>
<h5 id="【响应式设计】"><a href="#【响应式设计】" class="headerlink" title="【响应式设计】"></a>【响应式设计】</h5><p>集中创建页面的图片排版大小，可以智能地根据用户行为以及使用的设备环境（系统平台、屏幕尺寸、屏幕定向等）进行相对应的布局。<br>响应式布局：<br>meta标签的实用：设置布局宽度等于设备宽度，布局viewport等于度量viewport<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</code></p>
<h5 id="【【布局】】"><a href="#【【布局】】" class="headerlink" title="【【布局】】"></a>【【布局】】</h5><h5 id="【水平居中】"><a href="#【水平居中】" class="headerlink" title="【水平居中】"></a>【水平居中】</h5><p><strong> text-align和inline-block的联合使用：</strong><br>text-align属性：通过指定行框与哪个点对齐，从而设置块级元素内文本的水平对齐方式。（从而child为文本行内元素，parent为块状元素，可以通过display来设置）。  </p>
<pre><code>.parent{text-align: center;} //父元素
.child{display: inline-block;}//子元素  
</code></pre><p>不过此方法兼容性比较好，IE浏览器接收。不过代码较多，同时要设置父元素和子元素。<br><strong> 使用margin：0 auto设置 </strong>  </p>
<pre><code>.child{width:100px;margin:0 auto;}//必须要有宽度
</code></pre><p>margin设置的是块级元素的居中。兼容性好，不过需要设置宽度。<br><strong> display：table设置 </strong></p>
<pre><code>.child{display:table;margin:0 auto;}
</code></pre><p>此方法只需对自身进行设置，代码简短。不过在IE6、7上，需要进行调整。<br><strong> 使用绝对定位 </strong></p>
<pre><code>.parent{position:relative;}
/*或者实用margin-left的负值为盒子宽度的一半也可以实现，不过这样就必须知道盒子的宽度，但兼容性好*/
.child{position:absolute;left:50%;transform:translate(-50%);}
</code></pre><p>transform：translate。移动transform在translation的方向和距离。简单的说，向某方向移动物体多少距离。<br>不过这个方法兼容性不好，要IE9 以上。</p>
<h5 id="【垂直居中】"><a href="#【垂直居中】" class="headerlink" title="【垂直居中】"></a>【垂直居中】</h5><p><strong> vertical-align方法 </strong></p>
<pre><code>/*第一种方法*/ 
.parent{display:table-cell;vertical-align:middle;height:20px;} 
/*第二种方法*/ 
.parent{display:inline-block;vertical-align:middle;line-height:20px;}
</code></pre><p>在使用vertical-align的时候，由于对齐的基线是用行高的基线作为标记，故需要设置line-height或设置display:table-cell。<br><strong> 使用绝对定位 </strong></p>
<pre><code>.parent{position:relative;} 
.child{positon:absolute;top:50%;transform:translate(0,-50%);}
</code></pre><p>注意与水平居中的区别</p>
<h5 id="【水平垂直居中】"><a href="#【水平垂直居中】" class="headerlink" title="【水平垂直居中】"></a>【水平垂直居中】</h5><p><strong> 利用vertical-align,text-align,inline-block实现 </strong></p>
<pre><code>.parent{display:table-cell;vertical-align:middle;text-align:center;} 
.child{display:inline-block;}
</code></pre><p><strong> 使用绝对定位 </strong></p>
<pre><code>.parent{position:relative;} 
.child{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);}
</code></pre><p>由上可知，绝对定位可以实现任何方式的居中，不过还要考虑兼容性问题。</p>
<h5 id="【多列布局】"><a href="#【多列布局】" class="headerlink" title="【多列布局】"></a>【多列布局】</h5><p><strong> 左列定宽，右列自适应： </strong><br>使用float+margin  </p>
<pre><code>.left{float:left;width:100px;}
.right{margin-left:100px;}
</code></pre><p>经试验，如果不用margin的话，必须设置高度。IE6会有3px的bug<br>使用table实现</p>
<pre><code>.parent{display:table;table-layout:fixed;width:100%;} 
.left{display:table-cell;} 
.right{width:100px;display:table-cell;}
</code></pre><p><strong> 两列定宽，一列自适应 </strong><br>使用margin+float<br>利用float+overflow实现</p>
<pre><code>.left,.center{float:left:width:200px;} 
.right{overflow:hidden;}
</code></pre><p>利用table实现<br><strong> 两侧自适应，中间定宽（网页布局常用） </strong><br>使用margin+float </p>
<pre><code>.left{width：100px;float:left;}
.center{float:left;width:100%;margin-right:-200px;} 
.right{width:100px;float:right;}
</code></pre><p>利用table实现<br><strong> 一列不定宽，一列自适应 </strong><br>利用float+overflow实现</p>
<pre><code>.left{float:left;background-color: red;height: 100px;}
.right{background-color: blue;overflow: hidden;height: 100px;}
</code></pre><p>不需要设定高度。会自适应。</p>
<p><strong> 多列式分布 </strong></p>
<ul>
<li>div+float</li>
</ul>
<p><strong> 九宫格布局 </strong></p>
<ul>
<li>div+table</li>
</ul>
<h5 id="【css性能优化】"><a href="#【css性能优化】" class="headerlink" title="【css性能优化】"></a>【css性能优化】</h5><p><strong> 模块化：</strong><br>让代码高度重用，提高开发效率。<br>模块与模块之间尽量不要包含相同的部分，如果有，提取出来，拆分成一个独立的模块。</p>
<p><strong> css命名：</strong><br>用英文。大小驼峰、下划线等。驼峰表示区别不同单词，下划线表示从属关系。<br>避免重复命名，自己的代码前加上属于自己的前缀。<br><strong> class的使用：多组合，少继承。 </strong></p>
<p><strong> 上下margin处理：</strong><br>如果不确定模块的上下margin特别稳定，最好不要将它写在模块的类里，而是使用类的组合，单独为上下margin挂用于边距的原子类（如mt10、mb20）。模块最好不要混用margin-top和margin-bottom，统一使用某一个。</p>
<p><strong> 低权重原则：</strong><br>避免滥用自选择器。当不同选择符的样式设置有冲突时，会采用权重高的选择符设置样式。选择符权重相同，为就近原则。</p>
<p><strong> 权重原则：</strong><br>HTML标签为1（如p），class为10，id为100。css选择符保证权重尽可能低。<br>使用子选择器，会增加css选择符的权重。新添class更利于维护。</p>
<p><strong> css sprite技术：</strong><br>将网站的多张背景图片合并到一张大图上。利用background-position属性来展示我们需要的部分,图片加载会发出HTTP请求，而使用css sprite就减少了HTTP请求次数。减轻服务器压力。只能合并背景图片。对于横向和纵向都平铺的图片，不能使用css sprite，只能或横向，或纵向。排版要尽量紧凑。<br>缺点：降低开发效率和增大维护难度，是否使用取决于网站流量。</p>
<p><strong> css常见问题：</strong> </p>
<ul>
<li>编码风格：<ul>
<li>多行式可读性强，不过会增大css文件大小，一行式可读性较差，不过利于提高开发速度，减小css文件大小。推荐一行式。</li>
</ul>
</li>
<li>id和class：<br>  -同一网页，相同id只能出现一次，但是class无限制。id的权重大于class。不过原生JS提供getElementId()方法，不支持class。使用id会限制网页的扩展性。一般情况下，建议尽量使用class，少用id。</li>
<li>css hack：<ul>
<li>IE条件注释法（兼容性最好，增加了开发和维护成本）</li>
<li>选择符前缀法（增强了可维护性，不过兼容性欠佳，不能用于内联样式）</li>
<li>样式属性前缀法（集合度更高，代码更加精简，可维护性更强，但存在兼容风险，可用于内联样式）  </li>
</ul>
</li>
<li>解决超链接访问后hover样式不出现的问题：<ul>
<li>a标签四种状态的排 序问题，love hate原则 ，即l(link)ov(visited)e h(hover)a(active)te。</li>
</ul>
</li>
<li>haslayout：<br> -IE浏览器的专有属性，用于css的解析引擎。很多bug都因为haslayout没有被自动触发。最好的解决方法：zoom。</li>
<li>块级元素和行内元素：<ul>
<li>使用display转换。</li>
</ul>
</li>
<li>IE6、7不支持display：inline-block。</li>
<li>relative、absolute和float：不要滥用。<h5 id="【css预处理】"><a href="#【css预处理】" class="headerlink" title="【css预处理】"></a>【css预处理】</h5>用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 这些是小组第二次讨论，主要讨论了响应式设计、布局、css性能优化、css预处理 &lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://wlfsmile.win/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://wlfsmile.win/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>第一次讨论</title>
    <link href="http://wlfsmile.win/2016/10/15/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AE%A8%E8%AE%BA/"/>
    <id>http://wlfsmile.win/2016/10/15/第一次讨论/</id>
    <published>2016-10-15T11:17:03.000Z</published>
    <updated>2017-08-15T12:51:49.354Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 这篇博客写于 2016-10-15 </strong><br><strong> 这个主要是我们前端小组第一次讨论的内容，行内与块级、浮动与清除浮动、定位、兼容性处理。其中大多内容都是我从网上收集来的。还是需要有自己的想法。感觉这次讨论还是挺有一定的效果的。至少我把有一些内容更加完整跟清晰化了。 </strong><br><a id="more"></a></p>
<h5 id="【行内元素和块级元素】"><a href="#【行内元素和块级元素】" class="headerlink" title="【行内元素和块级元素】"></a>【行内元素和块级元素】</h5><p>块级元素：div , p , form, ul, li , ol, dl， address, fieldset, hr, menu, table<br>行内元素：span, strong, em, br, img , input, label, select, textarea, cite<br>可变元素（根据上下文语境而定）：<br>button，applet，del，ifram，ins，map，object，script<br><strong> 区别：</strong></p>
<ol>
<li>块级元素会独占一行，其宽度自动填满其父元素宽度<br>　行内元素不会独占一行，相邻的行内元素会排列在同一行里，知道一行排不下，才会换行，其宽度随元素的内容 而变化</li>
<li>块级元素可以设置 width, height属性，行内元素设置width, height无效<br>【注意：块级元素即使设置了宽度，仍然是独占一行的】</li>
<li>块级元素可以设置margin 和 padding. 行内元素的水平方向的都产生边距效果，但是竖直方向的都不会产生边距效果。（水平方向有效，竖直方向无效）。<br>将display设为block，可以让行内元素表现像块级元素。<br>line-block在IE6下有问题。  </li>
</ol>
<h5 id="【浮动和清除浮动（闭合浮动）】"><a href="#【浮动和清除浮动（闭合浮动）】" class="headerlink" title="【浮动和清除浮动（闭合浮动）】"></a>【浮动和清除浮动（闭合浮动）】</h5><p>高度塌陷：元素含有浮动元素—破坏inline box—破坏line box—没有高度—塌陷。<br>当标签里面的元素只要样子没有实际高度时就会塌陷。</p>
<ul>
<li>若浮动对象有负边界，浮动对象可能会浮到其所在父对象外边。</li>
<li>若较宽的子盒子有一个较窄的父盒子中拥有浮动属性，不会影响父盒子宽度，子盒子越到父盒子外，父盒子不会有文本流浮动，而子盒子会覆盖在上。</li>
<li>父盒子为自动高度或不设，子盒子拥有浮动，并高度超过了父盒子（解决方法：加入clear:both）<br><strong> 清除浮动 </strong><br>IE下：使元素haslayout。<br>非IE下：通常使用overflow:hidden。<br><strong> 方法：</strong></li>
</ul>
<ol>
<li>直接添加clear:both（不推荐）；</li>
<li>overflow+zoom：有局限性，margin为负定位或是负的绝对定位。.fix{overflow:hidden;zoom:1;}。</li>
<li>after+zoom：.fix{zoom:1;} .fix:after{display:block;content:”.”;clear:both;line-height:0;visibility:hidden;}</li>
</ol>
<ul>
<li>方法：<ul>
<li>让容器也浮动。  </li>
<li>设置容器overflow为auto或hidden（有副作用）。</li>
</ul>
</li>
</ul>
<h5 id="【定位】"><a href="#【定位】" class="headerlink" title="【定位】"></a>【定位】</h5><p>基本方式：static（默认定位方式）、relative、absolute。<br>relative：相对定位，相对于原来的位置，但是原来的位置仍然保留。<br>absolute：绝对定位，相对于最近的非标准流定位，原来的位置消失，被最后边的位置所顶替。<br>fixed：固定定位。<br>定位机制是由普通流、浮动、绝对定位三种组成。<br>只要父级元素设置了position并且不是static，那么设定了absolute的子元素，即以此为包含块（最近的）。<br>绝对定位元素定位的参照物使其包含块，即相对于包含块进行定位，不一定是其父元素。</p>
<h5 id="【兼容性处理】"><a href="#【兼容性处理】" class="headerlink" title="【兼容性处理】"></a>【兼容性处理】</h5><p>CSS hack：为了页面统一，针对不同浏览器或不同版本写出可解析的css样式，把这个针对不同浏览器/版本写的css过程叫做css hack。<br><strong> 问题：</strong></p>
<ul>
<li>DOCTYPE 影响 CSS 处理 ；</li>
<li>FF: 设置 padding 后， div 会增加 height 和 width， 但 IE 不会， 故需要用 !important 多设一个 height 和 width 。FF: 支持 !important， IE 则忽略,可用 !important 为 FF 特别设置样式</li>
<li>在mozilla firefox和IE中的BOX模型解释不一致导致相差2px解决方法：<ul>
<li>div{margin:30px!important;margin:28px;} 注意这两个margin的顺序一定不能写反，!important这个属性IE不能识别，但别的浏览器可以识别。</li>
</ul>
</li>
</ul>
<p><strong> 浏览器差异：</strong></p>
<ol>
<li>ul和ol列表缩进问题</li>
</ol>
<ul>
<li>消除ul、ol等列表的缩进时，样式应写成：{list-style:none;margin:0px;padding:0px; }</li>
<li>其中margin属性对IE有效，padding属性对FireFox有效。  </li>
</ul>
<ol>
<li>css透明度 </li>
</ol>
<ul>
<li>IE：filter:progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=60)。 </li>
<li>FF：opacity:0.6。<br>最好两个都写，并将opacity属性放在下面。</li>
</ul>
<ol>
<li>css圆角问题</li>
</ol>
<ul>
<li>IE：IE6及以下不支持圆角。</li>
<li>FF：支持border-radius。  </li>
</ul>
<ol>
<li>firefox不支持hand，但ie支持pointer ，两者都是手形指示。 最好统一使用pointer。<br><strong> 浏览器bug：</strong></li>
</ol>
<ul>
<li>IE的双边距：设置为float的div在IE下设置margin会加倍。<ul>
<li>解决方法：在div面加上display:inline;   </li>
</ul>
</li>
<li>IE选择器空格bug：在IE中，处理伪类时，如果伪类的名称中带有连字符“-”，伪类名称后面就得跟一个空格，不然定义无效。在FF中无影响。<h5 id="【其他】"><a href="#【其他】" class="headerlink" title="【其他】"></a>【其他】</h5><strong> display:none和visiblity:hidden的区别：</strong><br>display:none，不占位，相当于完全消失。而visiblity:hidden，占位，相当于只是把它给隐藏掉。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 这篇博客写于 2016-10-15 &lt;/strong&gt;&lt;br&gt;&lt;strong&gt; 这个主要是我们前端小组第一次讨论的内容，行内与块级、浮动与清除浮动、定位、兼容性处理。其中大多内容都是我从网上收集来的。还是需要有自己的想法。感觉这次讨论还是挺有一定的效果的。至少我把有一些内容更加完整跟清晰化了。 &lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://wlfsmile.win/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://wlfsmile.win/tags/css/"/>
    
  </entry>
  
</feed>
